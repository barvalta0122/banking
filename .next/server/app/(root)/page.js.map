{"version":3,"file":"../app/(root)/page.js","mappings":"ouBAAAA,CAAAA,EAAAC,OAAA,CAAAC,QAAA,oFCAAF,CAAAA,EAAAC,OAAA,CAAAC,QAAA,uFCAAF,CAAAA,EAAAC,OAAA,CAAAC,QAAA,qFCAAF,CAAAA,EAAAC,OAAA,CAAAC,QAAA,wFCAAF,CAAAA,EAAAC,OAAA,CAAAC,QAAA,+FCAAF,CAAAA,EAAAC,OAAA,CAAAC,QAAA,kGCAAF,CAAAA,EAAAC,OAAA,CAAAC,QAAA,kFCAAF,CAAAA,EAAAC,OAAA,CAAAC,QAAA,iCCAAF,CAAAA,EAAAC,OAAA,CAAAC,QAAA,iCCAAF,CAAAA,EAAAC,OAAA,CAAAC,QAAA,sCCAAF,CAAAA,EAAAC,OAAA,CAAAC,QAAA,uCCAAF,CAAAA,EAAAC,OAAA,CAAAC,QAAA,iCCAAF,CAAAA,EAAAC,OAAA,CAAAC,QAAA,iCCAAF,CAAAA,EAAAC,OAAA,CAAAC,QAAA,6BCAAF,CAAAA,EAAAC,OAAA,CAAAC,QAAA,+BCAAF,CAAAA,EAAAC,OAAA,CAAAC,QAAA,gCCAAF,CAAAA,EAAAC,OAAA,CAAAC,QAAA,iCCAAF,CAAAA,EAAAC,OAAA,CAAAC,QAAA,6CCAAF,CAAAA,EAAAC,OAAA,CAAAC,QAAA,mDCAAF,CAAAA,EAAAC,OAAA,CAAAC,QAAA,kCCAAF,CAAAA,EAAAC,OAAA,CAAAC,QAAA,oCCAAF,CAAAA,EAAAC,OAAA,CAAAC,QAAA,qCCAAF,CAAAA,EAAAC,OAAA,CAAAC,QAAA,yCCAAF,CAAAA,EAAAC,OAAA,CAAAC,QAAA,mCCAAF,CAAAA,EAAAC,OAAA,CAAAC,QAAA,kCCAAF,CAAAA,EAAAC,OAAA,CAAAC,QAAA,oCCAAF,CAAAA,EAAAC,OAAA,CAAAC,QAAA,sCCAAF,CAAAA,EAAAC,OAAA,CAAAC,QAAA,mCCAAF,CAAAA,EAAAC,OAAA,CAAAC,QAAA,oCCAAF,CAAAA,EAAAC,OAAA,CAAAC,QAAA,8CCAAF,CAAAA,EAAAC,OAAA,CAAAC,QAAA,oCCAAF,CAAAA,EAAAC,OAAA,CAAAC,QAAA,6BCAAF,CAAAA,EAAAC,OAAA,CAAAC,QAAA,8BCAAF,CAAAA,EAAAC,OAAA,CAAAC,QAAA,qCCAAF,CA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A,KACAC,EAAA,QACAC,EAAA,IACA,EACAC,EAAA,CACAC,OAAA,SACAC,YAAA,SACAC,KAAA,OACAC,UAAA,SACAC,KAAA,SACAC,MAAA,SACAC,OAAA,SACAC,MAAA,IACAC,aAAA,SACAC,GAAA,KACAC,QAAA,SACAC,KAAA,SACAC,UAAA,SACAC,OAAA,SACAC,SAAA,SACAC,QAAA,SACAC,IAAA,SACAC,YAAA,SACAC,QAAA,SACAC,QAAA,SACAC,KAAA,OACAC,IAAA,KACAC,MAAA,OACAC,QAAA,SACAC,KAAA,SACAC,KAAA,OACAC,KAAA,SACAC,OAAA,SACAC,QAAA,SACAC,SAAA,SACAC,OAAA,SACAC,MAAA,SACAC,IAAA,SACAC,OAAA,SACAC,OAAA,SACAC,KAAA,SACAC,MAAA,SACAC,MAAA,SACAC,IAAA,OACAC,OAAA,SACAC,OAAA,SACAC,SAAA,OACAC,OAAA,SACAC,OAAA,SACAC,SAAA,SACAC,SAAA,SACAC,SAAA,SACAC,SAAA,SACAC,OAAA,SACAC,QAAA,SACAC,UAAA,SACAC,IAAA,SACAC,OAAA,SACAC,IAAA,SACAC,IAAA,OACAC,MAAA,SACAC,IAAA,SACAC,QAAA,SACAC,OAAA,SACAC,QAAA,SACAC,MAAA,SACAC,KAAA,SACAC,MAAA,SACAC,OAAA,SACAC,UAAA,SACAC,QAAA,SACAC,WAAA,SACAC,IAAA,SACAC,KAAA,SACAC,MAAA,SACAC,UAAA,SACAC,KAAA,SACAC,KAAA,SACAC,KAAA,SACAC,KAAA,SACAC,OAAA,SACAC,OAAA,SACAC,OAAA,SACAC,MAAA,SACAC,MAAA,SACAC,QAAA,SACAC,IAAA,SACAC,KAAA,OACAC,QAAA,SACAC,IAAA,SACAC,OAAA,SACAC,MAAA,SACAC,WAAA,SACAC,IAAA,KACAC,MAAA,SACAC,OAAA,SACAC,OAAA,SACAC,KAAA,SACAC,UAAA,OACAC,IAAA,SACAC,SAAA,SACAC,WAAA,SACAC,QAAA,SACAC,SAAA,SACAC,QAAA,SACAC,WAAA,SACAC,KAAA,KACAC,OAAA,SACAC,KAAA,SACAC,QAAA,SACAC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","sources":["webpack://jsm_banking/external commonjs \"next/dist/client/components/action-async-storage.external\"","webpack://jsm_banking/external commonjs \"next/dist/client/components/action-async-storage.external.js\"","webpack://jsm_banking/external commonjs \"next/dist/client/components/request-async-storage.external\"","webpack://jsm_banking/external commonjs \"next/dist/client/components/request-async-storage.external.js\"","webpack://jsm_banking/external commonjs \"next/dist/client/components/static-generation-async-storage.external\"","webpack://jsm_banking/external commonjs \"next/dist/client/components/static-generation-async-storage.external.js\"","webpack://jsm_banking/external commonjs \"next/dist/compiled/next-server/app-page.runtime.prod.js\"","webpack://jsm_banking/external commonjs \"undici\"","webpack://jsm_banking/external node-commonjs \"assert\"","webpack://jsm_banking/external node-commonjs \"async_hooks\"","webpack://jsm_banking/external node-commonjs \"child_process\"","webpack://jsm_banking/external node-commonjs \"crypto\"","webpack://jsm_banking/external node-commonjs \"events\"","webpack://jsm_banking/external node-commonjs \"fs\"","webpack://jsm_banking/external node-commonjs \"http\"","webpack://jsm_banking/external node-commonjs \"https\"","webpack://jsm_banking/external node-commonjs \"module\"","webpack://jsm_banking/external node-commonjs \"node:child_process\"","webpack://jsm_banking/external node-commonjs \"node:diagnostics_channel\"","webpack://jsm_banking/external node-commonjs \"node:fs\"","webpack://jsm_banking/external node-commonjs \"node:http\"","webpack://jsm_banking/external node-commonjs \"node:https\"","webpack://jsm_banking/external node-commonjs \"node:inspector\"","webpack://jsm_banking/external node-commonjs \"node:net\"","webpack://jsm_banking/external node-commonjs \"node:os\"","webpack://jsm_banking/external node-commonjs \"node:path\"","webpack://jsm_banking/external node-commonjs \"node:stream\"","webpack://jsm_banking/external node-commonjs \"node:tls\"","webpack://jsm_banking/external node-commonjs \"node:util\"","webpack://jsm_banking/external node-commonjs \"node:worker_threads\"","webpack://jsm_banking/external node-commonjs \"node:zlib\"","webpack://jsm_banking/external node-commonjs \"os\"","webpack://jsm_banking/external node-commonjs \"path\"","webpack://jsm_banking/external node-commonjs \"perf_hooks\"","webpack://jsm_banking/external node-commonjs \"process\"","webpack://jsm_banking/external node-commonjs \"punycode\"","webpack://jsm_banking/external node-commonjs \"stream\"","webpack://jsm_banking/external node-commonjs \"stream/web\"","webpack://jsm_banking/external node-commonjs \"tty\"","webpack://jsm_banking/external node-commonjs \"url\"","webpack://jsm_banking/external node-commonjs \"util\"","webpack://jsm_banking/external node-commonjs \"worker_threads\"","webpack://jsm_banking/external node-commonjs \"zlib\"","webpack://jsm_banking/./components/RecentTransactions.tsx","webpack://jsm_banking/./components/Category.tsx","webpack://jsm_banking/./components/RightSidebar.tsx","webpack://jsm_banking/./components/TotalBalanceBox.tsx","webpack://jsm_banking/app/(root)/page.tsx","webpack://jsm_banking/sentry-wrapper-module","webpack://jsm_banking/?ff81","webpack://jsm_banking/?2361","webpack://jsm_banking/./components/AnimatedCounter.tsx","webpack://jsm_banking/./components/BankInfo.tsx","webpack://jsm_banking/./components/BankTabItem.tsx","webpack://jsm_banking/./components/Copy.tsx","webpack://jsm_banking/./node_modules/@kurkle/color/dist/color.esm.js","webpack://jsm_banking/./node_modules/chart.js/dist/chunks/helpers.segment.js","webpack://jsm_banking/./node_modules/chart.js/dist/chart.js","webpack://jsm_banking/./node_modules/react-chartjs-2/dist/index.js","webpack://jsm_banking/./components/DoughnutChart.tsx","webpack://jsm_banking/./components/Pagination.tsx","webpack://jsm_banking/./node_modules/@radix-ui/react-progress/dist/index.mjs","webpack://jsm_banking/./components/ui/progress.tsx","webpack://jsm_banking/./node_modules/@radix-ui/react-roving-focus/dist/index.mjs","webpack://jsm_banking/./node_modules/@radix-ui/react-tabs/dist/index.mjs","webpack://jsm_banking/./components/ui/tabs.tsx","webpack://jsm_banking/./node_modules/countup.js/dist/countUp.min.js","webpack://jsm_banking/./node_modules/react-countup/build/index.js","webpack://jsm_banking/./components/BankCard.tsx","webpack://jsm_banking/./components/ui/table.tsx","webpack://jsm_banking/./components/TransactionsTable.tsx","webpack://jsm_banking/./constants/index.ts","webpack://jsm_banking/./node_modules/next/dist/api/link.js","webpack://jsm_banking/../../src/client/link.tsx","webpack://jsm_banking/./node_modules/@radix-ui/react-collection/dist/index.mjs","webpack://jsm_banking/./node_modules/@radix-ui/react-direction/dist/index.mjs"],"sourcesContent":["module.exports = require(\"next/dist/client/components/action-async-storage.external\");","module.exports = require(\"next/dist/client/components/action-async-storage.external.js\");","module.exports = require(\"next/dist/client/components/request-async-storage.external\");","module.exports = require(\"next/dist/client/components/request-async-storage.external.js\");","module.exports = require(\"next/dist/client/components/static-generation-async-storage.external\");","module.exports = require(\"next/dist/client/components/static-generation-async-storage.external.js\");","module.exports = require(\"next/dist/compiled/next-server/app-page.runtime.prod.js\");","module.exports = require(\"undici\");","module.exports = require(\"assert\");","module.exports = require(\"async_hooks\");","module.exports = require(\"child_process\");","module.exports = require(\"crypto\");","module.exports = require(\"events\");","module.exports = require(\"fs\");","module.exports = require(\"http\");","module.exports = require(\"https\");","module.exports = require(\"module\");","module.exports = require(\"node:child_process\");","module.exports = require(\"node:diagnostics_channel\");","module.exports = require(\"node:fs\");","module.exports = require(\"node:http\");","module.exports = require(\"node:https\");","module.exports = require(\"node:inspector\");","module.exports = require(\"node:net\");","module.exports = require(\"node:os\");","module.exports = require(\"node:path\");","module.exports = require(\"node:stream\");","module.exports = require(\"node:tls\");","module.exports = require(\"node:util\");","module.exports = require(\"node:worker_threads\");","module.exports = require(\"node:zlib\");","module.exports = require(\"os\");","module.exports = require(\"path\");","module.exports = require(\"perf_hooks\");","module.exports = require(\"process\");","module.exports = require(\"punycode\");","module.exports = require(\"stream\");","module.exports = require(\"stream/web\");","module.exports = require(\"tty\");","module.exports = require(\"url\");","module.exports = require(\"util\");","module.exports = require(\"worker_threads\");","module.exports = require(\"zlib\");","import Link from 'next/link'\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\nimport { BankTabItem } from './BankTabItem'\nimport BankInfo from './BankInfo'\nimport TransactionsTable from './TransactionsTable'\nimport { Pagination } from './Pagination'\n\nconst RecentTransactions = ({\n  accounts,\n  transactions = [],\n  appwriteItemId,\n  page = 1,\n}: RecentTransactionsProps) => {\n  const rowsPerPage = 10;\n  const totalPages = Math.ceil(transactions.length / rowsPerPage);\n\n  const indexOfLastTransaction = page * rowsPerPage;\n  const indexOfFirstTransaction = indexOfLastTransaction - rowsPerPage;\n\n  const currentTransactions = transactions.slice(\n    indexOfFirstTransaction, indexOfLastTransaction\n  )\n\n  return (\n    <section className=\"recent-transactions\">\n      <header className=\"flex items-center justify-between\">\n        <h2 className=\"recent-transactions-label\">Recent transactions</h2>\n        <Link\n          href={`/transaction-history/?id=${appwriteItemId}`}\n          className=\"view-all-btn\"\n        >\n          View all\n        </Link>\n      </header>\n\n      <Tabs defaultValue={appwriteItemId} className=\"w-full\">\n      <TabsList className=\"recent-transactions-tablist\">\n          {accounts.map((account: Account) => (\n            <TabsTrigger key={account.id} value={account.appwriteItemId}>\n              <BankTabItem\n                key={account.id}\n                account={account}\n                appwriteItemId={appwriteItemId}\n              />\n            </TabsTrigger>\n          ))}\n        </TabsList>\n\n        {accounts.map((account: Account) => (\n          <TabsContent\n            value={account.appwriteItemId}\n            key={account.id}\n            className=\"space-y-4\"\n          >\n            <BankInfo \n              account={account}\n              appwriteItemId={appwriteItemId}\n              type=\"full\"\n            />\n\n            <TransactionsTable transactions={currentTransactions} />\n            \n\n            {totalPages > 1 && (\n              <div className=\"my-4 w-full\">\n                <Pagination totalPages={totalPages} page={page} />\n              </div>\n            )}\n          </TabsContent>\n        ))}\n      </Tabs>\n    </section>\n  )\n}\n\nexport default RecentTransactions","import Image from \"next/image\";\n\nimport { topCategoryStyles } from \"@/constants\";\nimport { cn } from \"@/lib/utils\";\n\nimport { Progress } from \"./ui/progress\";\n\nconst Category = ({ category }: CategoryProps) => {\n  const {\n    bg,\n    circleBg,\n    text: { main, count },\n    progress: { bg: progressBg, indicator },\n    icon,\n  } = topCategoryStyles[category.name as keyof typeof topCategoryStyles] ||\n  topCategoryStyles.default;\n\n  return (\n    <div className={cn(\"gap-[18px] flex p-4 rounded-xl\", bg)}>\n      <figure className={cn(\"flex-center size-10 rounded-full\", circleBg)}>\n        <Image src={icon} width={20} height={20} alt={category.name} />\n      </figure>\n      <div className=\"flex w-full flex-1 flex-col gap-2\">\n        <div className=\"text-14 flex justify-between\">\n          <h2 className={cn(\"font-medium\", main)}>{category.name}</h2>\n          <h3 className={cn(\"font-normal\", count)}>{category.count}</h3>\n        </div>\n        <Progress\n          value={(category.count / category.totalCount) * 100}\n          className={cn(\"h-2 w-full\", progressBg)}\n          indicatorClassName={cn(\"h-2 w-full\", indicator)}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default Category;","import Image from 'next/image'\nimport Link from 'next/link'\nimport React from 'react'\nimport BankCard from './BankCard'\nimport { countTransactionCategories } from '@/lib/utils'\nimport Category from './Category'\n\nconst RightSidebar = ({ user, transactions, banks }: RightSidebarProps) => {\n  const categories: CategoryCount[] = countTransactionCategories(transactions);\n\n  return (\n    <aside className=\"right-sidebar\">\n      <section className=\"flex flex-col pb-8\">\n        <div className=\"profile-banner\" />\n        <div className=\"profile\">\n          <div className=\"profile-img\">\n            <span className=\"text-5xl font-bold text-blue-500\">{user.firstName[0]}</span>\n          </div>\n\n          <div className=\"profile-details\">\n            <h1 className='profile-name'>\n              {user.firstName} {user.lastName}\n            </h1>\n            <p className=\"profile-email\">\n              {user.email}\n            </p>\n          </div>\n        </div>\n      </section>\n\n      <section className=\"banks\">\n        <div className=\"flex w-full justify-between\">\n          <h2 className=\"header-2\">My Banks</h2>\n          <Link href=\"/\" className=\"flex gap-2\">\n            <Image \n               src=\"/icons/plus.svg\"\n              width={20}\n              height={20}\n              alt=\"plus\"\n            />\n            <h2 className=\"text-14 font-semibold text-gray-600\">\n              Add Bank\n            </h2>\n          </Link>\n        </div>\n\n        {banks?.length > 0 && (\n          <div className=\"relative flex flex-1 flex-col items-center justify-center gap-5\">\n            <div className='relative z-10'>\n              <BankCard \n                key={banks[0].$id}\n                account={banks[0]}\n                userName={`${user.firstName} ${user.lastName}`}\n                showBalance={false}\n              />\n            </div>\n            {banks[1] && (\n              <div className=\"absolute right-0 top-8 z-0 w-[90%]\">\n                <BankCard \n                  key={banks[1].$id}\n                  account={banks[1]}\n                  userName={`${user.firstName} ${user.lastName}`}\n                  showBalance={false}\n                />\n              </div>\n            )}\n          </div>\n        )}\n\n        <div className=\"mt-10 flex flex-1 flex-col gap-6\">\n          <h2 className=\"header-2\">Top categories</h2>\n\n          <div className='space-y-5'>\n            {categories.map((category, index) => (\n              <Category key={category.name} category={category} />\n            ))}\n          </div>\n        </div>\n      </section>\n    </aside>\n  )\n}\n\nexport default RightSidebar","import AnimatedCounter from './AnimatedCounter';\nimport DoughnutChart from './DoughnutChart';\n\nconst TotalBalanceBox = ({\n  accounts = [], totalBanks, totalCurrentBalance\n}: TotalBalanceBoxProps) => {\n  return (\n    <section className=\"total-balance\">\n      <div className=\"total-balance-chart\">\n        <DoughnutChart accounts={accounts} />\n      </div>\n\n      <div className=\"flex flex-col gap-6\">\n        <h2 className=\"header-2\">\n          Bank Accounts: {totalBanks}\n        </h2>\n        <div className=\"flex flex-col gap-2\">\n          <p className=\"total-balance-label\">\n            Total Current Balance\n          </p>\n\n          <div className=\"total-balance-amount flex-center gap-2\">\n            <AnimatedCounter amount={totalCurrentBalance} />\n          </div>\n        </div>\n      </div>\n    </section>\n  )\n}\n\nexport default TotalBalanceBox","import HeaderBox from '@/components/HeaderBox'\nimport RecentTransactions from '@/components/RecentTransactions';\nimport RightSidebar from '@/components/RightSidebar';\nimport TotalBalanceBox from '@/components/TotalBalanceBox';\nimport { getAccount, getAccounts } from '@/lib/actions/bank.actions';\nimport { getLoggedInUser } from '@/lib/actions/user.actions';\n\nconst Home = async ({ searchParams: { id, page } }: SearchParamProps) => {\n  const currentPage = Number(page as string) || 1;\n  const loggedIn = await getLoggedInUser();\n  const accounts = await getAccounts({ \n    userId: loggedIn.$id \n  })\n\n  if(!accounts) return;\n  \n  const accountsData = accounts?.data;\n  const appwriteItemId = (id as string) || accountsData[0]?.appwriteItemId;\n\n  const account = await getAccount({ appwriteItemId })\n\n  return (\n    <section className=\"home\">\n      <div className=\"home-content\">\n        <header className=\"home-header\">\n          <HeaderBox \n            type=\"greeting\"\n            title=\"Welcome\"\n            user={loggedIn?.firstName || 'Guest'}\n            subtext=\"Access and manage your account and transactions efficiently.\"\n          />\n\n          <TotalBalanceBox \n            accounts={accountsData}\n            totalBanks={accounts?.totalBanks}\n            totalCurrentBalance={accounts?.totalCurrentBalance}\n          />\n        </header>\n\n        <RecentTransactions \n          accounts={accountsData}\n          transactions={account?.transactions}\n          appwriteItemId={appwriteItemId}\n          page={currentPage}\n        />\n      </div>\n\n      <RightSidebar \n        user={loggedIn}\n        transactions={account?.transactions}\n        banks={accountsData?.slice(0, 2)}\n      />\n    </section>\n  )\n}\n\nexport default Home","import { _nullishCoalesce, _optionalChain } from '@sentry/utils';\nimport * as Sentry from '@sentry/nextjs';\nimport { requestAsyncStorage } from 'next/dist/client/components/request-async-storage.external.js';\nimport * as serverComponentModule from '__SENTRY_WRAPPING_TARGET_FILE__.cjs';\nexport * from '__SENTRY_WRAPPING_TARGET_FILE__.cjs';\n\nconst serverComponent = serverComponentModule.default;\n\nlet wrappedServerComponent;\nif (typeof serverComponent === 'function') {\n  // For some odd Next.js magic reason, `headers()` will not work if used inside `wrapServerComponentsWithSentry`.\n  // Current assumption is that Next.js applies some loader magic to userfiles, but not files in node_modules. This file\n  // is technically a userfile so it gets the loader magic applied.\n  wrappedServerComponent = new Proxy(serverComponent, {\n    apply: (originalFunction, thisArg, args) => {\n      let sentryTraceHeader = undefined;\n      let baggageHeader = undefined;\n      let headers = undefined;\n\n      // We try-catch here just in `requestAsyncStorage` is undefined since it may not be defined\n      try {\n        const requestAsyncStore = requestAsyncStorage.getStore();\n        sentryTraceHeader = _nullishCoalesce(_optionalChain([requestAsyncStore, 'optionalAccess', _ => _.headers, 'access', _2 => _2.get, 'call', _3 => _3('sentry-trace')]), () => ( undefined));\n        baggageHeader = _nullishCoalesce(_optionalChain([requestAsyncStore, 'optionalAccess', _4 => _4.headers, 'access', _5 => _5.get, 'call', _6 => _6('baggage')]), () => ( undefined));\n        headers = _optionalChain([requestAsyncStore, 'optionalAccess', _7 => _7.headers]);\n      } catch (e) {\n        /** empty */\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access\n      return Sentry.wrapServerComponentWithSentry(originalFunction , {\n        componentRoute: '/(root)',\n        componentType: 'Page',\n        sentryTraceHeader,\n        baggageHeader,\n        headers,\n      }).apply(thisArg, args);\n    },\n  });\n} else {\n  wrappedServerComponent = serverComponent;\n}\n\nconst generateMetadata = serverComponentModule.generateMetadata\n  ? Sentry.wrapGenerationFunctionWithSentry(serverComponentModule.generateMetadata, {\n      componentRoute: '/(root)',\n      componentType: 'Page',\n      generationFunctionIdentifier: 'generateMetadata',\n      requestAsyncStorage,\n    })\n  : undefined;\n\nconst generateImageMetadata = serverComponentModule.generateImageMetadata\n  ? Sentry.wrapGenerationFunctionWithSentry(serverComponentModule.generateImageMetadata, {\n      componentRoute: '/(root)',\n      componentType: 'Page',\n      generationFunctionIdentifier: 'generateImageMetadata',\n      requestAsyncStorage,\n    })\n  : undefined;\n\nconst generateViewport = serverComponentModule.generateViewport\n  ? Sentry.wrapGenerationFunctionWithSentry(serverComponentModule.generateViewport, {\n      componentRoute: '/(root)',\n      componentType: 'Page',\n      generationFunctionIdentifier: 'generateViewport',\n      requestAsyncStorage,\n    })\n  : undefined;\n\nconst wrappedServerComponent$1 = wrappedServerComponent;\n\nexport { wrappedServerComponent$1 as default, generateImageMetadata, generateMetadata, generateViewport };\n","import \"/Users/prathambarvalta/Desktop/horizon/app/(root)/page.tsx\";\nimport \"/Users/prathambarvalta/Desktop/horizon/app/(root)/layout.tsx\";\nimport \"next/dist/client/components/not-found-error\";\nimport \"/Users/prathambarvalta/Desktop/horizon/app/layout.tsx\";\nimport \"next/dist/client/components/not-found-error\";\"TURBOPACK { transition: next-ssr }\";\nimport { AppPageRouteModule } from \"next/dist/server/future/route-modules/app-page/module.compiled\";\nimport { RouteKind } from \"next/dist/server/future/route-kind\";\n// We inject the tree and pages here so that we can use them in the route\n// module.\nconst tree = {\n        children: [\n        '',\n        {\n        children: [\n        '(root)',\n        {\n        children: ['__PAGE__', {}, {\n          page: [() => import(/* webpackMode: \"eager\" */ \"/Users/prathambarvalta/Desktop/horizon/app/(root)/page.tsx\"), \"/Users/prathambarvalta/Desktop/horizon/app/(root)/page.tsx\"],\n          \n        }]\n      },\n        {\n        'layout': [() => import(/* webpackMode: \"eager\" */ \"/Users/prathambarvalta/Desktop/horizon/app/(root)/layout.tsx\"), \"/Users/prathambarvalta/Desktop/horizon/app/(root)/layout.tsx\"],\n'not-found': [() => import(/* webpackMode: \"eager\" */ \"next/dist/client/components/not-found-error\"), \"next/dist/client/components/not-found-error\"],\n        \n      }\n      ]\n      },\n        {\n        'layout': [() => import(/* webpackMode: \"eager\" */ \"/Users/prathambarvalta/Desktop/horizon/app/layout.tsx\"), \"/Users/prathambarvalta/Desktop/horizon/app/layout.tsx\"],\n'not-found': [() => import(/* webpackMode: \"eager\" */ \"next/dist/client/components/not-found-error\"), \"next/dist/client/components/not-found-error\"],\n        \n      }\n      ]\n      }.children;\nconst pages = [\"/Users/prathambarvalta/Desktop/horizon/app/(root)/page.tsx\"];\nexport { tree, pages };\nexport { default as GlobalError } from \"/Users/prathambarvalta/Desktop/horizon/app/global-error.jsx\";\nconst __next_app_require__ = __webpack_require__\nconst __next_app_load_chunk__ = () => Promise.resolve()\nexport const originalPathname = \"/(root)/page\";\nexport const __next_app__ = {\n    require: __next_app_require__,\n    loadChunk: __next_app_load_chunk__\n};\nexport * from \"next/dist/server/app-render/entry-base\";\n// Create and export the route module that will be consumed.\nexport const routeModule = new AppPageRouteModule({\n    definition: {\n        kind: RouteKind.APP_PAGE,\n        page: \"/(root)/page\",\n        pathname: \"/\",\n        // The following aren't used in production.\n        bundlePath: \"\",\n        filename: \"\",\n        appPaths: []\n    },\n    userland: {\n        loaderTree: tree\n    }\n});\n\n//# sourceMappingURL=app-page.js.map","import(/* webpackMode: \"eager\", webpackExports: [\"default\"] */ \"/Users/prathambarvalta/Desktop/horizon/components/AnimatedCounter.tsx\");\n;\nimport(/* webpackMode: \"eager\", webpackExports: [\"default\"] */ \"/Users/prathambarvalta/Desktop/horizon/components/BankInfo.tsx\");\n;\nimport(/* webpackMode: \"eager\", webpackExports: [\"BankTabItem\"] */ \"/Users/prathambarvalta/Desktop/horizon/components/BankTabItem.tsx\");\n;\nimport(/* webpackMode: \"eager\", webpackExports: [\"default\"] */ \"/Users/prathambarvalta/Desktop/horizon/components/Copy.tsx\");\n;\nimport(/* webpackMode: \"eager\", webpackExports: [\"default\"] */ \"/Users/prathambarvalta/Desktop/horizon/components/DoughnutChart.tsx\");\n;\nimport(/* webpackMode: \"eager\", webpackExports: [\"Pagination\"] */ \"/Users/prathambarvalta/Desktop/horizon/components/Pagination.tsx\");\n;\nimport(/* webpackMode: \"eager\", webpackExports: [\"Progress\"] */ \"/Users/prathambarvalta/Desktop/horizon/components/ui/progress.tsx\");\n;\nimport(/* webpackMode: \"eager\", webpackExports: [\"Tabs\",\"TabsList\",\"TabsTrigger\",\"TabsContent\"] */ \"/Users/prathambarvalta/Desktop/horizon/components/ui/tabs.tsx\");\n;\nimport(/* webpackMode: \"eager\" */ \"/Users/prathambarvalta/Desktop/horizon/node_modules/next/dist/client/image-component.js\");\n;\nimport(/* webpackMode: \"eager\" */ \"/Users/prathambarvalta/Desktop/horizon/node_modules/next/dist/client/link.js\");\n","'use client';\n\nimport CountUp from 'react-countup';\n\nconst AnimatedCounter = ({ amount }: { amount: number }) => {\n  return (\n    <div className=\"w-full\">\n      <CountUp \n        decimals={2}\n        decimal=\",\"\n        prefix=\"$\"\n        end={amount} \n      />\n    </div>\n  )\n}\n\nexport default AnimatedCounter","\"use client\";\n\nimport Image from \"next/image\";\nimport { useSearchParams, useRouter } from \"next/navigation\";\n\nimport {\n  cn,\n  formUrlQuery,\n  formatAmount,\n  getAccountTypeColors,\n} from \"@/lib/utils\";\n\nconst BankInfo = ({ account, appwriteItemId, type }: BankInfoProps) => {\n  const router = useRouter();\n  const searchParams = useSearchParams();\n\n  const isActive = appwriteItemId === account?.appwriteItemId;\n\n  const handleBankChange = () => {\n    const newUrl = formUrlQuery({\n      params: searchParams.toString(),\n      key: \"id\",\n      value: account?.appwriteItemId,\n    });\n    router.push(newUrl, { scroll: false });\n  };\n\n  const colors = getAccountTypeColors(account?.type as AccountTypes);\n\n  return (\n    <div\n      onClick={handleBankChange}\n      className={cn(`bank-info ${colors.bg}`, {\n        \"shadow-sm border-blue-700\": type === \"card\" && isActive,\n        \"rounded-xl\": type === \"card\",\n        \"hover:shadow-sm cursor-pointer\": type === \"card\",\n      })}\n    >\n      <figure\n        className={`flex-center h-fit rounded-full bg-blue-100 ${colors.lightBg}`}\n      >\n        <Image\n          src=\"/icons/connect-bank.svg\"\n          width={20}\n          height={20}\n          alt={account.subtype}\n          className=\"m-2 min-w-5\"\n        />\n      </figure>\n      <div className=\"flex w-full flex-1 flex-col justify-center gap-1\">\n        <div className=\"bank-info_content\">\n          <h2\n            className={`text-16 line-clamp-1 flex-1 font-bold text-blue-900 ${colors.title}`}\n          >\n            {account.name}\n          </h2>\n          {type === \"full\" && (\n            <p\n              className={`text-12 rounded-full px-3 py-1 font-medium text-blue-700 ${colors.subText} ${colors.lightBg}`}\n            >\n              {account.subtype}\n            </p>\n          )}\n        </div>\n\n        <p className={`text-16 font-medium text-blue-700 ${colors.subText}`}>\n          {formatAmount(account.currentBalance)}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default BankInfo;\n","\"use client\";\n\nimport { useSearchParams, useRouter } from \"next/navigation\";\n\nimport { cn, formUrlQuery } from \"@/lib/utils\";\n\nexport const BankTabItem = ({ account, appwriteItemId }: BankTabItemProps) => {\n  const searchParams = useSearchParams();\n  const router = useRouter();\n  const isActive = appwriteItemId === account?.appwriteItemId;\n\n  const handleBankChange = () => {\n    const newUrl = formUrlQuery({\n      params: searchParams.toString(),\n      key: \"id\",\n      value: account?.appwriteItemId,\n    });\n    router.push(newUrl, { scroll: false });\n  };\n\n  return (\n    <div\n      onClick={handleBankChange}\n      className={cn(`banktab-item`, {\n        \" border-blue-600\": isActive,\n      })}\n    >\n      <p\n        className={cn(`text-16 line-clamp-1 flex-1 font-medium text-gray-500`, {\n          \" text-blue-600\": isActive,\n        })}\n      >\n        {account.name}\n      </p>\n    </div>\n  );\n};\n","\"use client\";\nimport { useState } from \"react\";\n\nimport { Button } from \"./ui/button\";\n\nconst Copy = ({ title }: { title: string }) => {\n  const [hasCopied, setHasCopied] = useState(false);\n\n  const copyToClipboard = () => {\n    navigator.clipboard.writeText(title);\n    setHasCopied(true);\n\n    setTimeout(() => {\n      setHasCopied(false);\n    }, 2000);\n  };\n\n  return (\n    <Button\n      data-state=\"closed\"\n      className=\"mt-3 flex max-w-[320px] gap-4\"\n      variant=\"secondary\"\n      onClick={copyToClipboard}\n    >\n      <p className=\"line-clamp-1 w-full max-w-full text-xs font-medium text-black-2\">\n        {title} test\n      </p>\n\n      {!hasCopied ? (\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width=\"24\"\n          height=\"24\"\n          viewBox=\"0 0 24 24\"\n          fill=\"none\"\n          stroke=\"currentColor\"\n          stroke-width=\"2\"\n          stroke-linecap=\"round\"\n          stroke-linejoin=\"round\"\n          className=\"mr-2 size-4\"\n        >\n          <rect width=\"14\" height=\"14\" x=\"8\" y=\"8\" rx=\"2\" ry=\"2\"></rect>\n          <path d=\"M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2\"></path>\n        </svg>\n      ) : (\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width=\"24\"\n          height=\"24\"\n          viewBox=\"0 0 24 24\"\n          fill=\"none\"\n          stroke=\"currentColor\"\n          stroke-width=\"2\"\n          stroke-linecap=\"round\"\n          stroke-linejoin=\"round\"\n          className=\"mr-2 size-4\"\n        >\n          <polyline points=\"20 6 9 17 4 12\"></polyline>\n        </svg>\n      )}\n    </Button>\n  );\n};\n\nexport default Copy;\n","/*!\n * @kurkle/color v0.3.2\n * https://github.com/kurkle/color#readme\n * (c) 2023 Jukka Kurkela\n * Released under the MIT License\n */\nfunction round(v) {\n  return v + 0.5 | 0;\n}\nconst lim = (v, l, h) => Math.max(Math.min(v, h), l);\nfunction p2b(v) {\n  return lim(round(v * 2.55), 0, 255);\n}\nfunction b2p(v) {\n  return lim(round(v / 2.55), 0, 100);\n}\nfunction n2b(v) {\n  return lim(round(v * 255), 0, 255);\n}\nfunction b2n(v) {\n  return lim(round(v / 2.55) / 100, 0, 1);\n}\nfunction n2p(v) {\n  return lim(round(v * 100), 0, 100);\n}\n\nconst map$1 = {0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, A: 10, B: 11, C: 12, D: 13, E: 14, F: 15, a: 10, b: 11, c: 12, d: 13, e: 14, f: 15};\nconst hex = [...'0123456789ABCDEF'];\nconst h1 = b => hex[b & 0xF];\nconst h2 = b => hex[(b & 0xF0) >> 4] + hex[b & 0xF];\nconst eq = b => ((b & 0xF0) >> 4) === (b & 0xF);\nconst isShort = v => eq(v.r) && eq(v.g) && eq(v.b) && eq(v.a);\nfunction hexParse(str) {\n  var len = str.length;\n  var ret;\n  if (str[0] === '#') {\n    if (len === 4 || len === 5) {\n      ret = {\n        r: 255 & map$1[str[1]] * 17,\n        g: 255 & map$1[str[2]] * 17,\n        b: 255 & map$1[str[3]] * 17,\n        a: len === 5 ? map$1[str[4]] * 17 : 255\n      };\n    } else if (len === 7 || len === 9) {\n      ret = {\n        r: map$1[str[1]] << 4 | map$1[str[2]],\n        g: map$1[str[3]] << 4 | map$1[str[4]],\n        b: map$1[str[5]] << 4 | map$1[str[6]],\n        a: len === 9 ? (map$1[str[7]] << 4 | map$1[str[8]]) : 255\n      };\n    }\n  }\n  return ret;\n}\nconst alpha = (a, f) => a < 255 ? f(a) : '';\nfunction hexString(v) {\n  var f = isShort(v) ? h1 : h2;\n  return v\n    ? '#' + f(v.r) + f(v.g) + f(v.b) + alpha(v.a, f)\n    : undefined;\n}\n\nconst HUE_RE = /^(hsla?|hwb|hsv)\\(\\s*([-+.e\\d]+)(?:deg)?[\\s,]+([-+.e\\d]+)%[\\s,]+([-+.e\\d]+)%(?:[\\s,]+([-+.e\\d]+)(%)?)?\\s*\\)$/;\nfunction hsl2rgbn(h, s, l) {\n  const a = s * Math.min(l, 1 - l);\n  const f = (n, k = (n + h / 30) % 12) => l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n  return [f(0), f(8), f(4)];\n}\nfunction hsv2rgbn(h, s, v) {\n  const f = (n, k = (n + h / 60) % 6) => v - v * s * Math.max(Math.min(k, 4 - k, 1), 0);\n  return [f(5), f(3), f(1)];\n}\nfunction hwb2rgbn(h, w, b) {\n  const rgb = hsl2rgbn(h, 1, 0.5);\n  let i;\n  if (w + b > 1) {\n    i = 1 / (w + b);\n    w *= i;\n    b *= i;\n  }\n  for (i = 0; i < 3; i++) {\n    rgb[i] *= 1 - w - b;\n    rgb[i] += w;\n  }\n  return rgb;\n}\nfunction hueValue(r, g, b, d, max) {\n  if (r === max) {\n    return ((g - b) / d) + (g < b ? 6 : 0);\n  }\n  if (g === max) {\n    return (b - r) / d + 2;\n  }\n  return (r - g) / d + 4;\n}\nfunction rgb2hsl(v) {\n  const range = 255;\n  const r = v.r / range;\n  const g = v.g / range;\n  const b = v.b / range;\n  const max = Math.max(r, g, b);\n  const min = Math.min(r, g, b);\n  const l = (max + min) / 2;\n  let h, s, d;\n  if (max !== min) {\n    d = max - min;\n    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n    h = hueValue(r, g, b, d, max);\n    h = h * 60 + 0.5;\n  }\n  return [h | 0, s || 0, l];\n}\nfunction calln(f, a, b, c) {\n  return (\n    Array.isArray(a)\n      ? f(a[0], a[1], a[2])\n      : f(a, b, c)\n  ).map(n2b);\n}\nfunction hsl2rgb(h, s, l) {\n  return calln(hsl2rgbn, h, s, l);\n}\nfunction hwb2rgb(h, w, b) {\n  return calln(hwb2rgbn, h, w, b);\n}\nfunction hsv2rgb(h, s, v) {\n  return calln(hsv2rgbn, h, s, v);\n}\nfunction hue(h) {\n  return (h % 360 + 360) % 360;\n}\nfunction hueParse(str) {\n  const m = HUE_RE.exec(str);\n  let a = 255;\n  let v;\n  if (!m) {\n    return;\n  }\n  if (m[5] !== v) {\n    a = m[6] ? p2b(+m[5]) : n2b(+m[5]);\n  }\n  const h = hue(+m[2]);\n  const p1 = +m[3] / 100;\n  const p2 = +m[4] / 100;\n  if (m[1] === 'hwb') {\n    v = hwb2rgb(h, p1, p2);\n  } else if (m[1] === 'hsv') {\n    v = hsv2rgb(h, p1, p2);\n  } else {\n    v = hsl2rgb(h, p1, p2);\n  }\n  return {\n    r: v[0],\n    g: v[1],\n    b: v[2],\n    a: a\n  };\n}\nfunction rotate(v, deg) {\n  var h = rgb2hsl(v);\n  h[0] = hue(h[0] + deg);\n  h = hsl2rgb(h);\n  v.r = h[0];\n  v.g = h[1];\n  v.b = h[2];\n}\nfunction hslString(v) {\n  if (!v) {\n    return;\n  }\n  const a = rgb2hsl(v);\n  const h = a[0];\n  const s = n2p(a[1]);\n  const l = n2p(a[2]);\n  return v.a < 255\n    ? `hsla(${h}, ${s}%, ${l}%, ${b2n(v.a)})`\n    : `hsl(${h}, ${s}%, ${l}%)`;\n}\n\nconst map = {\n  x: 'dark',\n  Z: 'light',\n  Y: 're',\n  X: 'blu',\n  W: 'gr',\n  V: 'medium',\n  U: 'slate',\n  A: 'ee',\n  T: 'ol',\n  S: 'or',\n  B: 'ra',\n  C: 'lateg',\n  D: 'ights',\n  R: 'in',\n  Q: 'turquois',\n  E: 'hi',\n  P: 'ro',\n  O: 'al',\n  N: 'le',\n  M: 'de',\n  L: 'yello',\n  F: 'en',\n  K: 'ch',\n  G: 'arks',\n  H: 'ea',\n  I: 'ightg',\n  J: 'wh'\n};\nconst names$1 = {\n  OiceXe: 'f0f8ff',\n  antiquewEte: 'faebd7',\n  aqua: 'ffff',\n  aquamarRe: '7fffd4',\n  azuY: 'f0ffff',\n  beige: 'f5f5dc',\n  bisque: 'ffe4c4',\n  black: '0',\n  blanKedOmond: 'ffebcd',\n  Xe: 'ff',\n  XeviTet: '8a2be2',\n  bPwn: 'a52a2a',\n  burlywood: 'deb887',\n  caMtXe: '5f9ea0',\n  KartYuse: '7fff00',\n  KocTate: 'd2691e',\n  cSO: 'ff7f50',\n  cSnflowerXe: '6495ed',\n  cSnsilk: 'fff8dc',\n  crimson: 'dc143c',\n  cyan: 'ffff',\n  xXe: '8b',\n  xcyan: '8b8b',\n  xgTMnPd: 'b8860b',\n  xWay: 'a9a9a9',\n  xgYF: '6400',\n  xgYy: 'a9a9a9',\n  xkhaki: 'bdb76b',\n  xmagFta: '8b008b',\n  xTivegYF: '556b2f',\n  xSange: 'ff8c00',\n  xScEd: '9932cc',\n  xYd: '8b0000',\n  xsOmon: 'e9967a',\n  xsHgYF: '8fbc8f',\n  xUXe: '483d8b',\n  xUWay: '2f4f4f',\n  xUgYy: '2f4f4f',\n  xQe: 'ced1',\n  xviTet: '9400d3',\n  dAppRk: 'ff1493',\n  dApskyXe: 'bfff',\n  dimWay: '696969',\n  dimgYy: '696969',\n  dodgerXe: '1e90ff',\n  fiYbrick: 'b22222',\n  flSOwEte: 'fffaf0',\n  foYstWAn: '228b22',\n  fuKsia: 'ff00ff',\n  gaRsbSo: 'dcdcdc',\n  ghostwEte: 'f8f8ff',\n  gTd: 'ffd700',\n  gTMnPd: 'daa520',\n  Way: '808080',\n  gYF: '8000',\n  gYFLw: 'adff2f',\n  gYy: '808080',\n  honeyMw: 'f0fff0',\n  hotpRk: 'ff69b4',\n  RdianYd: 'cd5c5c',\n  Rdigo: '4b0082',\n  ivSy: 'fffff0',\n  khaki: 'f0e68c',\n  lavFMr: 'e6e6fa',\n  lavFMrXsh: 'fff0f5',\n  lawngYF: '7cfc00',\n  NmoncEffon: 'fffacd',\n  ZXe: 'add8e6',\n  ZcSO: 'f08080',\n  Zcyan: 'e0ffff',\n  ZgTMnPdLw: 'fafad2',\n  ZWay: 'd3d3d3',\n  ZgYF: '90ee90',\n  ZgYy: 'd3d3d3',\n  ZpRk: 'ffb6c1',\n  ZsOmon: 'ffa07a',\n  ZsHgYF: '20b2aa',\n  ZskyXe: '87cefa',\n  ZUWay: '778899',\n  ZUgYy: '778899',\n  ZstAlXe: 'b0c4de',\n  ZLw: 'ffffe0',\n  lime: 'ff00',\n  limegYF: '32cd32',\n  lRF: 'faf0e6',\n  magFta: 'ff00ff',\n  maPon: '800000',\n  VaquamarRe: '66cdaa',\n  VXe: 'cd',\n  VScEd: 'ba55d3',\n  VpurpN: '9370db',\n  VsHgYF: '3cb371',\n  VUXe: '7b68ee',\n  VsprRggYF: 'fa9a',\n  VQe: '48d1cc',\n  VviTetYd: 'c71585',\n  midnightXe: '191970',\n  mRtcYam: 'f5fffa',\n  mistyPse: 'ffe4e1',\n  moccasR: 'ffe4b5',\n  navajowEte: 'ffdead',\n  navy: '80',\n  Tdlace: 'fdf5e6',\n  Tive: '808000',\n  TivedBb: '6b8e23',\n  Sange: 'ffa500',\n  SangeYd: 'ff4500',\n  ScEd: 'da70d6',\n  pOegTMnPd: 'eee8aa',\n  pOegYF: '98fb98',\n  pOeQe: 'afeeee',\n  pOeviTetYd: 'db7093',\n  papayawEp: 'ffefd5',\n  pHKpuff: 'ffdab9',\n  peru: 'cd853f',\n  pRk: 'ffc0cb',\n  plum: 'dda0dd',\n  powMrXe: 'b0e0e6',\n  purpN: '800080',\n  YbeccapurpN: '663399',\n  Yd: 'ff0000',\n  Psybrown: 'bc8f8f',\n  PyOXe: '4169e1',\n  saddNbPwn: '8b4513',\n  sOmon: 'fa8072',\n  sandybPwn: 'f4a460',\n  sHgYF: '2e8b57',\n  sHshell: 'fff5ee',\n  siFna: 'a0522d',\n  silver: 'c0c0c0',\n  skyXe: '87ceeb',\n  UXe: '6a5acd',\n  UWay: '708090',\n  UgYy: '708090',\n  snow: 'fffafa',\n  sprRggYF: 'ff7f',\n  stAlXe: '4682b4',\n  tan: 'd2b48c',\n  teO: '8080',\n  tEstN: 'd8bfd8',\n  tomato: 'ff6347',\n  Qe: '40e0d0',\n  viTet: 'ee82ee',\n  JHt: 'f5deb3',\n  wEte: 'ffffff',\n  wEtesmoke: 'f5f5f5',\n  Lw: 'ffff00',\n  LwgYF: '9acd32'\n};\nfunction unpack() {\n  const unpacked = {};\n  const keys = Object.keys(names$1);\n  const tkeys = Object.keys(map);\n  let i, j, k, ok, nk;\n  for (i = 0; i < keys.length; i++) {\n    ok = nk = keys[i];\n    for (j = 0; j < tkeys.length; j++) {\n      k = tkeys[j];\n      nk = nk.replace(k, map[k]);\n    }\n    k = parseInt(names$1[ok], 16);\n    unpacked[nk] = [k >> 16 & 0xFF, k >> 8 & 0xFF, k & 0xFF];\n  }\n  return unpacked;\n}\n\nlet names;\nfunction nameParse(str) {\n  if (!names) {\n    names = unpack();\n    names.transparent = [0, 0, 0, 0];\n  }\n  const a = names[str.toLowerCase()];\n  return a && {\n    r: a[0],\n    g: a[1],\n    b: a[2],\n    a: a.length === 4 ? a[3] : 255\n  };\n}\n\nconst RGB_RE = /^rgba?\\(\\s*([-+.\\d]+)(%)?[\\s,]+([-+.e\\d]+)(%)?[\\s,]+([-+.e\\d]+)(%)?(?:[\\s,/]+([-+.e\\d]+)(%)?)?\\s*\\)$/;\nfunction rgbParse(str) {\n  const m = RGB_RE.exec(str);\n  let a = 255;\n  let r, g, b;\n  if (!m) {\n    return;\n  }\n  if (m[7] !== r) {\n    const v = +m[7];\n    a = m[8] ? p2b(v) : lim(v * 255, 0, 255);\n  }\n  r = +m[1];\n  g = +m[3];\n  b = +m[5];\n  r = 255 & (m[2] ? p2b(r) : lim(r, 0, 255));\n  g = 255 & (m[4] ? p2b(g) : lim(g, 0, 255));\n  b = 255 & (m[6] ? p2b(b) : lim(b, 0, 255));\n  return {\n    r: r,\n    g: g,\n    b: b,\n    a: a\n  };\n}\nfunction rgbString(v) {\n  return v && (\n    v.a < 255\n      ? `rgba(${v.r}, ${v.g}, ${v.b}, ${b2n(v.a)})`\n      : `rgb(${v.r}, ${v.g}, ${v.b})`\n  );\n}\n\nconst to = v => v <= 0.0031308 ? v * 12.92 : Math.pow(v, 1.0 / 2.4) * 1.055 - 0.055;\nconst from = v => v <= 0.04045 ? v / 12.92 : Math.pow((v + 0.055) / 1.055, 2.4);\nfunction interpolate(rgb1, rgb2, t) {\n  const r = from(b2n(rgb1.r));\n  const g = from(b2n(rgb1.g));\n  const b = from(b2n(rgb1.b));\n  return {\n    r: n2b(to(r + t * (from(b2n(rgb2.r)) - r))),\n    g: n2b(to(g + t * (from(b2n(rgb2.g)) - g))),\n    b: n2b(to(b + t * (from(b2n(rgb2.b)) - b))),\n    a: rgb1.a + t * (rgb2.a - rgb1.a)\n  };\n}\n\nfunction modHSL(v, i, ratio) {\n  if (v) {\n    let tmp = rgb2hsl(v);\n    tmp[i] = Math.max(0, Math.min(tmp[i] + tmp[i] * ratio, i === 0 ? 360 : 1));\n    tmp = hsl2rgb(tmp);\n    v.r = tmp[0];\n    v.g = tmp[1];\n    v.b = tmp[2];\n  }\n}\nfunction clone(v, proto) {\n  return v ? Object.assign(proto || {}, v) : v;\n}\nfunction fromObject(input) {\n  var v = {r: 0, g: 0, b: 0, a: 255};\n  if (Array.isArray(input)) {\n    if (input.length >= 3) {\n      v = {r: input[0], g: input[1], b: input[2], a: 255};\n      if (input.length > 3) {\n        v.a = n2b(input[3]);\n      }\n    }\n  } else {\n    v = clone(input, {r: 0, g: 0, b: 0, a: 1});\n    v.a = n2b(v.a);\n  }\n  return v;\n}\nfunction functionParse(str) {\n  if (str.charAt(0) === 'r') {\n    return rgbParse(str);\n  }\n  return hueParse(str);\n}\nclass Color {\n  constructor(input) {\n    if (input instanceof Color) {\n      return input;\n    }\n    const type = typeof input;\n    let v;\n    if (type === 'object') {\n      v = fromObject(input);\n    } else if (type === 'string') {\n      v = hexParse(input) || nameParse(input) || functionParse(input);\n    }\n    this._rgb = v;\n    this._valid = !!v;\n  }\n  get valid() {\n    return this._valid;\n  }\n  get rgb() {\n    var v = clone(this._rgb);\n    if (v) {\n      v.a = b2n(v.a);\n    }\n    return v;\n  }\n  set rgb(obj) {\n    this._rgb = fromObject(obj);\n  }\n  rgbString() {\n    return this._valid ? rgbString(this._rgb) : undefined;\n  }\n  hexString() {\n    return this._valid ? hexString(this._rgb) : undefined;\n  }\n  hslString() {\n    return this._valid ? hslString(this._rgb) : undefined;\n  }\n  mix(color, weight) {\n    if (color) {\n      const c1 = this.rgb;\n      const c2 = color.rgb;\n      let w2;\n      const p = weight === w2 ? 0.5 : weight;\n      const w = 2 * p - 1;\n      const a = c1.a - c2.a;\n      const w1 = ((w * a === -1 ? w : (w + a) / (1 + w * a)) + 1) / 2.0;\n      w2 = 1 - w1;\n      c1.r = 0xFF & w1 * c1.r + w2 * c2.r + 0.5;\n      c1.g = 0xFF & w1 * c1.g + w2 * c2.g + 0.5;\n      c1.b = 0xFF & w1 * c1.b + w2 * c2.b + 0.5;\n      c1.a = p * c1.a + (1 - p) * c2.a;\n      this.rgb = c1;\n    }\n    return this;\n  }\n  interpolate(color, t) {\n    if (color) {\n      this._rgb = interpolate(this._rgb, color._rgb, t);\n    }\n    return this;\n  }\n  clone() {\n    return new Color(this.rgb);\n  }\n  alpha(a) {\n    this._rgb.a = n2b(a);\n    return this;\n  }\n  clearer(ratio) {\n    const rgb = this._rgb;\n    rgb.a *= 1 - ratio;\n    return this;\n  }\n  greyscale() {\n    const rgb = this._rgb;\n    const val = round(rgb.r * 0.3 + rgb.g * 0.59 + rgb.b * 0.11);\n    rgb.r = rgb.g = rgb.b = val;\n    return this;\n  }\n  opaquer(ratio) {\n    const rgb = this._rgb;\n    rgb.a *= 1 + ratio;\n    return this;\n  }\n  negate() {\n    const v = this._rgb;\n    v.r = 255 - v.r;\n    v.g = 255 - v.g;\n    v.b = 255 - v.b;\n    return this;\n  }\n  lighten(ratio) {\n    modHSL(this._rgb, 2, ratio);\n    return this;\n  }\n  darken(ratio) {\n    modHSL(this._rgb, 2, -ratio);\n    return this;\n  }\n  saturate(ratio) {\n    modHSL(this._rgb, 1, ratio);\n    return this;\n  }\n  desaturate(ratio) {\n    modHSL(this._rgb, 1, -ratio);\n    return this;\n  }\n  rotate(deg) {\n    rotate(this._rgb, deg);\n    return this;\n  }\n}\n\nfunction index_esm(input) {\n  return new Color(input);\n}\n\nexport { Color, b2n, b2p, index_esm as default, hexParse, hexString, hsl2rgb, hslString, hsv2rgb, hueParse, hwb2rgb, lim, n2b, n2p, nameParse, p2b, rgb2hsl, rgbParse, rgbString, rotate, round };\n","/*!\n * Chart.js v4.4.2\n * https://www.chartjs.org\n * (c) 2024 Chart.js Contributors\n * Released under the MIT License\n */\nimport { Color } from '@kurkle/color';\n\n/**\n * @namespace Chart.helpers\n */ /**\n * An empty function that can be used, for example, for optional callback.\n */ function noop() {\n/* noop */ }\n/**\n * Returns a unique id, sequentially generated from a global variable.\n */ const uid = (()=>{\n    let id = 0;\n    return ()=>id++;\n})();\n/**\n * Returns true if `value` is neither null nor undefined, else returns false.\n * @param value - The value to test.\n * @since 2.7.0\n */ function isNullOrUndef(value) {\n    return value === null || typeof value === 'undefined';\n}\n/**\n * Returns true if `value` is an array (including typed arrays), else returns false.\n * @param value - The value to test.\n * @function\n */ function isArray(value) {\n    if (Array.isArray && Array.isArray(value)) {\n        return true;\n    }\n    const type = Object.prototype.toString.call(value);\n    if (type.slice(0, 7) === '[object' && type.slice(-6) === 'Array]') {\n        return true;\n    }\n    return false;\n}\n/**\n * Returns true if `value` is an object (excluding null), else returns false.\n * @param value - The value to test.\n * @since 2.7.0\n */ function isObject(value) {\n    return value !== null && Object.prototype.toString.call(value) === '[object Object]';\n}\n/**\n * Returns true if `value` is a finite number, else returns false\n * @param value  - The value to test.\n */ function isNumberFinite(value) {\n    return (typeof value === 'number' || value instanceof Number) && isFinite(+value);\n}\n/**\n * Returns `value` if finite, else returns `defaultValue`.\n * @param value - The value to return if defined.\n * @param defaultValue - The value to return if `value` is not finite.\n */ function finiteOrDefault(value, defaultValue) {\n    return isNumberFinite(value) ? value : defaultValue;\n}\n/**\n * Returns `value` if defined, else returns `defaultValue`.\n * @param value - The value to return if defined.\n * @param defaultValue - The value to return if `value` is undefined.\n */ function valueOrDefault(value, defaultValue) {\n    return typeof value === 'undefined' ? defaultValue : value;\n}\nconst toPercentage = (value, dimension)=>typeof value === 'string' && value.endsWith('%') ? parseFloat(value) / 100 : +value / dimension;\nconst toDimension = (value, dimension)=>typeof value === 'string' && value.endsWith('%') ? parseFloat(value) / 100 * dimension : +value;\n/**\n * Calls `fn` with the given `args` in the scope defined by `thisArg` and returns the\n * value returned by `fn`. If `fn` is not a function, this method returns undefined.\n * @param fn - The function to call.\n * @param args - The arguments with which `fn` should be called.\n * @param [thisArg] - The value of `this` provided for the call to `fn`.\n */ function callback(fn, args, thisArg) {\n    if (fn && typeof fn.call === 'function') {\n        return fn.apply(thisArg, args);\n    }\n}\nfunction each(loopable, fn, thisArg, reverse) {\n    let i, len, keys;\n    if (isArray(loopable)) {\n        len = loopable.length;\n        if (reverse) {\n            for(i = len - 1; i >= 0; i--){\n                fn.call(thisArg, loopable[i], i);\n            }\n        } else {\n            for(i = 0; i < len; i++){\n                fn.call(thisArg, loopable[i], i);\n            }\n        }\n    } else if (isObject(loopable)) {\n        keys = Object.keys(loopable);\n        len = keys.length;\n        for(i = 0; i < len; i++){\n            fn.call(thisArg, loopable[keys[i]], keys[i]);\n        }\n    }\n}\n/**\n * Returns true if the `a0` and `a1` arrays have the same content, else returns false.\n * @param a0 - The array to compare\n * @param a1 - The array to compare\n * @private\n */ function _elementsEqual(a0, a1) {\n    let i, ilen, v0, v1;\n    if (!a0 || !a1 || a0.length !== a1.length) {\n        return false;\n    }\n    for(i = 0, ilen = a0.length; i < ilen; ++i){\n        v0 = a0[i];\n        v1 = a1[i];\n        if (v0.datasetIndex !== v1.datasetIndex || v0.index !== v1.index) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Returns a deep copy of `source` without keeping references on objects and arrays.\n * @param source - The value to clone.\n */ function clone(source) {\n    if (isArray(source)) {\n        return source.map(clone);\n    }\n    if (isObject(source)) {\n        const target = Object.create(null);\n        const keys = Object.keys(source);\n        const klen = keys.length;\n        let k = 0;\n        for(; k < klen; ++k){\n            target[keys[k]] = clone(source[keys[k]]);\n        }\n        return target;\n    }\n    return source;\n}\nfunction isValidKey(key) {\n    return [\n        '__proto__',\n        'prototype',\n        'constructor'\n    ].indexOf(key) === -1;\n}\n/**\n * The default merger when Chart.helpers.merge is called without merger option.\n * Note(SB): also used by mergeConfig and mergeScaleConfig as fallback.\n * @private\n */ function _merger(key, target, source, options) {\n    if (!isValidKey(key)) {\n        return;\n    }\n    const tval = target[key];\n    const sval = source[key];\n    if (isObject(tval) && isObject(sval)) {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        merge(tval, sval, options);\n    } else {\n        target[key] = clone(sval);\n    }\n}\nfunction merge(target, source, options) {\n    const sources = isArray(source) ? source : [\n        source\n    ];\n    const ilen = sources.length;\n    if (!isObject(target)) {\n        return target;\n    }\n    options = options || {};\n    const merger = options.merger || _merger;\n    let current;\n    for(let i = 0; i < ilen; ++i){\n        current = sources[i];\n        if (!isObject(current)) {\n            continue;\n        }\n        const keys = Object.keys(current);\n        for(let k = 0, klen = keys.length; k < klen; ++k){\n            merger(keys[k], target, current, options);\n        }\n    }\n    return target;\n}\nfunction mergeIf(target, source) {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    return merge(target, source, {\n        merger: _mergerIf\n    });\n}\n/**\n * Merges source[key] in target[key] only if target[key] is undefined.\n * @private\n */ function _mergerIf(key, target, source) {\n    if (!isValidKey(key)) {\n        return;\n    }\n    const tval = target[key];\n    const sval = source[key];\n    if (isObject(tval) && isObject(sval)) {\n        mergeIf(tval, sval);\n    } else if (!Object.prototype.hasOwnProperty.call(target, key)) {\n        target[key] = clone(sval);\n    }\n}\n/**\n * @private\n */ function _deprecated(scope, value, previous, current) {\n    if (value !== undefined) {\n        console.warn(scope + ': \"' + previous + '\" is deprecated. Please use \"' + current + '\" instead');\n    }\n}\n// resolveObjectKey resolver cache\nconst keyResolvers = {\n    // Chart.helpers.core resolveObjectKey should resolve empty key to root object\n    '': (v)=>v,\n    // default resolvers\n    x: (o)=>o.x,\n    y: (o)=>o.y\n};\n/**\n * @private\n */ function _splitKey(key) {\n    const parts = key.split('.');\n    const keys = [];\n    let tmp = '';\n    for (const part of parts){\n        tmp += part;\n        if (tmp.endsWith('\\\\')) {\n            tmp = tmp.slice(0, -1) + '.';\n        } else {\n            keys.push(tmp);\n            tmp = '';\n        }\n    }\n    return keys;\n}\nfunction _getKeyResolver(key) {\n    const keys = _splitKey(key);\n    return (obj)=>{\n        for (const k of keys){\n            if (k === '') {\n                break;\n            }\n            obj = obj && obj[k];\n        }\n        return obj;\n    };\n}\nfunction resolveObjectKey(obj, key) {\n    const resolver = keyResolvers[key] || (keyResolvers[key] = _getKeyResolver(key));\n    return resolver(obj);\n}\n/**\n * @private\n */ function _capitalize(str) {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n}\nconst defined = (value)=>typeof value !== 'undefined';\nconst isFunction = (value)=>typeof value === 'function';\n// Adapted from https://stackoverflow.com/questions/31128855/comparing-ecma6-sets-for-equality#31129384\nconst setsEqual = (a, b)=>{\n    if (a.size !== b.size) {\n        return false;\n    }\n    for (const item of a){\n        if (!b.has(item)) {\n            return false;\n        }\n    }\n    return true;\n};\n/**\n * @param e - The event\n * @private\n */ function _isClickEvent(e) {\n    return e.type === 'mouseup' || e.type === 'click' || e.type === 'contextmenu';\n}\n\n/**\n * @alias Chart.helpers.math\n * @namespace\n */ const PI = Math.PI;\nconst TAU = 2 * PI;\nconst PITAU = TAU + PI;\nconst INFINITY = Number.POSITIVE_INFINITY;\nconst RAD_PER_DEG = PI / 180;\nconst HALF_PI = PI / 2;\nconst QUARTER_PI = PI / 4;\nconst TWO_THIRDS_PI = PI * 2 / 3;\nconst log10 = Math.log10;\nconst sign = Math.sign;\nfunction almostEquals(x, y, epsilon) {\n    return Math.abs(x - y) < epsilon;\n}\n/**\n * Implementation of the nice number algorithm used in determining where axis labels will go\n */ function niceNum(range) {\n    const roundedRange = Math.round(range);\n    range = almostEquals(range, roundedRange, range / 1000) ? roundedRange : range;\n    const niceRange = Math.pow(10, Math.floor(log10(range)));\n    const fraction = range / niceRange;\n    const niceFraction = fraction <= 1 ? 1 : fraction <= 2 ? 2 : fraction <= 5 ? 5 : 10;\n    return niceFraction * niceRange;\n}\n/**\n * Returns an array of factors sorted from 1 to sqrt(value)\n * @private\n */ function _factorize(value) {\n    const result = [];\n    const sqrt = Math.sqrt(value);\n    let i;\n    for(i = 1; i < sqrt; i++){\n        if (value % i === 0) {\n            result.push(i);\n            result.push(value / i);\n        }\n    }\n    if (sqrt === (sqrt | 0)) {\n        result.push(sqrt);\n    }\n    result.sort((a, b)=>a - b).pop();\n    return result;\n}\nfunction isNumber(n) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n}\nfunction almostWhole(x, epsilon) {\n    const rounded = Math.round(x);\n    return rounded - epsilon <= x && rounded + epsilon >= x;\n}\n/**\n * @private\n */ function _setMinAndMaxByKey(array, target, property) {\n    let i, ilen, value;\n    for(i = 0, ilen = array.length; i < ilen; i++){\n        value = array[i][property];\n        if (!isNaN(value)) {\n            target.min = Math.min(target.min, value);\n            target.max = Math.max(target.max, value);\n        }\n    }\n}\nfunction toRadians(degrees) {\n    return degrees * (PI / 180);\n}\nfunction toDegrees(radians) {\n    return radians * (180 / PI);\n}\n/**\n * Returns the number of decimal places\n * i.e. the number of digits after the decimal point, of the value of this Number.\n * @param x - A number.\n * @returns The number of decimal places.\n * @private\n */ function _decimalPlaces(x) {\n    if (!isNumberFinite(x)) {\n        return;\n    }\n    let e = 1;\n    let p = 0;\n    while(Math.round(x * e) / e !== x){\n        e *= 10;\n        p++;\n    }\n    return p;\n}\n// Gets the angle from vertical upright to the point about a centre.\nfunction getAngleFromPoint(centrePoint, anglePoint) {\n    const distanceFromXCenter = anglePoint.x - centrePoint.x;\n    const distanceFromYCenter = anglePoint.y - centrePoint.y;\n    const radialDistanceFromCenter = Math.sqrt(distanceFromXCenter * distanceFromXCenter + distanceFromYCenter * distanceFromYCenter);\n    let angle = Math.atan2(distanceFromYCenter, distanceFromXCenter);\n    if (angle < -0.5 * PI) {\n        angle += TAU; // make sure the returned angle is in the range of (-PI/2, 3PI/2]\n    }\n    return {\n        angle,\n        distance: radialDistanceFromCenter\n    };\n}\nfunction distanceBetweenPoints(pt1, pt2) {\n    return Math.sqrt(Math.pow(pt2.x - pt1.x, 2) + Math.pow(pt2.y - pt1.y, 2));\n}\n/**\n * Shortest distance between angles, in either direction.\n * @private\n */ function _angleDiff(a, b) {\n    return (a - b + PITAU) % TAU - PI;\n}\n/**\n * Normalize angle to be between 0 and 2*PI\n * @private\n */ function _normalizeAngle(a) {\n    return (a % TAU + TAU) % TAU;\n}\n/**\n * @private\n */ function _angleBetween(angle, start, end, sameAngleIsFullCircle) {\n    const a = _normalizeAngle(angle);\n    const s = _normalizeAngle(start);\n    const e = _normalizeAngle(end);\n    const angleToStart = _normalizeAngle(s - a);\n    const angleToEnd = _normalizeAngle(e - a);\n    const startToAngle = _normalizeAngle(a - s);\n    const endToAngle = _normalizeAngle(a - e);\n    return a === s || a === e || sameAngleIsFullCircle && s === e || angleToStart > angleToEnd && startToAngle < endToAngle;\n}\n/**\n * Limit `value` between `min` and `max`\n * @param value\n * @param min\n * @param max\n * @private\n */ function _limitValue(value, min, max) {\n    return Math.max(min, Math.min(max, value));\n}\n/**\n * @param {number} value\n * @private\n */ function _int16Range(value) {\n    return _limitValue(value, -32768, 32767);\n}\n/**\n * @param value\n * @param start\n * @param end\n * @param [epsilon]\n * @private\n */ function _isBetween(value, start, end, epsilon = 1e-6) {\n    return value >= Math.min(start, end) - epsilon && value <= Math.max(start, end) + epsilon;\n}\n\nfunction _lookup(table, value, cmp) {\n    cmp = cmp || ((index)=>table[index] < value);\n    let hi = table.length - 1;\n    let lo = 0;\n    let mid;\n    while(hi - lo > 1){\n        mid = lo + hi >> 1;\n        if (cmp(mid)) {\n            lo = mid;\n        } else {\n            hi = mid;\n        }\n    }\n    return {\n        lo,\n        hi\n    };\n}\n/**\n * Binary search\n * @param table - the table search. must be sorted!\n * @param key - property name for the value in each entry\n * @param value - value to find\n * @param last - lookup last index\n * @private\n */ const _lookupByKey = (table, key, value, last)=>_lookup(table, value, last ? (index)=>{\n        const ti = table[index][key];\n        return ti < value || ti === value && table[index + 1][key] === value;\n    } : (index)=>table[index][key] < value);\n/**\n * Reverse binary search\n * @param table - the table search. must be sorted!\n * @param key - property name for the value in each entry\n * @param value - value to find\n * @private\n */ const _rlookupByKey = (table, key, value)=>_lookup(table, value, (index)=>table[index][key] >= value);\n/**\n * Return subset of `values` between `min` and `max` inclusive.\n * Values are assumed to be in sorted order.\n * @param values - sorted array of values\n * @param min - min value\n * @param max - max value\n */ function _filterBetween(values, min, max) {\n    let start = 0;\n    let end = values.length;\n    while(start < end && values[start] < min){\n        start++;\n    }\n    while(end > start && values[end - 1] > max){\n        end--;\n    }\n    return start > 0 || end < values.length ? values.slice(start, end) : values;\n}\nconst arrayEvents = [\n    'push',\n    'pop',\n    'shift',\n    'splice',\n    'unshift'\n];\nfunction listenArrayEvents(array, listener) {\n    if (array._chartjs) {\n        array._chartjs.listeners.push(listener);\n        return;\n    }\n    Object.defineProperty(array, '_chartjs', {\n        configurable: true,\n        enumerable: false,\n        value: {\n            listeners: [\n                listener\n            ]\n        }\n    });\n    arrayEvents.forEach((key)=>{\n        const method = '_onData' + _capitalize(key);\n        const base = array[key];\n        Object.defineProperty(array, key, {\n            configurable: true,\n            enumerable: false,\n            value (...args) {\n                const res = base.apply(this, args);\n                array._chartjs.listeners.forEach((object)=>{\n                    if (typeof object[method] === 'function') {\n                        object[method](...args);\n                    }\n                });\n                return res;\n            }\n        });\n    });\n}\nfunction unlistenArrayEvents(array, listener) {\n    const stub = array._chartjs;\n    if (!stub) {\n        return;\n    }\n    const listeners = stub.listeners;\n    const index = listeners.indexOf(listener);\n    if (index !== -1) {\n        listeners.splice(index, 1);\n    }\n    if (listeners.length > 0) {\n        return;\n    }\n    arrayEvents.forEach((key)=>{\n        delete array[key];\n    });\n    delete array._chartjs;\n}\n/**\n * @param items\n */ function _arrayUnique(items) {\n    const set = new Set(items);\n    if (set.size === items.length) {\n        return items;\n    }\n    return Array.from(set);\n}\n\nfunction fontString(pixelSize, fontStyle, fontFamily) {\n    return fontStyle + ' ' + pixelSize + 'px ' + fontFamily;\n}\n/**\n* Request animation polyfill\n*/ const requestAnimFrame = function() {\n    if (typeof window === 'undefined') {\n        return function(callback) {\n            return callback();\n        };\n    }\n    return window.requestAnimationFrame;\n}();\n/**\n * Throttles calling `fn` once per animation frame\n * Latest arguments are used on the actual call\n */ function throttled(fn, thisArg) {\n    let argsToUse = [];\n    let ticking = false;\n    return function(...args) {\n        // Save the args for use later\n        argsToUse = args;\n        if (!ticking) {\n            ticking = true;\n            requestAnimFrame.call(window, ()=>{\n                ticking = false;\n                fn.apply(thisArg, argsToUse);\n            });\n        }\n    };\n}\n/**\n * Debounces calling `fn` for `delay` ms\n */ function debounce(fn, delay) {\n    let timeout;\n    return function(...args) {\n        if (delay) {\n            clearTimeout(timeout);\n            timeout = setTimeout(fn, delay, args);\n        } else {\n            fn.apply(this, args);\n        }\n        return delay;\n    };\n}\n/**\n * Converts 'start' to 'left', 'end' to 'right' and others to 'center'\n * @private\n */ const _toLeftRightCenter = (align)=>align === 'start' ? 'left' : align === 'end' ? 'right' : 'center';\n/**\n * Returns `start`, `end` or `(start + end) / 2` depending on `align`. Defaults to `center`\n * @private\n */ const _alignStartEnd = (align, start, end)=>align === 'start' ? start : align === 'end' ? end : (start + end) / 2;\n/**\n * Returns `left`, `right` or `(left + right) / 2` depending on `align`. Defaults to `left`\n * @private\n */ const _textX = (align, left, right, rtl)=>{\n    const check = rtl ? 'left' : 'right';\n    return align === check ? right : align === 'center' ? (left + right) / 2 : left;\n};\n/**\n * Return start and count of visible points.\n * @private\n */ function _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled) {\n    const pointCount = points.length;\n    let start = 0;\n    let count = pointCount;\n    if (meta._sorted) {\n        const { iScale , _parsed  } = meta;\n        const axis = iScale.axis;\n        const { min , max , minDefined , maxDefined  } = iScale.getUserBounds();\n        if (minDefined) {\n            start = _limitValue(Math.min(// @ts-expect-error Need to type _parsed\n            _lookupByKey(_parsed, axis, min).lo, // @ts-expect-error Need to fix types on _lookupByKey\n            animationsDisabled ? pointCount : _lookupByKey(points, axis, iScale.getPixelForValue(min)).lo), 0, pointCount - 1);\n        }\n        if (maxDefined) {\n            count = _limitValue(Math.max(// @ts-expect-error Need to type _parsed\n            _lookupByKey(_parsed, iScale.axis, max, true).hi + 1, // @ts-expect-error Need to fix types on _lookupByKey\n            animationsDisabled ? 0 : _lookupByKey(points, axis, iScale.getPixelForValue(max), true).hi + 1), start, pointCount) - start;\n        } else {\n            count = pointCount - start;\n        }\n    }\n    return {\n        start,\n        count\n    };\n}\n/**\n * Checks if the scale ranges have changed.\n * @param {object} meta - dataset meta.\n * @returns {boolean}\n * @private\n */ function _scaleRangesChanged(meta) {\n    const { xScale , yScale , _scaleRanges  } = meta;\n    const newRanges = {\n        xmin: xScale.min,\n        xmax: xScale.max,\n        ymin: yScale.min,\n        ymax: yScale.max\n    };\n    if (!_scaleRanges) {\n        meta._scaleRanges = newRanges;\n        return true;\n    }\n    const changed = _scaleRanges.xmin !== xScale.min || _scaleRanges.xmax !== xScale.max || _scaleRanges.ymin !== yScale.min || _scaleRanges.ymax !== yScale.max;\n    Object.assign(_scaleRanges, newRanges);\n    return changed;\n}\n\nconst atEdge = (t)=>t === 0 || t === 1;\nconst elasticIn = (t, s, p)=>-(Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * TAU / p));\nconst elasticOut = (t, s, p)=>Math.pow(2, -10 * t) * Math.sin((t - s) * TAU / p) + 1;\n/**\n * Easing functions adapted from Robert Penner's easing equations.\n * @namespace Chart.helpers.easing.effects\n * @see http://www.robertpenner.com/easing/\n */ const effects = {\n    linear: (t)=>t,\n    easeInQuad: (t)=>t * t,\n    easeOutQuad: (t)=>-t * (t - 2),\n    easeInOutQuad: (t)=>(t /= 0.5) < 1 ? 0.5 * t * t : -0.5 * (--t * (t - 2) - 1),\n    easeInCubic: (t)=>t * t * t,\n    easeOutCubic: (t)=>(t -= 1) * t * t + 1,\n    easeInOutCubic: (t)=>(t /= 0.5) < 1 ? 0.5 * t * t * t : 0.5 * ((t -= 2) * t * t + 2),\n    easeInQuart: (t)=>t * t * t * t,\n    easeOutQuart: (t)=>-((t -= 1) * t * t * t - 1),\n    easeInOutQuart: (t)=>(t /= 0.5) < 1 ? 0.5 * t * t * t * t : -0.5 * ((t -= 2) * t * t * t - 2),\n    easeInQuint: (t)=>t * t * t * t * t,\n    easeOutQuint: (t)=>(t -= 1) * t * t * t * t + 1,\n    easeInOutQuint: (t)=>(t /= 0.5) < 1 ? 0.5 * t * t * t * t * t : 0.5 * ((t -= 2) * t * t * t * t + 2),\n    easeInSine: (t)=>-Math.cos(t * HALF_PI) + 1,\n    easeOutSine: (t)=>Math.sin(t * HALF_PI),\n    easeInOutSine: (t)=>-0.5 * (Math.cos(PI * t) - 1),\n    easeInExpo: (t)=>t === 0 ? 0 : Math.pow(2, 10 * (t - 1)),\n    easeOutExpo: (t)=>t === 1 ? 1 : -Math.pow(2, -10 * t) + 1,\n    easeInOutExpo: (t)=>atEdge(t) ? t : t < 0.5 ? 0.5 * Math.pow(2, 10 * (t * 2 - 1)) : 0.5 * (-Math.pow(2, -10 * (t * 2 - 1)) + 2),\n    easeInCirc: (t)=>t >= 1 ? t : -(Math.sqrt(1 - t * t) - 1),\n    easeOutCirc: (t)=>Math.sqrt(1 - (t -= 1) * t),\n    easeInOutCirc: (t)=>(t /= 0.5) < 1 ? -0.5 * (Math.sqrt(1 - t * t) - 1) : 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1),\n    easeInElastic: (t)=>atEdge(t) ? t : elasticIn(t, 0.075, 0.3),\n    easeOutElastic: (t)=>atEdge(t) ? t : elasticOut(t, 0.075, 0.3),\n    easeInOutElastic (t) {\n        const s = 0.1125;\n        const p = 0.45;\n        return atEdge(t) ? t : t < 0.5 ? 0.5 * elasticIn(t * 2, s, p) : 0.5 + 0.5 * elasticOut(t * 2 - 1, s, p);\n    },\n    easeInBack (t) {\n        const s = 1.70158;\n        return t * t * ((s + 1) * t - s);\n    },\n    easeOutBack (t) {\n        const s = 1.70158;\n        return (t -= 1) * t * ((s + 1) * t + s) + 1;\n    },\n    easeInOutBack (t) {\n        let s = 1.70158;\n        if ((t /= 0.5) < 1) {\n            return 0.5 * (t * t * (((s *= 1.525) + 1) * t - s));\n        }\n        return 0.5 * ((t -= 2) * t * (((s *= 1.525) + 1) * t + s) + 2);\n    },\n    easeInBounce: (t)=>1 - effects.easeOutBounce(1 - t),\n    easeOutBounce (t) {\n        const m = 7.5625;\n        const d = 2.75;\n        if (t < 1 / d) {\n            return m * t * t;\n        }\n        if (t < 2 / d) {\n            return m * (t -= 1.5 / d) * t + 0.75;\n        }\n        if (t < 2.5 / d) {\n            return m * (t -= 2.25 / d) * t + 0.9375;\n        }\n        return m * (t -= 2.625 / d) * t + 0.984375;\n    },\n    easeInOutBounce: (t)=>t < 0.5 ? effects.easeInBounce(t * 2) * 0.5 : effects.easeOutBounce(t * 2 - 1) * 0.5 + 0.5\n};\n\nfunction isPatternOrGradient(value) {\n    if (value && typeof value === 'object') {\n        const type = value.toString();\n        return type === '[object CanvasPattern]' || type === '[object CanvasGradient]';\n    }\n    return false;\n}\nfunction color(value) {\n    return isPatternOrGradient(value) ? value : new Color(value);\n}\nfunction getHoverColor(value) {\n    return isPatternOrGradient(value) ? value : new Color(value).saturate(0.5).darken(0.1).hexString();\n}\n\nconst numbers = [\n    'x',\n    'y',\n    'borderWidth',\n    'radius',\n    'tension'\n];\nconst colors = [\n    'color',\n    'borderColor',\n    'backgroundColor'\n];\nfunction applyAnimationsDefaults(defaults) {\n    defaults.set('animation', {\n        delay: undefined,\n        duration: 1000,\n        easing: 'easeOutQuart',\n        fn: undefined,\n        from: undefined,\n        loop: undefined,\n        to: undefined,\n        type: undefined\n    });\n    defaults.describe('animation', {\n        _fallback: false,\n        _indexable: false,\n        _scriptable: (name)=>name !== 'onProgress' && name !== 'onComplete' && name !== 'fn'\n    });\n    defaults.set('animations', {\n        colors: {\n            type: 'color',\n            properties: colors\n        },\n        numbers: {\n            type: 'number',\n            properties: numbers\n        }\n    });\n    defaults.describe('animations', {\n        _fallback: 'animation'\n    });\n    defaults.set('transitions', {\n        active: {\n            animation: {\n                duration: 400\n            }\n        },\n        resize: {\n            animation: {\n                duration: 0\n            }\n        },\n        show: {\n            animations: {\n                colors: {\n                    from: 'transparent'\n                },\n                visible: {\n                    type: 'boolean',\n                    duration: 0\n                }\n            }\n        },\n        hide: {\n            animations: {\n                colors: {\n                    to: 'transparent'\n                },\n                visible: {\n                    type: 'boolean',\n                    easing: 'linear',\n                    fn: (v)=>v | 0\n                }\n            }\n        }\n    });\n}\n\nfunction applyLayoutsDefaults(defaults) {\n    defaults.set('layout', {\n        autoPadding: true,\n        padding: {\n            top: 0,\n            right: 0,\n            bottom: 0,\n            left: 0\n        }\n    });\n}\n\nconst intlCache = new Map();\nfunction getNumberFormat(locale, options) {\n    options = options || {};\n    const cacheKey = locale + JSON.stringify(options);\n    let formatter = intlCache.get(cacheKey);\n    if (!formatter) {\n        formatter = new Intl.NumberFormat(locale, options);\n        intlCache.set(cacheKey, formatter);\n    }\n    return formatter;\n}\nfunction formatNumber(num, locale, options) {\n    return getNumberFormat(locale, options).format(num);\n}\n\nconst formatters = {\n values (value) {\n        return isArray(value) ?  value : '' + value;\n    },\n numeric (tickValue, index, ticks) {\n        if (tickValue === 0) {\n            return '0';\n        }\n        const locale = this.chart.options.locale;\n        let notation;\n        let delta = tickValue;\n        if (ticks.length > 1) {\n            const maxTick = Math.max(Math.abs(ticks[0].value), Math.abs(ticks[ticks.length - 1].value));\n            if (maxTick < 1e-4 || maxTick > 1e+15) {\n                notation = 'scientific';\n            }\n            delta = calculateDelta(tickValue, ticks);\n        }\n        const logDelta = log10(Math.abs(delta));\n        const numDecimal = isNaN(logDelta) ? 1 : Math.max(Math.min(-1 * Math.floor(logDelta), 20), 0);\n        const options = {\n            notation,\n            minimumFractionDigits: numDecimal,\n            maximumFractionDigits: numDecimal\n        };\n        Object.assign(options, this.options.ticks.format);\n        return formatNumber(tickValue, locale, options);\n    },\n logarithmic (tickValue, index, ticks) {\n        if (tickValue === 0) {\n            return '0';\n        }\n        const remain = ticks[index].significand || tickValue / Math.pow(10, Math.floor(log10(tickValue)));\n        if ([\n            1,\n            2,\n            3,\n            5,\n            10,\n            15\n        ].includes(remain) || index > 0.8 * ticks.length) {\n            return formatters.numeric.call(this, tickValue, index, ticks);\n        }\n        return '';\n    }\n};\nfunction calculateDelta(tickValue, ticks) {\n    let delta = ticks.length > 3 ? ticks[2].value - ticks[1].value : ticks[1].value - ticks[0].value;\n    if (Math.abs(delta) >= 1 && tickValue !== Math.floor(tickValue)) {\n        delta = tickValue - Math.floor(tickValue);\n    }\n    return delta;\n}\n var Ticks = {\n    formatters\n};\n\nfunction applyScaleDefaults(defaults) {\n    defaults.set('scale', {\n        display: true,\n        offset: false,\n        reverse: false,\n        beginAtZero: false,\n bounds: 'ticks',\n        clip: true,\n grace: 0,\n        grid: {\n            display: true,\n            lineWidth: 1,\n            drawOnChartArea: true,\n            drawTicks: true,\n            tickLength: 8,\n            tickWidth: (_ctx, options)=>options.lineWidth,\n            tickColor: (_ctx, options)=>options.color,\n            offset: false\n        },\n        border: {\n            display: true,\n            dash: [],\n            dashOffset: 0.0,\n            width: 1\n        },\n        title: {\n            display: false,\n            text: '',\n            padding: {\n                top: 4,\n                bottom: 4\n            }\n        },\n        ticks: {\n            minRotation: 0,\n            maxRotation: 50,\n            mirror: false,\n            textStrokeWidth: 0,\n            textStrokeColor: '',\n            padding: 3,\n            display: true,\n            autoSkip: true,\n            autoSkipPadding: 3,\n            labelOffset: 0,\n            callback: Ticks.formatters.values,\n            minor: {},\n            major: {},\n            align: 'center',\n            crossAlign: 'near',\n            showLabelBackdrop: false,\n            backdropColor: 'rgba(255, 255, 255, 0.75)',\n            backdropPadding: 2\n        }\n    });\n    defaults.route('scale.ticks', 'color', '', 'color');\n    defaults.route('scale.grid', 'color', '', 'borderColor');\n    defaults.route('scale.border', 'color', '', 'borderColor');\n    defaults.route('scale.title', 'color', '', 'color');\n    defaults.describe('scale', {\n        _fallback: false,\n        _scriptable: (name)=>!name.startsWith('before') && !name.startsWith('after') && name !== 'callback' && name !== 'parser',\n        _indexable: (name)=>name !== 'borderDash' && name !== 'tickBorderDash' && name !== 'dash'\n    });\n    defaults.describe('scales', {\n        _fallback: 'scale'\n    });\n    defaults.describe('scale.ticks', {\n        _scriptable: (name)=>name !== 'backdropPadding' && name !== 'callback',\n        _indexable: (name)=>name !== 'backdropPadding'\n    });\n}\n\nconst overrides = Object.create(null);\nconst descriptors = Object.create(null);\n function getScope$1(node, key) {\n    if (!key) {\n        return node;\n    }\n    const keys = key.split('.');\n    for(let i = 0, n = keys.length; i < n; ++i){\n        const k = keys[i];\n        node = node[k] || (node[k] = Object.create(null));\n    }\n    return node;\n}\nfunction set(root, scope, values) {\n    if (typeof scope === 'string') {\n        return merge(getScope$1(root, scope), values);\n    }\n    return merge(getScope$1(root, ''), scope);\n}\n class Defaults {\n    constructor(_descriptors, _appliers){\n        this.animation = undefined;\n        this.backgroundColor = 'rgba(0,0,0,0.1)';\n        this.borderColor = 'rgba(0,0,0,0.1)';\n        this.color = '#666';\n        this.datasets = {};\n        this.devicePixelRatio = (context)=>context.chart.platform.getDevicePixelRatio();\n        this.elements = {};\n        this.events = [\n            'mousemove',\n            'mouseout',\n            'click',\n            'touchstart',\n            'touchmove'\n        ];\n        this.font = {\n            family: \"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif\",\n            size: 12,\n            style: 'normal',\n            lineHeight: 1.2,\n            weight: null\n        };\n        this.hover = {};\n        this.hoverBackgroundColor = (ctx, options)=>getHoverColor(options.backgroundColor);\n        this.hoverBorderColor = (ctx, options)=>getHoverColor(options.borderColor);\n        this.hoverColor = (ctx, options)=>getHoverColor(options.color);\n        this.indexAxis = 'x';\n        this.interaction = {\n            mode: 'nearest',\n            intersect: true,\n            includeInvisible: false\n        };\n        this.maintainAspectRatio = true;\n        this.onHover = null;\n        this.onClick = null;\n        this.parsing = true;\n        this.plugins = {};\n        this.responsive = true;\n        this.scale = undefined;\n        this.scales = {};\n        this.showLine = true;\n        this.drawActiveElementsOnTop = true;\n        this.describe(_descriptors);\n        this.apply(_appliers);\n    }\n set(scope, values) {\n        return set(this, scope, values);\n    }\n get(scope) {\n        return getScope$1(this, scope);\n    }\n describe(scope, values) {\n        return set(descriptors, scope, values);\n    }\n    override(scope, values) {\n        return set(overrides, scope, values);\n    }\n route(scope, name, targetScope, targetName) {\n        const scopeObject = getScope$1(this, scope);\n        const targetScopeObject = getScope$1(this, targetScope);\n        const privateName = '_' + name;\n        Object.defineProperties(scopeObject, {\n            [privateName]: {\n                value: scopeObject[name],\n                writable: true\n            },\n            [name]: {\n                enumerable: true,\n                get () {\n                    const local = this[privateName];\n                    const target = targetScopeObject[targetName];\n                    if (isObject(local)) {\n                        return Object.assign({}, target, local);\n                    }\n                    return valueOrDefault(local, target);\n                },\n                set (value) {\n                    this[privateName] = value;\n                }\n            }\n        });\n    }\n    apply(appliers) {\n        appliers.forEach((apply)=>apply(this));\n    }\n}\nvar defaults = /* #__PURE__ */ new Defaults({\n    _scriptable: (name)=>!name.startsWith('on'),\n    _indexable: (name)=>name !== 'events',\n    hover: {\n        _fallback: 'interaction'\n    },\n    interaction: {\n        _scriptable: false,\n        _indexable: false\n    }\n}, [\n    applyAnimationsDefaults,\n    applyLayoutsDefaults,\n    applyScaleDefaults\n]);\n\n/**\n * Converts the given font object into a CSS font string.\n * @param font - A font object.\n * @return The CSS font string. See https://developer.mozilla.org/en-US/docs/Web/CSS/font\n * @private\n */ function toFontString(font) {\n    if (!font || isNullOrUndef(font.size) || isNullOrUndef(font.family)) {\n        return null;\n    }\n    return (font.style ? font.style + ' ' : '') + (font.weight ? font.weight + ' ' : '') + font.size + 'px ' + font.family;\n}\n/**\n * @private\n */ function _measureText(ctx, data, gc, longest, string) {\n    let textWidth = data[string];\n    if (!textWidth) {\n        textWidth = data[string] = ctx.measureText(string).width;\n        gc.push(string);\n    }\n    if (textWidth > longest) {\n        longest = textWidth;\n    }\n    return longest;\n}\n/**\n * @private\n */ // eslint-disable-next-line complexity\nfunction _longestText(ctx, font, arrayOfThings, cache) {\n    cache = cache || {};\n    let data = cache.data = cache.data || {};\n    let gc = cache.garbageCollect = cache.garbageCollect || [];\n    if (cache.font !== font) {\n        data = cache.data = {};\n        gc = cache.garbageCollect = [];\n        cache.font = font;\n    }\n    ctx.save();\n    ctx.font = font;\n    let longest = 0;\n    const ilen = arrayOfThings.length;\n    let i, j, jlen, thing, nestedThing;\n    for(i = 0; i < ilen; i++){\n        thing = arrayOfThings[i];\n        // Undefined strings and arrays should not be measured\n        if (thing !== undefined && thing !== null && !isArray(thing)) {\n            longest = _measureText(ctx, data, gc, longest, thing);\n        } else if (isArray(thing)) {\n            // if it is an array lets measure each element\n            // to do maybe simplify this function a bit so we can do this more recursively?\n            for(j = 0, jlen = thing.length; j < jlen; j++){\n                nestedThing = thing[j];\n                // Undefined strings and arrays should not be measured\n                if (nestedThing !== undefined && nestedThing !== null && !isArray(nestedThing)) {\n                    longest = _measureText(ctx, data, gc, longest, nestedThing);\n                }\n            }\n        }\n    }\n    ctx.restore();\n    const gcLen = gc.length / 2;\n    if (gcLen > arrayOfThings.length) {\n        for(i = 0; i < gcLen; i++){\n            delete data[gc[i]];\n        }\n        gc.splice(0, gcLen);\n    }\n    return longest;\n}\n/**\n * Returns the aligned pixel value to avoid anti-aliasing blur\n * @param chart - The chart instance.\n * @param pixel - A pixel value.\n * @param width - The width of the element.\n * @returns The aligned pixel value.\n * @private\n */ function _alignPixel(chart, pixel, width) {\n    const devicePixelRatio = chart.currentDevicePixelRatio;\n    const halfWidth = width !== 0 ? Math.max(width / 2, 0.5) : 0;\n    return Math.round((pixel - halfWidth) * devicePixelRatio) / devicePixelRatio + halfWidth;\n}\n/**\n * Clears the entire canvas.\n */ function clearCanvas(canvas, ctx) {\n    ctx = ctx || canvas.getContext('2d');\n    ctx.save();\n    // canvas.width and canvas.height do not consider the canvas transform,\n    // while clearRect does\n    ctx.resetTransform();\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    ctx.restore();\n}\nfunction drawPoint(ctx, options, x, y) {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    drawPointLegend(ctx, options, x, y, null);\n}\n// eslint-disable-next-line complexity\nfunction drawPointLegend(ctx, options, x, y, w) {\n    let type, xOffset, yOffset, size, cornerRadius, width, xOffsetW, yOffsetW;\n    const style = options.pointStyle;\n    const rotation = options.rotation;\n    const radius = options.radius;\n    let rad = (rotation || 0) * RAD_PER_DEG;\n    if (style && typeof style === 'object') {\n        type = style.toString();\n        if (type === '[object HTMLImageElement]' || type === '[object HTMLCanvasElement]') {\n            ctx.save();\n            ctx.translate(x, y);\n            ctx.rotate(rad);\n            ctx.drawImage(style, -style.width / 2, -style.height / 2, style.width, style.height);\n            ctx.restore();\n            return;\n        }\n    }\n    if (isNaN(radius) || radius <= 0) {\n        return;\n    }\n    ctx.beginPath();\n    switch(style){\n        // Default includes circle\n        default:\n            if (w) {\n                ctx.ellipse(x, y, w / 2, radius, 0, 0, TAU);\n            } else {\n                ctx.arc(x, y, radius, 0, TAU);\n            }\n            ctx.closePath();\n            break;\n        case 'triangle':\n            width = w ? w / 2 : radius;\n            ctx.moveTo(x + Math.sin(rad) * width, y - Math.cos(rad) * radius);\n            rad += TWO_THIRDS_PI;\n            ctx.lineTo(x + Math.sin(rad) * width, y - Math.cos(rad) * radius);\n            rad += TWO_THIRDS_PI;\n            ctx.lineTo(x + Math.sin(rad) * width, y - Math.cos(rad) * radius);\n            ctx.closePath();\n            break;\n        case 'rectRounded':\n            // NOTE: the rounded rect implementation changed to use `arc` instead of\n            // `quadraticCurveTo` since it generates better results when rect is\n            // almost a circle. 0.516 (instead of 0.5) produces results with visually\n            // closer proportion to the previous impl and it is inscribed in the\n            // circle with `radius`. For more details, see the following PRs:\n            // https://github.com/chartjs/Chart.js/issues/5597\n            // https://github.com/chartjs/Chart.js/issues/5858\n            cornerRadius = radius * 0.516;\n            size = radius - cornerRadius;\n            xOffset = Math.cos(rad + QUARTER_PI) * size;\n            xOffsetW = Math.cos(rad + QUARTER_PI) * (w ? w / 2 - cornerRadius : size);\n            yOffset = Math.sin(rad + QUARTER_PI) * size;\n            yOffsetW = Math.sin(rad + QUARTER_PI) * (w ? w / 2 - cornerRadius : size);\n            ctx.arc(x - xOffsetW, y - yOffset, cornerRadius, rad - PI, rad - HALF_PI);\n            ctx.arc(x + yOffsetW, y - xOffset, cornerRadius, rad - HALF_PI, rad);\n            ctx.arc(x + xOffsetW, y + yOffset, cornerRadius, rad, rad + HALF_PI);\n            ctx.arc(x - yOffsetW, y + xOffset, cornerRadius, rad + HALF_PI, rad + PI);\n            ctx.closePath();\n            break;\n        case 'rect':\n            if (!rotation) {\n                size = Math.SQRT1_2 * radius;\n                width = w ? w / 2 : size;\n                ctx.rect(x - width, y - size, 2 * width, 2 * size);\n                break;\n            }\n            rad += QUARTER_PI;\n        /* falls through */ case 'rectRot':\n            xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);\n            xOffset = Math.cos(rad) * radius;\n            yOffset = Math.sin(rad) * radius;\n            yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);\n            ctx.moveTo(x - xOffsetW, y - yOffset);\n            ctx.lineTo(x + yOffsetW, y - xOffset);\n            ctx.lineTo(x + xOffsetW, y + yOffset);\n            ctx.lineTo(x - yOffsetW, y + xOffset);\n            ctx.closePath();\n            break;\n        case 'crossRot':\n            rad += QUARTER_PI;\n        /* falls through */ case 'cross':\n            xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);\n            xOffset = Math.cos(rad) * radius;\n            yOffset = Math.sin(rad) * radius;\n            yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);\n            ctx.moveTo(x - xOffsetW, y - yOffset);\n            ctx.lineTo(x + xOffsetW, y + yOffset);\n            ctx.moveTo(x + yOffsetW, y - xOffset);\n            ctx.lineTo(x - yOffsetW, y + xOffset);\n            break;\n        case 'star':\n            xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);\n            xOffset = Math.cos(rad) * radius;\n            yOffset = Math.sin(rad) * radius;\n            yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);\n            ctx.moveTo(x - xOffsetW, y - yOffset);\n            ctx.lineTo(x + xOffsetW, y + yOffset);\n            ctx.moveTo(x + yOffsetW, y - xOffset);\n            ctx.lineTo(x - yOffsetW, y + xOffset);\n            rad += QUARTER_PI;\n            xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);\n            xOffset = Math.cos(rad) * radius;\n            yOffset = Math.sin(rad) * radius;\n            yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);\n            ctx.moveTo(x - xOffsetW, y - yOffset);\n            ctx.lineTo(x + xOffsetW, y + yOffset);\n            ctx.moveTo(x + yOffsetW, y - xOffset);\n            ctx.lineTo(x - yOffsetW, y + xOffset);\n            break;\n        case 'line':\n            xOffset = w ? w / 2 : Math.cos(rad) * radius;\n            yOffset = Math.sin(rad) * radius;\n            ctx.moveTo(x - xOffset, y - yOffset);\n            ctx.lineTo(x + xOffset, y + yOffset);\n            break;\n        case 'dash':\n            ctx.moveTo(x, y);\n            ctx.lineTo(x + Math.cos(rad) * (w ? w / 2 : radius), y + Math.sin(rad) * radius);\n            break;\n        case false:\n            ctx.closePath();\n            break;\n    }\n    ctx.fill();\n    if (options.borderWidth > 0) {\n        ctx.stroke();\n    }\n}\n/**\n * Returns true if the point is inside the rectangle\n * @param point - The point to test\n * @param area - The rectangle\n * @param margin - allowed margin\n * @private\n */ function _isPointInArea(point, area, margin) {\n    margin = margin || 0.5; // margin - default is to match rounded decimals\n    return !area || point && point.x > area.left - margin && point.x < area.right + margin && point.y > area.top - margin && point.y < area.bottom + margin;\n}\nfunction clipArea(ctx, area) {\n    ctx.save();\n    ctx.beginPath();\n    ctx.rect(area.left, area.top, area.right - area.left, area.bottom - area.top);\n    ctx.clip();\n}\nfunction unclipArea(ctx) {\n    ctx.restore();\n}\n/**\n * @private\n */ function _steppedLineTo(ctx, previous, target, flip, mode) {\n    if (!previous) {\n        return ctx.lineTo(target.x, target.y);\n    }\n    if (mode === 'middle') {\n        const midpoint = (previous.x + target.x) / 2.0;\n        ctx.lineTo(midpoint, previous.y);\n        ctx.lineTo(midpoint, target.y);\n    } else if (mode === 'after' !== !!flip) {\n        ctx.lineTo(previous.x, target.y);\n    } else {\n        ctx.lineTo(target.x, previous.y);\n    }\n    ctx.lineTo(target.x, target.y);\n}\n/**\n * @private\n */ function _bezierCurveTo(ctx, previous, target, flip) {\n    if (!previous) {\n        return ctx.lineTo(target.x, target.y);\n    }\n    ctx.bezierCurveTo(flip ? previous.cp1x : previous.cp2x, flip ? previous.cp1y : previous.cp2y, flip ? target.cp2x : target.cp1x, flip ? target.cp2y : target.cp1y, target.x, target.y);\n}\nfunction setRenderOpts(ctx, opts) {\n    if (opts.translation) {\n        ctx.translate(opts.translation[0], opts.translation[1]);\n    }\n    if (!isNullOrUndef(opts.rotation)) {\n        ctx.rotate(opts.rotation);\n    }\n    if (opts.color) {\n        ctx.fillStyle = opts.color;\n    }\n    if (opts.textAlign) {\n        ctx.textAlign = opts.textAlign;\n    }\n    if (opts.textBaseline) {\n        ctx.textBaseline = opts.textBaseline;\n    }\n}\nfunction decorateText(ctx, x, y, line, opts) {\n    if (opts.strikethrough || opts.underline) {\n        /**\n     * Now that IE11 support has been dropped, we can use more\n     * of the TextMetrics object. The actual bounding boxes\n     * are unflagged in Chrome, Firefox, Edge, and Safari so they\n     * can be safely used.\n     * See https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics#Browser_compatibility\n     */ const metrics = ctx.measureText(line);\n        const left = x - metrics.actualBoundingBoxLeft;\n        const right = x + metrics.actualBoundingBoxRight;\n        const top = y - metrics.actualBoundingBoxAscent;\n        const bottom = y + metrics.actualBoundingBoxDescent;\n        const yDecoration = opts.strikethrough ? (top + bottom) / 2 : bottom;\n        ctx.strokeStyle = ctx.fillStyle;\n        ctx.beginPath();\n        ctx.lineWidth = opts.decorationWidth || 2;\n        ctx.moveTo(left, yDecoration);\n        ctx.lineTo(right, yDecoration);\n        ctx.stroke();\n    }\n}\nfunction drawBackdrop(ctx, opts) {\n    const oldColor = ctx.fillStyle;\n    ctx.fillStyle = opts.color;\n    ctx.fillRect(opts.left, opts.top, opts.width, opts.height);\n    ctx.fillStyle = oldColor;\n}\n/**\n * Render text onto the canvas\n */ function renderText(ctx, text, x, y, font, opts = {}) {\n    const lines = isArray(text) ? text : [\n        text\n    ];\n    const stroke = opts.strokeWidth > 0 && opts.strokeColor !== '';\n    let i, line;\n    ctx.save();\n    ctx.font = font.string;\n    setRenderOpts(ctx, opts);\n    for(i = 0; i < lines.length; ++i){\n        line = lines[i];\n        if (opts.backdrop) {\n            drawBackdrop(ctx, opts.backdrop);\n        }\n        if (stroke) {\n            if (opts.strokeColor) {\n                ctx.strokeStyle = opts.strokeColor;\n            }\n            if (!isNullOrUndef(opts.strokeWidth)) {\n                ctx.lineWidth = opts.strokeWidth;\n            }\n            ctx.strokeText(line, x, y, opts.maxWidth);\n        }\n        ctx.fillText(line, x, y, opts.maxWidth);\n        decorateText(ctx, x, y, line, opts);\n        y += Number(font.lineHeight);\n    }\n    ctx.restore();\n}\n/**\n * Add a path of a rectangle with rounded corners to the current sub-path\n * @param ctx - Context\n * @param rect - Bounding rect\n */ function addRoundedRectPath(ctx, rect) {\n    const { x , y , w , h , radius  } = rect;\n    // top left arc\n    ctx.arc(x + radius.topLeft, y + radius.topLeft, radius.topLeft, 1.5 * PI, PI, true);\n    // line from top left to bottom left\n    ctx.lineTo(x, y + h - radius.bottomLeft);\n    // bottom left arc\n    ctx.arc(x + radius.bottomLeft, y + h - radius.bottomLeft, radius.bottomLeft, PI, HALF_PI, true);\n    // line from bottom left to bottom right\n    ctx.lineTo(x + w - radius.bottomRight, y + h);\n    // bottom right arc\n    ctx.arc(x + w - radius.bottomRight, y + h - radius.bottomRight, radius.bottomRight, HALF_PI, 0, true);\n    // line from bottom right to top right\n    ctx.lineTo(x + w, y + radius.topRight);\n    // top right arc\n    ctx.arc(x + w - radius.topRight, y + radius.topRight, radius.topRight, 0, -HALF_PI, true);\n    // line from top right to top left\n    ctx.lineTo(x + radius.topLeft, y);\n}\n\nconst LINE_HEIGHT = /^(normal|(\\d+(?:\\.\\d+)?)(px|em|%)?)$/;\nconst FONT_STYLE = /^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/;\n/**\n * @alias Chart.helpers.options\n * @namespace\n */ /**\n * Converts the given line height `value` in pixels for a specific font `size`.\n * @param value - The lineHeight to parse (eg. 1.6, '14px', '75%', '1.6em').\n * @param size - The font size (in pixels) used to resolve relative `value`.\n * @returns The effective line height in pixels (size * 1.2 if value is invalid).\n * @see https://developer.mozilla.org/en-US/docs/Web/CSS/line-height\n * @since 2.7.0\n */ function toLineHeight(value, size) {\n    const matches = ('' + value).match(LINE_HEIGHT);\n    if (!matches || matches[1] === 'normal') {\n        return size * 1.2;\n    }\n    value = +matches[2];\n    switch(matches[3]){\n        case 'px':\n            return value;\n        case '%':\n            value /= 100;\n            break;\n    }\n    return size * value;\n}\nconst numberOrZero = (v)=>+v || 0;\nfunction _readValueToProps(value, props) {\n    const ret = {};\n    const objProps = isObject(props);\n    const keys = objProps ? Object.keys(props) : props;\n    const read = isObject(value) ? objProps ? (prop)=>valueOrDefault(value[prop], value[props[prop]]) : (prop)=>value[prop] : ()=>value;\n    for (const prop of keys){\n        ret[prop] = numberOrZero(read(prop));\n    }\n    return ret;\n}\n/**\n * Converts the given value into a TRBL object.\n * @param value - If a number, set the value to all TRBL component,\n *  else, if an object, use defined properties and sets undefined ones to 0.\n *  x / y are shorthands for same value for left/right and top/bottom.\n * @returns The padding values (top, right, bottom, left)\n * @since 3.0.0\n */ function toTRBL(value) {\n    return _readValueToProps(value, {\n        top: 'y',\n        right: 'x',\n        bottom: 'y',\n        left: 'x'\n    });\n}\n/**\n * Converts the given value into a TRBL corners object (similar with css border-radius).\n * @param value - If a number, set the value to all TRBL corner components,\n *  else, if an object, use defined properties and sets undefined ones to 0.\n * @returns The TRBL corner values (topLeft, topRight, bottomLeft, bottomRight)\n * @since 3.0.0\n */ function toTRBLCorners(value) {\n    return _readValueToProps(value, [\n        'topLeft',\n        'topRight',\n        'bottomLeft',\n        'bottomRight'\n    ]);\n}\n/**\n * Converts the given value into a padding object with pre-computed width/height.\n * @param value - If a number, set the value to all TRBL component,\n *  else, if an object, use defined properties and sets undefined ones to 0.\n *  x / y are shorthands for same value for left/right and top/bottom.\n * @returns The padding values (top, right, bottom, left, width, height)\n * @since 2.7.0\n */ function toPadding(value) {\n    const obj = toTRBL(value);\n    obj.width = obj.left + obj.right;\n    obj.height = obj.top + obj.bottom;\n    return obj;\n}\n/**\n * Parses font options and returns the font object.\n * @param options - A object that contains font options to be parsed.\n * @param fallback - A object that contains fallback font options.\n * @return The font object.\n * @private\n */ function toFont(options, fallback) {\n    options = options || {};\n    fallback = fallback || defaults.font;\n    let size = valueOrDefault(options.size, fallback.size);\n    if (typeof size === 'string') {\n        size = parseInt(size, 10);\n    }\n    let style = valueOrDefault(options.style, fallback.style);\n    if (style && !('' + style).match(FONT_STYLE)) {\n        console.warn('Invalid font style specified: \"' + style + '\"');\n        style = undefined;\n    }\n    const font = {\n        family: valueOrDefault(options.family, fallback.family),\n        lineHeight: toLineHeight(valueOrDefault(options.lineHeight, fallback.lineHeight), size),\n        size,\n        style,\n        weight: valueOrDefault(options.weight, fallback.weight),\n        string: ''\n    };\n    font.string = toFontString(font);\n    return font;\n}\n/**\n * Evaluates the given `inputs` sequentially and returns the first defined value.\n * @param inputs - An array of values, falling back to the last value.\n * @param context - If defined and the current value is a function, the value\n * is called with `context` as first argument and the result becomes the new input.\n * @param index - If defined and the current value is an array, the value\n * at `index` become the new input.\n * @param info - object to return information about resolution in\n * @param info.cacheable - Will be set to `false` if option is not cacheable.\n * @since 2.7.0\n */ function resolve(inputs, context, index, info) {\n    let cacheable = true;\n    let i, ilen, value;\n    for(i = 0, ilen = inputs.length; i < ilen; ++i){\n        value = inputs[i];\n        if (value === undefined) {\n            continue;\n        }\n        if (context !== undefined && typeof value === 'function') {\n            value = value(context);\n            cacheable = false;\n        }\n        if (index !== undefined && isArray(value)) {\n            value = value[index % value.length];\n            cacheable = false;\n        }\n        if (value !== undefined) {\n            if (info && !cacheable) {\n                info.cacheable = false;\n            }\n            return value;\n        }\n    }\n}\n/**\n * @param minmax\n * @param grace\n * @param beginAtZero\n * @private\n */ function _addGrace(minmax, grace, beginAtZero) {\n    const { min , max  } = minmax;\n    const change = toDimension(grace, (max - min) / 2);\n    const keepZero = (value, add)=>beginAtZero && value === 0 ? 0 : value + add;\n    return {\n        min: keepZero(min, -Math.abs(change)),\n        max: keepZero(max, change)\n    };\n}\nfunction createContext(parentContext, context) {\n    return Object.assign(Object.create(parentContext), context);\n}\n\n/**\n * Creates a Proxy for resolving raw values for options.\n * @param scopes - The option scopes to look for values, in resolution order\n * @param prefixes - The prefixes for values, in resolution order.\n * @param rootScopes - The root option scopes\n * @param fallback - Parent scopes fallback\n * @param getTarget - callback for getting the target for changed values\n * @returns Proxy\n * @private\n */ function _createResolver(scopes, prefixes = [\n    ''\n], rootScopes, fallback, getTarget = ()=>scopes[0]) {\n    const finalRootScopes = rootScopes || scopes;\n    if (typeof fallback === 'undefined') {\n        fallback = _resolve('_fallback', scopes);\n    }\n    const cache = {\n        [Symbol.toStringTag]: 'Object',\n        _cacheable: true,\n        _scopes: scopes,\n        _rootScopes: finalRootScopes,\n        _fallback: fallback,\n        _getTarget: getTarget,\n        override: (scope)=>_createResolver([\n                scope,\n                ...scopes\n            ], prefixes, finalRootScopes, fallback)\n    };\n    return new Proxy(cache, {\n        /**\n     * A trap for the delete operator.\n     */ deleteProperty (target, prop) {\n            delete target[prop]; // remove from cache\n            delete target._keys; // remove cached keys\n            delete scopes[0][prop]; // remove from top level scope\n            return true;\n        },\n        /**\n     * A trap for getting property values.\n     */ get (target, prop) {\n            return _cached(target, prop, ()=>_resolveWithPrefixes(prop, prefixes, scopes, target));\n        },\n        /**\n     * A trap for Object.getOwnPropertyDescriptor.\n     * Also used by Object.hasOwnProperty.\n     */ getOwnPropertyDescriptor (target, prop) {\n            return Reflect.getOwnPropertyDescriptor(target._scopes[0], prop);\n        },\n        /**\n     * A trap for Object.getPrototypeOf.\n     */ getPrototypeOf () {\n            return Reflect.getPrototypeOf(scopes[0]);\n        },\n        /**\n     * A trap for the in operator.\n     */ has (target, prop) {\n            return getKeysFromAllScopes(target).includes(prop);\n        },\n        /**\n     * A trap for Object.getOwnPropertyNames and Object.getOwnPropertySymbols.\n     */ ownKeys (target) {\n            return getKeysFromAllScopes(target);\n        },\n        /**\n     * A trap for setting property values.\n     */ set (target, prop, value) {\n            const storage = target._storage || (target._storage = getTarget());\n            target[prop] = storage[prop] = value; // set to top level scope + cache\n            delete target._keys; // remove cached keys\n            return true;\n        }\n    });\n}\n/**\n * Returns an Proxy for resolving option values with context.\n * @param proxy - The Proxy returned by `_createResolver`\n * @param context - Context object for scriptable/indexable options\n * @param subProxy - The proxy provided for scriptable options\n * @param descriptorDefaults - Defaults for descriptors\n * @private\n */ function _attachContext(proxy, context, subProxy, descriptorDefaults) {\n    const cache = {\n        _cacheable: false,\n        _proxy: proxy,\n        _context: context,\n        _subProxy: subProxy,\n        _stack: new Set(),\n        _descriptors: _descriptors(proxy, descriptorDefaults),\n        setContext: (ctx)=>_attachContext(proxy, ctx, subProxy, descriptorDefaults),\n        override: (scope)=>_attachContext(proxy.override(scope), context, subProxy, descriptorDefaults)\n    };\n    return new Proxy(cache, {\n        /**\n     * A trap for the delete operator.\n     */ deleteProperty (target, prop) {\n            delete target[prop]; // remove from cache\n            delete proxy[prop]; // remove from proxy\n            return true;\n        },\n        /**\n     * A trap for getting property values.\n     */ get (target, prop, receiver) {\n            return _cached(target, prop, ()=>_resolveWithContext(target, prop, receiver));\n        },\n        /**\n     * A trap for Object.getOwnPropertyDescriptor.\n     * Also used by Object.hasOwnProperty.\n     */ getOwnPropertyDescriptor (target, prop) {\n            return target._descriptors.allKeys ? Reflect.has(proxy, prop) ? {\n                enumerable: true,\n                configurable: true\n            } : undefined : Reflect.getOwnPropertyDescriptor(proxy, prop);\n        },\n        /**\n     * A trap for Object.getPrototypeOf.\n     */ getPrototypeOf () {\n            return Reflect.getPrototypeOf(proxy);\n        },\n        /**\n     * A trap for the in operator.\n     */ has (target, prop) {\n            return Reflect.has(proxy, prop);\n        },\n        /**\n     * A trap for Object.getOwnPropertyNames and Object.getOwnPropertySymbols.\n     */ ownKeys () {\n            return Reflect.ownKeys(proxy);\n        },\n        /**\n     * A trap for setting property values.\n     */ set (target, prop, value) {\n            proxy[prop] = value; // set to proxy\n            delete target[prop]; // remove from cache\n            return true;\n        }\n    });\n}\n/**\n * @private\n */ function _descriptors(proxy, defaults = {\n    scriptable: true,\n    indexable: true\n}) {\n    const { _scriptable =defaults.scriptable , _indexable =defaults.indexable , _allKeys =defaults.allKeys  } = proxy;\n    return {\n        allKeys: _allKeys,\n        scriptable: _scriptable,\n        indexable: _indexable,\n        isScriptable: isFunction(_scriptable) ? _scriptable : ()=>_scriptable,\n        isIndexable: isFunction(_indexable) ? _indexable : ()=>_indexable\n    };\n}\nconst readKey = (prefix, name)=>prefix ? prefix + _capitalize(name) : name;\nconst needsSubResolver = (prop, value)=>isObject(value) && prop !== 'adapters' && (Object.getPrototypeOf(value) === null || value.constructor === Object);\nfunction _cached(target, prop, resolve) {\n    if (Object.prototype.hasOwnProperty.call(target, prop)) {\n        return target[prop];\n    }\n    const value = resolve();\n    // cache the resolved value\n    target[prop] = value;\n    return value;\n}\nfunction _resolveWithContext(target, prop, receiver) {\n    const { _proxy , _context , _subProxy , _descriptors: descriptors  } = target;\n    let value = _proxy[prop]; // resolve from proxy\n    // resolve with context\n    if (isFunction(value) && descriptors.isScriptable(prop)) {\n        value = _resolveScriptable(prop, value, target, receiver);\n    }\n    if (isArray(value) && value.length) {\n        value = _resolveArray(prop, value, target, descriptors.isIndexable);\n    }\n    if (needsSubResolver(prop, value)) {\n        // if the resolved value is an object, create a sub resolver for it\n        value = _attachContext(value, _context, _subProxy && _subProxy[prop], descriptors);\n    }\n    return value;\n}\nfunction _resolveScriptable(prop, getValue, target, receiver) {\n    const { _proxy , _context , _subProxy , _stack  } = target;\n    if (_stack.has(prop)) {\n        throw new Error('Recursion detected: ' + Array.from(_stack).join('->') + '->' + prop);\n    }\n    _stack.add(prop);\n    let value = getValue(_context, _subProxy || receiver);\n    _stack.delete(prop);\n    if (needsSubResolver(prop, value)) {\n        // When scriptable option returns an object, create a resolver on that.\n        value = createSubResolver(_proxy._scopes, _proxy, prop, value);\n    }\n    return value;\n}\nfunction _resolveArray(prop, value, target, isIndexable) {\n    const { _proxy , _context , _subProxy , _descriptors: descriptors  } = target;\n    if (typeof _context.index !== 'undefined' && isIndexable(prop)) {\n        return value[_context.index % value.length];\n    } else if (isObject(value[0])) {\n        // Array of objects, return array or resolvers\n        const arr = value;\n        const scopes = _proxy._scopes.filter((s)=>s !== arr);\n        value = [];\n        for (const item of arr){\n            const resolver = createSubResolver(scopes, _proxy, prop, item);\n            value.push(_attachContext(resolver, _context, _subProxy && _subProxy[prop], descriptors));\n        }\n    }\n    return value;\n}\nfunction resolveFallback(fallback, prop, value) {\n    return isFunction(fallback) ? fallback(prop, value) : fallback;\n}\nconst getScope = (key, parent)=>key === true ? parent : typeof key === 'string' ? resolveObjectKey(parent, key) : undefined;\nfunction addScopes(set, parentScopes, key, parentFallback, value) {\n    for (const parent of parentScopes){\n        const scope = getScope(key, parent);\n        if (scope) {\n            set.add(scope);\n            const fallback = resolveFallback(scope._fallback, key, value);\n            if (typeof fallback !== 'undefined' && fallback !== key && fallback !== parentFallback) {\n                // When we reach the descriptor that defines a new _fallback, return that.\n                // The fallback will resume to that new scope.\n                return fallback;\n            }\n        } else if (scope === false && typeof parentFallback !== 'undefined' && key !== parentFallback) {\n            // Fallback to `false` results to `false`, when falling back to different key.\n            // For example `interaction` from `hover` or `plugins.tooltip` and `animation` from `animations`\n            return null;\n        }\n    }\n    return false;\n}\nfunction createSubResolver(parentScopes, resolver, prop, value) {\n    const rootScopes = resolver._rootScopes;\n    const fallback = resolveFallback(resolver._fallback, prop, value);\n    const allScopes = [\n        ...parentScopes,\n        ...rootScopes\n    ];\n    const set = new Set();\n    set.add(value);\n    let key = addScopesFromKey(set, allScopes, prop, fallback || prop, value);\n    if (key === null) {\n        return false;\n    }\n    if (typeof fallback !== 'undefined' && fallback !== prop) {\n        key = addScopesFromKey(set, allScopes, fallback, key, value);\n        if (key === null) {\n            return false;\n        }\n    }\n    return _createResolver(Array.from(set), [\n        ''\n    ], rootScopes, fallback, ()=>subGetTarget(resolver, prop, value));\n}\nfunction addScopesFromKey(set, allScopes, key, fallback, item) {\n    while(key){\n        key = addScopes(set, allScopes, key, fallback, item);\n    }\n    return key;\n}\nfunction subGetTarget(resolver, prop, value) {\n    const parent = resolver._getTarget();\n    if (!(prop in parent)) {\n        parent[prop] = {};\n    }\n    const target = parent[prop];\n    if (isArray(target) && isObject(value)) {\n        // For array of objects, the object is used to store updated values\n        return value;\n    }\n    return target || {};\n}\nfunction _resolveWithPrefixes(prop, prefixes, scopes, proxy) {\n    let value;\n    for (const prefix of prefixes){\n        value = _resolve(readKey(prefix, prop), scopes);\n        if (typeof value !== 'undefined') {\n            return needsSubResolver(prop, value) ? createSubResolver(scopes, proxy, prop, value) : value;\n        }\n    }\n}\nfunction _resolve(key, scopes) {\n    for (const scope of scopes){\n        if (!scope) {\n            continue;\n        }\n        const value = scope[key];\n        if (typeof value !== 'undefined') {\n            return value;\n        }\n    }\n}\nfunction getKeysFromAllScopes(target) {\n    let keys = target._keys;\n    if (!keys) {\n        keys = target._keys = resolveKeysFromAllScopes(target._scopes);\n    }\n    return keys;\n}\nfunction resolveKeysFromAllScopes(scopes) {\n    const set = new Set();\n    for (const scope of scopes){\n        for (const key of Object.keys(scope).filter((k)=>!k.startsWith('_'))){\n            set.add(key);\n        }\n    }\n    return Array.from(set);\n}\nfunction _parseObjectDataRadialScale(meta, data, start, count) {\n    const { iScale  } = meta;\n    const { key ='r'  } = this._parsing;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n    for(i = 0, ilen = count; i < ilen; ++i){\n        index = i + start;\n        item = data[index];\n        parsed[i] = {\n            r: iScale.parse(resolveObjectKey(item, key), index)\n        };\n    }\n    return parsed;\n}\n\nconst EPSILON = Number.EPSILON || 1e-14;\nconst getPoint = (points, i)=>i < points.length && !points[i].skip && points[i];\nconst getValueAxis = (indexAxis)=>indexAxis === 'x' ? 'y' : 'x';\nfunction splineCurve(firstPoint, middlePoint, afterPoint, t) {\n    // Props to Rob Spencer at scaled innovation for his post on splining between points\n    // http://scaledinnovation.com/analytics/splines/aboutSplines.html\n    // This function must also respect \"skipped\" points\n    const previous = firstPoint.skip ? middlePoint : firstPoint;\n    const current = middlePoint;\n    const next = afterPoint.skip ? middlePoint : afterPoint;\n    const d01 = distanceBetweenPoints(current, previous);\n    const d12 = distanceBetweenPoints(next, current);\n    let s01 = d01 / (d01 + d12);\n    let s12 = d12 / (d01 + d12);\n    // If all points are the same, s01 & s02 will be inf\n    s01 = isNaN(s01) ? 0 : s01;\n    s12 = isNaN(s12) ? 0 : s12;\n    const fa = t * s01; // scaling factor for triangle Ta\n    const fb = t * s12;\n    return {\n        previous: {\n            x: current.x - fa * (next.x - previous.x),\n            y: current.y - fa * (next.y - previous.y)\n        },\n        next: {\n            x: current.x + fb * (next.x - previous.x),\n            y: current.y + fb * (next.y - previous.y)\n        }\n    };\n}\n/**\n * Adjust tangents to ensure monotonic properties\n */ function monotoneAdjust(points, deltaK, mK) {\n    const pointsLen = points.length;\n    let alphaK, betaK, tauK, squaredMagnitude, pointCurrent;\n    let pointAfter = getPoint(points, 0);\n    for(let i = 0; i < pointsLen - 1; ++i){\n        pointCurrent = pointAfter;\n        pointAfter = getPoint(points, i + 1);\n        if (!pointCurrent || !pointAfter) {\n            continue;\n        }\n        if (almostEquals(deltaK[i], 0, EPSILON)) {\n            mK[i] = mK[i + 1] = 0;\n            continue;\n        }\n        alphaK = mK[i] / deltaK[i];\n        betaK = mK[i + 1] / deltaK[i];\n        squaredMagnitude = Math.pow(alphaK, 2) + Math.pow(betaK, 2);\n        if (squaredMagnitude <= 9) {\n            continue;\n        }\n        tauK = 3 / Math.sqrt(squaredMagnitude);\n        mK[i] = alphaK * tauK * deltaK[i];\n        mK[i + 1] = betaK * tauK * deltaK[i];\n    }\n}\nfunction monotoneCompute(points, mK, indexAxis = 'x') {\n    const valueAxis = getValueAxis(indexAxis);\n    const pointsLen = points.length;\n    let delta, pointBefore, pointCurrent;\n    let pointAfter = getPoint(points, 0);\n    for(let i = 0; i < pointsLen; ++i){\n        pointBefore = pointCurrent;\n        pointCurrent = pointAfter;\n        pointAfter = getPoint(points, i + 1);\n        if (!pointCurrent) {\n            continue;\n        }\n        const iPixel = pointCurrent[indexAxis];\n        const vPixel = pointCurrent[valueAxis];\n        if (pointBefore) {\n            delta = (iPixel - pointBefore[indexAxis]) / 3;\n            pointCurrent[`cp1${indexAxis}`] = iPixel - delta;\n            pointCurrent[`cp1${valueAxis}`] = vPixel - delta * mK[i];\n        }\n        if (pointAfter) {\n            delta = (pointAfter[indexAxis] - iPixel) / 3;\n            pointCurrent[`cp2${indexAxis}`] = iPixel + delta;\n            pointCurrent[`cp2${valueAxis}`] = vPixel + delta * mK[i];\n        }\n    }\n}\n/**\n * This function calculates Bézier control points in a similar way than |splineCurve|,\n * but preserves monotonicity of the provided data and ensures no local extremums are added\n * between the dataset discrete points due to the interpolation.\n * See : https://en.wikipedia.org/wiki/Monotone_cubic_interpolation\n */ function splineCurveMonotone(points, indexAxis = 'x') {\n    const valueAxis = getValueAxis(indexAxis);\n    const pointsLen = points.length;\n    const deltaK = Array(pointsLen).fill(0);\n    const mK = Array(pointsLen);\n    // Calculate slopes (deltaK) and initialize tangents (mK)\n    let i, pointBefore, pointCurrent;\n    let pointAfter = getPoint(points, 0);\n    for(i = 0; i < pointsLen; ++i){\n        pointBefore = pointCurrent;\n        pointCurrent = pointAfter;\n        pointAfter = getPoint(points, i + 1);\n        if (!pointCurrent) {\n            continue;\n        }\n        if (pointAfter) {\n            const slopeDelta = pointAfter[indexAxis] - pointCurrent[indexAxis];\n            // In the case of two points that appear at the same x pixel, slopeDeltaX is 0\n            deltaK[i] = slopeDelta !== 0 ? (pointAfter[valueAxis] - pointCurrent[valueAxis]) / slopeDelta : 0;\n        }\n        mK[i] = !pointBefore ? deltaK[i] : !pointAfter ? deltaK[i - 1] : sign(deltaK[i - 1]) !== sign(deltaK[i]) ? 0 : (deltaK[i - 1] + deltaK[i]) / 2;\n    }\n    monotoneAdjust(points, deltaK, mK);\n    monotoneCompute(points, mK, indexAxis);\n}\nfunction capControlPoint(pt, min, max) {\n    return Math.max(Math.min(pt, max), min);\n}\nfunction capBezierPoints(points, area) {\n    let i, ilen, point, inArea, inAreaPrev;\n    let inAreaNext = _isPointInArea(points[0], area);\n    for(i = 0, ilen = points.length; i < ilen; ++i){\n        inAreaPrev = inArea;\n        inArea = inAreaNext;\n        inAreaNext = i < ilen - 1 && _isPointInArea(points[i + 1], area);\n        if (!inArea) {\n            continue;\n        }\n        point = points[i];\n        if (inAreaPrev) {\n            point.cp1x = capControlPoint(point.cp1x, area.left, area.right);\n            point.cp1y = capControlPoint(point.cp1y, area.top, area.bottom);\n        }\n        if (inAreaNext) {\n            point.cp2x = capControlPoint(point.cp2x, area.left, area.right);\n            point.cp2y = capControlPoint(point.cp2y, area.top, area.bottom);\n        }\n    }\n}\n/**\n * @private\n */ function _updateBezierControlPoints(points, options, area, loop, indexAxis) {\n    let i, ilen, point, controlPoints;\n    // Only consider points that are drawn in case the spanGaps option is used\n    if (options.spanGaps) {\n        points = points.filter((pt)=>!pt.skip);\n    }\n    if (options.cubicInterpolationMode === 'monotone') {\n        splineCurveMonotone(points, indexAxis);\n    } else {\n        let prev = loop ? points[points.length - 1] : points[0];\n        for(i = 0, ilen = points.length; i < ilen; ++i){\n            point = points[i];\n            controlPoints = splineCurve(prev, point, points[Math.min(i + 1, ilen - (loop ? 0 : 1)) % ilen], options.tension);\n            point.cp1x = controlPoints.previous.x;\n            point.cp1y = controlPoints.previous.y;\n            point.cp2x = controlPoints.next.x;\n            point.cp2y = controlPoints.next.y;\n            prev = point;\n        }\n    }\n    if (options.capBezierPoints) {\n        capBezierPoints(points, area);\n    }\n}\n\n/**\n * Note: typedefs are auto-exported, so use a made-up `dom` namespace where\n * necessary to avoid duplicates with `export * from './helpers`; see\n * https://github.com/microsoft/TypeScript/issues/46011\n * @typedef { import('../core/core.controller.js').default } dom.Chart\n * @typedef { import('../../types').ChartEvent } ChartEvent\n */ /**\n * @private\n */ function _isDomSupported() {\n    return typeof window !== 'undefined' && typeof document !== 'undefined';\n}\n/**\n * @private\n */ function _getParentNode(domNode) {\n    let parent = domNode.parentNode;\n    if (parent && parent.toString() === '[object ShadowRoot]') {\n        parent = parent.host;\n    }\n    return parent;\n}\n/**\n * convert max-width/max-height values that may be percentages into a number\n * @private\n */ function parseMaxStyle(styleValue, node, parentProperty) {\n    let valueInPixels;\n    if (typeof styleValue === 'string') {\n        valueInPixels = parseInt(styleValue, 10);\n        if (styleValue.indexOf('%') !== -1) {\n            // percentage * size in dimension\n            valueInPixels = valueInPixels / 100 * node.parentNode[parentProperty];\n        }\n    } else {\n        valueInPixels = styleValue;\n    }\n    return valueInPixels;\n}\nconst getComputedStyle = (element)=>element.ownerDocument.defaultView.getComputedStyle(element, null);\nfunction getStyle(el, property) {\n    return getComputedStyle(el).getPropertyValue(property);\n}\nconst positions = [\n    'top',\n    'right',\n    'bottom',\n    'left'\n];\nfunction getPositionedStyle(styles, style, suffix) {\n    const result = {};\n    suffix = suffix ? '-' + suffix : '';\n    for(let i = 0; i < 4; i++){\n        const pos = positions[i];\n        result[pos] = parseFloat(styles[style + '-' + pos + suffix]) || 0;\n    }\n    result.width = result.left + result.right;\n    result.height = result.top + result.bottom;\n    return result;\n}\nconst useOffsetPos = (x, y, target)=>(x > 0 || y > 0) && (!target || !target.shadowRoot);\n/**\n * @param e\n * @param canvas\n * @returns Canvas position\n */ function getCanvasPosition(e, canvas) {\n    const touches = e.touches;\n    const source = touches && touches.length ? touches[0] : e;\n    const { offsetX , offsetY  } = source;\n    let box = false;\n    let x, y;\n    if (useOffsetPos(offsetX, offsetY, e.target)) {\n        x = offsetX;\n        y = offsetY;\n    } else {\n        const rect = canvas.getBoundingClientRect();\n        x = source.clientX - rect.left;\n        y = source.clientY - rect.top;\n        box = true;\n    }\n    return {\n        x,\n        y,\n        box\n    };\n}\n/**\n * Gets an event's x, y coordinates, relative to the chart area\n * @param event\n * @param chart\n * @returns x and y coordinates of the event\n */ function getRelativePosition(event, chart) {\n    if ('native' in event) {\n        return event;\n    }\n    const { canvas , currentDevicePixelRatio  } = chart;\n    const style = getComputedStyle(canvas);\n    const borderBox = style.boxSizing === 'border-box';\n    const paddings = getPositionedStyle(style, 'padding');\n    const borders = getPositionedStyle(style, 'border', 'width');\n    const { x , y , box  } = getCanvasPosition(event, canvas);\n    const xOffset = paddings.left + (box && borders.left);\n    const yOffset = paddings.top + (box && borders.top);\n    let { width , height  } = chart;\n    if (borderBox) {\n        width -= paddings.width + borders.width;\n        height -= paddings.height + borders.height;\n    }\n    return {\n        x: Math.round((x - xOffset) / width * canvas.width / currentDevicePixelRatio),\n        y: Math.round((y - yOffset) / height * canvas.height / currentDevicePixelRatio)\n    };\n}\nfunction getContainerSize(canvas, width, height) {\n    let maxWidth, maxHeight;\n    if (width === undefined || height === undefined) {\n        const container = _getParentNode(canvas);\n        if (!container) {\n            width = canvas.clientWidth;\n            height = canvas.clientHeight;\n        } else {\n            const rect = container.getBoundingClientRect(); // this is the border box of the container\n            const containerStyle = getComputedStyle(container);\n            const containerBorder = getPositionedStyle(containerStyle, 'border', 'width');\n            const containerPadding = getPositionedStyle(containerStyle, 'padding');\n            width = rect.width - containerPadding.width - containerBorder.width;\n            height = rect.height - containerPadding.height - containerBorder.height;\n            maxWidth = parseMaxStyle(containerStyle.maxWidth, container, 'clientWidth');\n            maxHeight = parseMaxStyle(containerStyle.maxHeight, container, 'clientHeight');\n        }\n    }\n    return {\n        width,\n        height,\n        maxWidth: maxWidth || INFINITY,\n        maxHeight: maxHeight || INFINITY\n    };\n}\nconst round1 = (v)=>Math.round(v * 10) / 10;\n// eslint-disable-next-line complexity\nfunction getMaximumSize(canvas, bbWidth, bbHeight, aspectRatio) {\n    const style = getComputedStyle(canvas);\n    const margins = getPositionedStyle(style, 'margin');\n    const maxWidth = parseMaxStyle(style.maxWidth, canvas, 'clientWidth') || INFINITY;\n    const maxHeight = parseMaxStyle(style.maxHeight, canvas, 'clientHeight') || INFINITY;\n    const containerSize = getContainerSize(canvas, bbWidth, bbHeight);\n    let { width , height  } = containerSize;\n    if (style.boxSizing === 'content-box') {\n        const borders = getPositionedStyle(style, 'border', 'width');\n        const paddings = getPositionedStyle(style, 'padding');\n        width -= paddings.width + borders.width;\n        height -= paddings.height + borders.height;\n    }\n    width = Math.max(0, width - margins.width);\n    height = Math.max(0, aspectRatio ? width / aspectRatio : height - margins.height);\n    width = round1(Math.min(width, maxWidth, containerSize.maxWidth));\n    height = round1(Math.min(height, maxHeight, containerSize.maxHeight));\n    if (width && !height) {\n        // https://github.com/chartjs/Chart.js/issues/4659\n        // If the canvas has width, but no height, default to aspectRatio of 2 (canvas default)\n        height = round1(width / 2);\n    }\n    const maintainHeight = bbWidth !== undefined || bbHeight !== undefined;\n    if (maintainHeight && aspectRatio && containerSize.height && height > containerSize.height) {\n        height = containerSize.height;\n        width = round1(Math.floor(height * aspectRatio));\n    }\n    return {\n        width,\n        height\n    };\n}\n/**\n * @param chart\n * @param forceRatio\n * @param forceStyle\n * @returns True if the canvas context size or transformation has changed.\n */ function retinaScale(chart, forceRatio, forceStyle) {\n    const pixelRatio = forceRatio || 1;\n    const deviceHeight = Math.floor(chart.height * pixelRatio);\n    const deviceWidth = Math.floor(chart.width * pixelRatio);\n    chart.height = Math.floor(chart.height);\n    chart.width = Math.floor(chart.width);\n    const canvas = chart.canvas;\n    // If no style has been set on the canvas, the render size is used as display size,\n    // making the chart visually bigger, so let's enforce it to the \"correct\" values.\n    // See https://github.com/chartjs/Chart.js/issues/3575\n    if (canvas.style && (forceStyle || !canvas.style.height && !canvas.style.width)) {\n        canvas.style.height = `${chart.height}px`;\n        canvas.style.width = `${chart.width}px`;\n    }\n    if (chart.currentDevicePixelRatio !== pixelRatio || canvas.height !== deviceHeight || canvas.width !== deviceWidth) {\n        chart.currentDevicePixelRatio = pixelRatio;\n        canvas.height = deviceHeight;\n        canvas.width = deviceWidth;\n        chart.ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n        return true;\n    }\n    return false;\n}\n/**\n * Detects support for options object argument in addEventListener.\n * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Safely_detecting_option_support\n * @private\n */ const supportsEventListenerOptions = function() {\n    let passiveSupported = false;\n    try {\n        const options = {\n            get passive () {\n                passiveSupported = true;\n                return false;\n            }\n        };\n        if (_isDomSupported()) {\n            window.addEventListener('test', null, options);\n            window.removeEventListener('test', null, options);\n        }\n    } catch (e) {\n    // continue regardless of error\n    }\n    return passiveSupported;\n}();\n/**\n * The \"used\" size is the final value of a dimension property after all calculations have\n * been performed. This method uses the computed style of `element` but returns undefined\n * if the computed style is not expressed in pixels. That can happen in some cases where\n * `element` has a size relative to its parent and this last one is not yet displayed,\n * for example because of `display: none` on a parent node.\n * @see https://developer.mozilla.org/en-US/docs/Web/CSS/used_value\n * @returns Size in pixels or undefined if unknown.\n */ function readUsedSize(element, property) {\n    const value = getStyle(element, property);\n    const matches = value && value.match(/^(\\d+)(\\.\\d+)?px$/);\n    return matches ? +matches[1] : undefined;\n}\n\n/**\n * @private\n */ function _pointInLine(p1, p2, t, mode) {\n    return {\n        x: p1.x + t * (p2.x - p1.x),\n        y: p1.y + t * (p2.y - p1.y)\n    };\n}\n/**\n * @private\n */ function _steppedInterpolation(p1, p2, t, mode) {\n    return {\n        x: p1.x + t * (p2.x - p1.x),\n        y: mode === 'middle' ? t < 0.5 ? p1.y : p2.y : mode === 'after' ? t < 1 ? p1.y : p2.y : t > 0 ? p2.y : p1.y\n    };\n}\n/**\n * @private\n */ function _bezierInterpolation(p1, p2, t, mode) {\n    const cp1 = {\n        x: p1.cp2x,\n        y: p1.cp2y\n    };\n    const cp2 = {\n        x: p2.cp1x,\n        y: p2.cp1y\n    };\n    const a = _pointInLine(p1, cp1, t);\n    const b = _pointInLine(cp1, cp2, t);\n    const c = _pointInLine(cp2, p2, t);\n    const d = _pointInLine(a, b, t);\n    const e = _pointInLine(b, c, t);\n    return _pointInLine(d, e, t);\n}\n\nconst getRightToLeftAdapter = function(rectX, width) {\n    return {\n        x (x) {\n            return rectX + rectX + width - x;\n        },\n        setWidth (w) {\n            width = w;\n        },\n        textAlign (align) {\n            if (align === 'center') {\n                return align;\n            }\n            return align === 'right' ? 'left' : 'right';\n        },\n        xPlus (x, value) {\n            return x - value;\n        },\n        leftForLtr (x, itemWidth) {\n            return x - itemWidth;\n        }\n    };\n};\nconst getLeftToRightAdapter = function() {\n    return {\n        x (x) {\n            return x;\n        },\n        setWidth (w) {},\n        textAlign (align) {\n            return align;\n        },\n        xPlus (x, value) {\n            return x + value;\n        },\n        leftForLtr (x, _itemWidth) {\n            return x;\n        }\n    };\n};\nfunction getRtlAdapter(rtl, rectX, width) {\n    return rtl ? getRightToLeftAdapter(rectX, width) : getLeftToRightAdapter();\n}\nfunction overrideTextDirection(ctx, direction) {\n    let style, original;\n    if (direction === 'ltr' || direction === 'rtl') {\n        style = ctx.canvas.style;\n        original = [\n            style.getPropertyValue('direction'),\n            style.getPropertyPriority('direction')\n        ];\n        style.setProperty('direction', direction, 'important');\n        ctx.prevTextDirection = original;\n    }\n}\nfunction restoreTextDirection(ctx, original) {\n    if (original !== undefined) {\n        delete ctx.prevTextDirection;\n        ctx.canvas.style.setProperty('direction', original[0], original[1]);\n    }\n}\n\nfunction propertyFn(property) {\n    if (property === 'angle') {\n        return {\n            between: _angleBetween,\n            compare: _angleDiff,\n            normalize: _normalizeAngle\n        };\n    }\n    return {\n        between: _isBetween,\n        compare: (a, b)=>a - b,\n        normalize: (x)=>x\n    };\n}\nfunction normalizeSegment({ start , end , count , loop , style  }) {\n    return {\n        start: start % count,\n        end: end % count,\n        loop: loop && (end - start + 1) % count === 0,\n        style\n    };\n}\nfunction getSegment(segment, points, bounds) {\n    const { property , start: startBound , end: endBound  } = bounds;\n    const { between , normalize  } = propertyFn(property);\n    const count = points.length;\n    let { start , end , loop  } = segment;\n    let i, ilen;\n    if (loop) {\n        start += count;\n        end += count;\n        for(i = 0, ilen = count; i < ilen; ++i){\n            if (!between(normalize(points[start % count][property]), startBound, endBound)) {\n                break;\n            }\n            start--;\n            end--;\n        }\n        start %= count;\n        end %= count;\n    }\n    if (end < start) {\n        end += count;\n    }\n    return {\n        start,\n        end,\n        loop,\n        style: segment.style\n    };\n}\n function _boundSegment(segment, points, bounds) {\n    if (!bounds) {\n        return [\n            segment\n        ];\n    }\n    const { property , start: startBound , end: endBound  } = bounds;\n    const count = points.length;\n    const { compare , between , normalize  } = propertyFn(property);\n    const { start , end , loop , style  } = getSegment(segment, points, bounds);\n    const result = [];\n    let inside = false;\n    let subStart = null;\n    let value, point, prevValue;\n    const startIsBefore = ()=>between(startBound, prevValue, value) && compare(startBound, prevValue) !== 0;\n    const endIsBefore = ()=>compare(endBound, value) === 0 || between(endBound, prevValue, value);\n    const shouldStart = ()=>inside || startIsBefore();\n    const shouldStop = ()=>!inside || endIsBefore();\n    for(let i = start, prev = start; i <= end; ++i){\n        point = points[i % count];\n        if (point.skip) {\n            continue;\n        }\n        value = normalize(point[property]);\n        if (value === prevValue) {\n            continue;\n        }\n        inside = between(value, startBound, endBound);\n        if (subStart === null && shouldStart()) {\n            subStart = compare(value, startBound) === 0 ? i : prev;\n        }\n        if (subStart !== null && shouldStop()) {\n            result.push(normalizeSegment({\n                start: subStart,\n                end: i,\n                loop,\n                count,\n                style\n            }));\n            subStart = null;\n        }\n        prev = i;\n        prevValue = value;\n    }\n    if (subStart !== null) {\n        result.push(normalizeSegment({\n            start: subStart,\n            end,\n            loop,\n            count,\n            style\n        }));\n    }\n    return result;\n}\n function _boundSegments(line, bounds) {\n    const result = [];\n    const segments = line.segments;\n    for(let i = 0; i < segments.length; i++){\n        const sub = _boundSegment(segments[i], line.points, bounds);\n        if (sub.length) {\n            result.push(...sub);\n        }\n    }\n    return result;\n}\n function findStartAndEnd(points, count, loop, spanGaps) {\n    let start = 0;\n    let end = count - 1;\n    if (loop && !spanGaps) {\n        while(start < count && !points[start].skip){\n            start++;\n        }\n    }\n    while(start < count && points[start].skip){\n        start++;\n    }\n    start %= count;\n    if (loop) {\n        end += start;\n    }\n    while(end > start && points[end % count].skip){\n        end--;\n    }\n    end %= count;\n    return {\n        start,\n        end\n    };\n}\n function solidSegments(points, start, max, loop) {\n    const count = points.length;\n    const result = [];\n    let last = start;\n    let prev = points[start];\n    let end;\n    for(end = start + 1; end <= max; ++end){\n        const cur = points[end % count];\n        if (cur.skip || cur.stop) {\n            if (!prev.skip) {\n                loop = false;\n                result.push({\n                    start: start % count,\n                    end: (end - 1) % count,\n                    loop\n                });\n                start = last = cur.stop ? end : null;\n            }\n        } else {\n            last = end;\n            if (prev.skip) {\n                start = end;\n            }\n        }\n        prev = cur;\n    }\n    if (last !== null) {\n        result.push({\n            start: start % count,\n            end: last % count,\n            loop\n        });\n    }\n    return result;\n}\n function _computeSegments(line, segmentOptions) {\n    const points = line.points;\n    const spanGaps = line.options.spanGaps;\n    const count = points.length;\n    if (!count) {\n        return [];\n    }\n    const loop = !!line._loop;\n    const { start , end  } = findStartAndEnd(points, count, loop, spanGaps);\n    if (spanGaps === true) {\n        return splitByStyles(line, [\n            {\n                start,\n                end,\n                loop\n            }\n        ], points, segmentOptions);\n    }\n    const max = end < start ? end + count : end;\n    const completeLoop = !!line._fullLoop && start === 0 && end === count - 1;\n    return splitByStyles(line, solidSegments(points, start, max, completeLoop), points, segmentOptions);\n}\n function splitByStyles(line, segments, points, segmentOptions) {\n    if (!segmentOptions || !segmentOptions.setContext || !points) {\n        return segments;\n    }\n    return doSplitByStyles(line, segments, points, segmentOptions);\n}\n function doSplitByStyles(line, segments, points, segmentOptions) {\n    const chartContext = line._chart.getContext();\n    const baseStyle = readStyle(line.options);\n    const { _datasetIndex: datasetIndex , options: { spanGaps  }  } = line;\n    const count = points.length;\n    const result = [];\n    let prevStyle = baseStyle;\n    let start = segments[0].start;\n    let i = start;\n    function addStyle(s, e, l, st) {\n        const dir = spanGaps ? -1 : 1;\n        if (s === e) {\n            return;\n        }\n        s += count;\n        while(points[s % count].skip){\n            s -= dir;\n        }\n        while(points[e % count].skip){\n            e += dir;\n        }\n        if (s % count !== e % count) {\n            result.push({\n                start: s % count,\n                end: e % count,\n                loop: l,\n                style: st\n            });\n            prevStyle = st;\n            start = e % count;\n        }\n    }\n    for (const segment of segments){\n        start = spanGaps ? start : segment.start;\n        let prev = points[start % count];\n        let style;\n        for(i = start + 1; i <= segment.end; i++){\n            const pt = points[i % count];\n            style = readStyle(segmentOptions.setContext(createContext(chartContext, {\n                type: 'segment',\n                p0: prev,\n                p1: pt,\n                p0DataIndex: (i - 1) % count,\n                p1DataIndex: i % count,\n                datasetIndex\n            })));\n            if (styleChanged(style, prevStyle)) {\n                addStyle(start, i - 1, segment.loop, prevStyle);\n            }\n            prev = pt;\n            prevStyle = style;\n        }\n        if (start < i - 1) {\n            addStyle(start, i - 1, segment.loop, prevStyle);\n        }\n    }\n    return result;\n}\nfunction readStyle(options) {\n    return {\n        backgroundColor: options.backgroundColor,\n        borderCapStyle: options.borderCapStyle,\n        borderDash: options.borderDash,\n        borderDashOffset: options.borderDashOffset,\n        borderJoinStyle: options.borderJoinStyle,\n        borderWidth: options.borderWidth,\n        borderColor: options.borderColor\n    };\n}\nfunction styleChanged(style, prevStyle) {\n    if (!prevStyle) {\n        return false;\n    }\n    const cache = [];\n    const replacer = function(key, value) {\n        if (!isPatternOrGradient(value)) {\n            return value;\n        }\n        if (!cache.includes(value)) {\n            cache.push(value);\n        }\n        return cache.indexOf(value);\n    };\n    return JSON.stringify(style, replacer) !== JSON.stringify(prevStyle, replacer);\n}\n\nexport { unclipArea as $, _rlookupByKey as A, _lookupByKey as B, _isPointInArea as C, getAngleFromPoint as D, toPadding as E, each as F, getMaximumSize as G, HALF_PI as H, _getParentNode as I, readUsedSize as J, supportsEventListenerOptions as K, throttled as L, _isDomSupported as M, _factorize as N, finiteOrDefault as O, PI as P, callback as Q, _addGrace as R, _limitValue as S, TAU as T, toDegrees as U, _measureText as V, _int16Range as W, _alignPixel as X, clipArea as Y, renderText as Z, _arrayUnique as _, resolve as a, fontString as a$, toFont as a0, _toLeftRightCenter as a1, _alignStartEnd as a2, overrides as a3, merge as a4, _capitalize as a5, descriptors as a6, isFunction as a7, _attachContext as a8, _createResolver as a9, overrideTextDirection as aA, _textX as aB, restoreTextDirection as aC, drawPointLegend as aD, distanceBetweenPoints as aE, noop as aF, _setMinAndMaxByKey as aG, niceNum as aH, almostWhole as aI, almostEquals as aJ, _decimalPlaces as aK, Ticks as aL, log10 as aM, _longestText as aN, _filterBetween as aO, _lookup as aP, isPatternOrGradient as aQ, getHoverColor as aR, clone as aS, _merger as aT, _mergerIf as aU, _deprecated as aV, _splitKey as aW, toFontString as aX, splineCurve as aY, splineCurveMonotone as aZ, getStyle as a_, _descriptors as aa, mergeIf as ab, uid as ac, debounce as ad, retinaScale as ae, clearCanvas as af, setsEqual as ag, _elementsEqual as ah, _isClickEvent as ai, _isBetween as aj, _readValueToProps as ak, _updateBezierControlPoints as al, _computeSegments as am, _boundSegments as an, _steppedInterpolation as ao, _bezierInterpolation as ap, _pointInLine as aq, _steppedLineTo as ar, _bezierCurveTo as as, drawPoint as at, addRoundedRectPath as au, toTRBL as av, toTRBLCorners as aw, _boundSegment as ax, _normalizeAngle as ay, getRtlAdapter as az, isArray as b, toLineHeight as b0, PITAU as b1, INFINITY as b2, RAD_PER_DEG as b3, QUARTER_PI as b4, TWO_THIRDS_PI as b5, _angleDiff as b6, color as c, defaults as d, effects as e, resolveObjectKey as f, isNumberFinite as g, defined as h, isObject as i, createContext as j, isNullOrUndef as k, listenArrayEvents as l, toPercentage as m, toDimension as n, formatNumber as o, _angleBetween as p, _getStartAndCountOfVisiblePoints as q, requestAnimFrame as r, sign as s, toRadians as t, unlistenArrayEvents as u, valueOrDefault as v, _scaleRangesChanged as w, isNumber as x, _parseObjectDataRadialScale as y, getRelativePosition as z };\n//# sourceMappingURL=helpers.segment.js.map\n","/*!\n * Chart.js v4.4.2\n * https://www.chartjs.org\n * (c) 2024 Chart.js Contributors\n * Released under the MIT License\n */\nimport { r as requestAnimFrame, a as resolve, e as effects, c as color, i as isObject, d as defaults, b as isArray, v as valueOrDefault, u as unlistenArrayEvents, l as listenArrayEvents, f as resolveObjectKey, g as isNumberFinite, h as defined, s as sign, j as createContext, k as isNullOrUndef, _ as _arrayUnique, t as toRadians, m as toPercentage, n as toDimension, T as TAU, o as formatNumber, p as _angleBetween, H as HALF_PI, P as PI, q as _getStartAndCountOfVisiblePoints, w as _scaleRangesChanged, x as isNumber, y as _parseObjectDataRadialScale, z as getRelativePosition, A as _rlookupByKey, B as _lookupByKey, C as _isPointInArea, D as getAngleFromPoint, E as toPadding, F as each, G as getMaximumSize, I as _getParentNode, J as readUsedSize, K as supportsEventListenerOptions, L as throttled, M as _isDomSupported, N as _factorize, O as finiteOrDefault, Q as callback, R as _addGrace, S as _limitValue, U as toDegrees, V as _measureText, W as _int16Range, X as _alignPixel, Y as clipArea, Z as renderText, $ as unclipArea, a0 as toFont, a1 as _toLeftRightCenter, a2 as _alignStartEnd, a3 as overrides, a4 as merge, a5 as _capitalize, a6 as descriptors, a7 as isFunction, a8 as _attachContext, a9 as _createResolver, aa as _descriptors, ab as mergeIf, ac as uid, ad as debounce, ae as retinaScale, af as clearCanvas, ag as setsEqual, ah as _elementsEqual, ai as _isClickEvent, aj as _isBetween, ak as _readValueToProps, al as _updateBezierControlPoints, am as _computeSegments, an as _boundSegments, ao as _steppedInterpolation, ap as _bezierInterpolation, aq as _pointInLine, ar as _steppedLineTo, as as _bezierCurveTo, at as drawPoint, au as addRoundedRectPath, av as toTRBL, aw as toTRBLCorners, ax as _boundSegment, ay as _normalizeAngle, az as getRtlAdapter, aA as overrideTextDirection, aB as _textX, aC as restoreTextDirection, aD as drawPointLegend, aE as distanceBetweenPoints, aF as noop, aG as _setMinAndMaxByKey, aH as niceNum, aI as almostWhole, aJ as almostEquals, aK as _decimalPlaces, aL as Ticks, aM as log10, aN as _longestText, aO as _filterBetween, aP as _lookup } from './chunks/helpers.segment.js';\nimport '@kurkle/color';\n\nclass Animator {\n    constructor(){\n        this._request = null;\n        this._charts = new Map();\n        this._running = false;\n        this._lastDate = undefined;\n    }\n _notify(chart, anims, date, type) {\n        const callbacks = anims.listeners[type];\n        const numSteps = anims.duration;\n        callbacks.forEach((fn)=>fn({\n                chart,\n                initial: anims.initial,\n                numSteps,\n                currentStep: Math.min(date - anims.start, numSteps)\n            }));\n    }\n _refresh() {\n        if (this._request) {\n            return;\n        }\n        this._running = true;\n        this._request = requestAnimFrame.call(window, ()=>{\n            this._update();\n            this._request = null;\n            if (this._running) {\n                this._refresh();\n            }\n        });\n    }\n _update(date = Date.now()) {\n        let remaining = 0;\n        this._charts.forEach((anims, chart)=>{\n            if (!anims.running || !anims.items.length) {\n                return;\n            }\n            const items = anims.items;\n            let i = items.length - 1;\n            let draw = false;\n            let item;\n            for(; i >= 0; --i){\n                item = items[i];\n                if (item._active) {\n                    if (item._total > anims.duration) {\n                        anims.duration = item._total;\n                    }\n                    item.tick(date);\n                    draw = true;\n                } else {\n                    items[i] = items[items.length - 1];\n                    items.pop();\n                }\n            }\n            if (draw) {\n                chart.draw();\n                this._notify(chart, anims, date, 'progress');\n            }\n            if (!items.length) {\n                anims.running = false;\n                this._notify(chart, anims, date, 'complete');\n                anims.initial = false;\n            }\n            remaining += items.length;\n        });\n        this._lastDate = date;\n        if (remaining === 0) {\n            this._running = false;\n        }\n    }\n _getAnims(chart) {\n        const charts = this._charts;\n        let anims = charts.get(chart);\n        if (!anims) {\n            anims = {\n                running: false,\n                initial: true,\n                items: [],\n                listeners: {\n                    complete: [],\n                    progress: []\n                }\n            };\n            charts.set(chart, anims);\n        }\n        return anims;\n    }\n listen(chart, event, cb) {\n        this._getAnims(chart).listeners[event].push(cb);\n    }\n add(chart, items) {\n        if (!items || !items.length) {\n            return;\n        }\n        this._getAnims(chart).items.push(...items);\n    }\n has(chart) {\n        return this._getAnims(chart).items.length > 0;\n    }\n start(chart) {\n        const anims = this._charts.get(chart);\n        if (!anims) {\n            return;\n        }\n        anims.running = true;\n        anims.start = Date.now();\n        anims.duration = anims.items.reduce((acc, cur)=>Math.max(acc, cur._duration), 0);\n        this._refresh();\n    }\n    running(chart) {\n        if (!this._running) {\n            return false;\n        }\n        const anims = this._charts.get(chart);\n        if (!anims || !anims.running || !anims.items.length) {\n            return false;\n        }\n        return true;\n    }\n stop(chart) {\n        const anims = this._charts.get(chart);\n        if (!anims || !anims.items.length) {\n            return;\n        }\n        const items = anims.items;\n        let i = items.length - 1;\n        for(; i >= 0; --i){\n            items[i].cancel();\n        }\n        anims.items = [];\n        this._notify(chart, anims, Date.now(), 'complete');\n    }\n remove(chart) {\n        return this._charts.delete(chart);\n    }\n}\nvar animator = /* #__PURE__ */ new Animator();\n\nconst transparent = 'transparent';\nconst interpolators = {\n    boolean (from, to, factor) {\n        return factor > 0.5 ? to : from;\n    },\n color (from, to, factor) {\n        const c0 = color(from || transparent);\n        const c1 = c0.valid && color(to || transparent);\n        return c1 && c1.valid ? c1.mix(c0, factor).hexString() : to;\n    },\n    number (from, to, factor) {\n        return from + (to - from) * factor;\n    }\n};\nclass Animation {\n    constructor(cfg, target, prop, to){\n        const currentValue = target[prop];\n        to = resolve([\n            cfg.to,\n            to,\n            currentValue,\n            cfg.from\n        ]);\n        const from = resolve([\n            cfg.from,\n            currentValue,\n            to\n        ]);\n        this._active = true;\n        this._fn = cfg.fn || interpolators[cfg.type || typeof from];\n        this._easing = effects[cfg.easing] || effects.linear;\n        this._start = Math.floor(Date.now() + (cfg.delay || 0));\n        this._duration = this._total = Math.floor(cfg.duration);\n        this._loop = !!cfg.loop;\n        this._target = target;\n        this._prop = prop;\n        this._from = from;\n        this._to = to;\n        this._promises = undefined;\n    }\n    active() {\n        return this._active;\n    }\n    update(cfg, to, date) {\n        if (this._active) {\n            this._notify(false);\n            const currentValue = this._target[this._prop];\n            const elapsed = date - this._start;\n            const remain = this._duration - elapsed;\n            this._start = date;\n            this._duration = Math.floor(Math.max(remain, cfg.duration));\n            this._total += elapsed;\n            this._loop = !!cfg.loop;\n            this._to = resolve([\n                cfg.to,\n                to,\n                currentValue,\n                cfg.from\n            ]);\n            this._from = resolve([\n                cfg.from,\n                currentValue,\n                to\n            ]);\n        }\n    }\n    cancel() {\n        if (this._active) {\n            this.tick(Date.now());\n            this._active = false;\n            this._notify(false);\n        }\n    }\n    tick(date) {\n        const elapsed = date - this._start;\n        const duration = this._duration;\n        const prop = this._prop;\n        const from = this._from;\n        const loop = this._loop;\n        const to = this._to;\n        let factor;\n        this._active = from !== to && (loop || elapsed < duration);\n        if (!this._active) {\n            this._target[prop] = to;\n            this._notify(true);\n            return;\n        }\n        if (elapsed < 0) {\n            this._target[prop] = from;\n            return;\n        }\n        factor = elapsed / duration % 2;\n        factor = loop && factor > 1 ? 2 - factor : factor;\n        factor = this._easing(Math.min(1, Math.max(0, factor)));\n        this._target[prop] = this._fn(from, to, factor);\n    }\n    wait() {\n        const promises = this._promises || (this._promises = []);\n        return new Promise((res, rej)=>{\n            promises.push({\n                res,\n                rej\n            });\n        });\n    }\n    _notify(resolved) {\n        const method = resolved ? 'res' : 'rej';\n        const promises = this._promises || [];\n        for(let i = 0; i < promises.length; i++){\n            promises[i][method]();\n        }\n    }\n}\n\nclass Animations {\n    constructor(chart, config){\n        this._chart = chart;\n        this._properties = new Map();\n        this.configure(config);\n    }\n    configure(config) {\n        if (!isObject(config)) {\n            return;\n        }\n        const animationOptions = Object.keys(defaults.animation);\n        const animatedProps = this._properties;\n        Object.getOwnPropertyNames(config).forEach((key)=>{\n            const cfg = config[key];\n            if (!isObject(cfg)) {\n                return;\n            }\n            const resolved = {};\n            for (const option of animationOptions){\n                resolved[option] = cfg[option];\n            }\n            (isArray(cfg.properties) && cfg.properties || [\n                key\n            ]).forEach((prop)=>{\n                if (prop === key || !animatedProps.has(prop)) {\n                    animatedProps.set(prop, resolved);\n                }\n            });\n        });\n    }\n _animateOptions(target, values) {\n        const newOptions = values.options;\n        const options = resolveTargetOptions(target, newOptions);\n        if (!options) {\n            return [];\n        }\n        const animations = this._createAnimations(options, newOptions);\n        if (newOptions.$shared) {\n            awaitAll(target.options.$animations, newOptions).then(()=>{\n                target.options = newOptions;\n            }, ()=>{\n            });\n        }\n        return animations;\n    }\n _createAnimations(target, values) {\n        const animatedProps = this._properties;\n        const animations = [];\n        const running = target.$animations || (target.$animations = {});\n        const props = Object.keys(values);\n        const date = Date.now();\n        let i;\n        for(i = props.length - 1; i >= 0; --i){\n            const prop = props[i];\n            if (prop.charAt(0) === '$') {\n                continue;\n            }\n            if (prop === 'options') {\n                animations.push(...this._animateOptions(target, values));\n                continue;\n            }\n            const value = values[prop];\n            let animation = running[prop];\n            const cfg = animatedProps.get(prop);\n            if (animation) {\n                if (cfg && animation.active()) {\n                    animation.update(cfg, value, date);\n                    continue;\n                } else {\n                    animation.cancel();\n                }\n            }\n            if (!cfg || !cfg.duration) {\n                target[prop] = value;\n                continue;\n            }\n            running[prop] = animation = new Animation(cfg, target, prop, value);\n            animations.push(animation);\n        }\n        return animations;\n    }\n update(target, values) {\n        if (this._properties.size === 0) {\n            Object.assign(target, values);\n            return;\n        }\n        const animations = this._createAnimations(target, values);\n        if (animations.length) {\n            animator.add(this._chart, animations);\n            return true;\n        }\n    }\n}\nfunction awaitAll(animations, properties) {\n    const running = [];\n    const keys = Object.keys(properties);\n    for(let i = 0; i < keys.length; i++){\n        const anim = animations[keys[i]];\n        if (anim && anim.active()) {\n            running.push(anim.wait());\n        }\n    }\n    return Promise.all(running);\n}\nfunction resolveTargetOptions(target, newOptions) {\n    if (!newOptions) {\n        return;\n    }\n    let options = target.options;\n    if (!options) {\n        target.options = newOptions;\n        return;\n    }\n    if (options.$shared) {\n        target.options = options = Object.assign({}, options, {\n            $shared: false,\n            $animations: {}\n        });\n    }\n    return options;\n}\n\nfunction scaleClip(scale, allowedOverflow) {\n    const opts = scale && scale.options || {};\n    const reverse = opts.reverse;\n    const min = opts.min === undefined ? allowedOverflow : 0;\n    const max = opts.max === undefined ? allowedOverflow : 0;\n    return {\n        start: reverse ? max : min,\n        end: reverse ? min : max\n    };\n}\nfunction defaultClip(xScale, yScale, allowedOverflow) {\n    if (allowedOverflow === false) {\n        return false;\n    }\n    const x = scaleClip(xScale, allowedOverflow);\n    const y = scaleClip(yScale, allowedOverflow);\n    return {\n        top: y.end,\n        right: x.end,\n        bottom: y.start,\n        left: x.start\n    };\n}\nfunction toClip(value) {\n    let t, r, b, l;\n    if (isObject(value)) {\n        t = value.top;\n        r = value.right;\n        b = value.bottom;\n        l = value.left;\n    } else {\n        t = r = b = l = value;\n    }\n    return {\n        top: t,\n        right: r,\n        bottom: b,\n        left: l,\n        disabled: value === false\n    };\n}\nfunction getSortedDatasetIndices(chart, filterVisible) {\n    const keys = [];\n    const metasets = chart._getSortedDatasetMetas(filterVisible);\n    let i, ilen;\n    for(i = 0, ilen = metasets.length; i < ilen; ++i){\n        keys.push(metasets[i].index);\n    }\n    return keys;\n}\nfunction applyStack(stack, value, dsIndex, options = {}) {\n    const keys = stack.keys;\n    const singleMode = options.mode === 'single';\n    let i, ilen, datasetIndex, otherValue;\n    if (value === null) {\n        return;\n    }\n    for(i = 0, ilen = keys.length; i < ilen; ++i){\n        datasetIndex = +keys[i];\n        if (datasetIndex === dsIndex) {\n            if (options.all) {\n                continue;\n            }\n            break;\n        }\n        otherValue = stack.values[datasetIndex];\n        if (isNumberFinite(otherValue) && (singleMode || value === 0 || sign(value) === sign(otherValue))) {\n            value += otherValue;\n        }\n    }\n    return value;\n}\nfunction convertObjectDataToArray(data) {\n    const keys = Object.keys(data);\n    const adata = new Array(keys.length);\n    let i, ilen, key;\n    for(i = 0, ilen = keys.length; i < ilen; ++i){\n        key = keys[i];\n        adata[i] = {\n            x: key,\n            y: data[key]\n        };\n    }\n    return adata;\n}\nfunction isStacked(scale, meta) {\n    const stacked = scale && scale.options.stacked;\n    return stacked || stacked === undefined && meta.stack !== undefined;\n}\nfunction getStackKey(indexScale, valueScale, meta) {\n    return `${indexScale.id}.${valueScale.id}.${meta.stack || meta.type}`;\n}\nfunction getUserBounds(scale) {\n    const { min , max , minDefined , maxDefined  } = scale.getUserBounds();\n    return {\n        min: minDefined ? min : Number.NEGATIVE_INFINITY,\n        max: maxDefined ? max : Number.POSITIVE_INFINITY\n    };\n}\nfunction getOrCreateStack(stacks, stackKey, indexValue) {\n    const subStack = stacks[stackKey] || (stacks[stackKey] = {});\n    return subStack[indexValue] || (subStack[indexValue] = {});\n}\nfunction getLastIndexInStack(stack, vScale, positive, type) {\n    for (const meta of vScale.getMatchingVisibleMetas(type).reverse()){\n        const value = stack[meta.index];\n        if (positive && value > 0 || !positive && value < 0) {\n            return meta.index;\n        }\n    }\n    return null;\n}\nfunction updateStacks(controller, parsed) {\n    const { chart , _cachedMeta: meta  } = controller;\n    const stacks = chart._stacks || (chart._stacks = {});\n    const { iScale , vScale , index: datasetIndex  } = meta;\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const key = getStackKey(iScale, vScale, meta);\n    const ilen = parsed.length;\n    let stack;\n    for(let i = 0; i < ilen; ++i){\n        const item = parsed[i];\n        const { [iAxis]: index , [vAxis]: value  } = item;\n        const itemStacks = item._stacks || (item._stacks = {});\n        stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, index);\n        stack[datasetIndex] = value;\n        stack._top = getLastIndexInStack(stack, vScale, true, meta.type);\n        stack._bottom = getLastIndexInStack(stack, vScale, false, meta.type);\n        const visualValues = stack._visualValues || (stack._visualValues = {});\n        visualValues[datasetIndex] = value;\n    }\n}\nfunction getFirstScaleId(chart, axis) {\n    const scales = chart.scales;\n    return Object.keys(scales).filter((key)=>scales[key].axis === axis).shift();\n}\nfunction createDatasetContext(parent, index) {\n    return createContext(parent, {\n        active: false,\n        dataset: undefined,\n        datasetIndex: index,\n        index,\n        mode: 'default',\n        type: 'dataset'\n    });\n}\nfunction createDataContext(parent, index, element) {\n    return createContext(parent, {\n        active: false,\n        dataIndex: index,\n        parsed: undefined,\n        raw: undefined,\n        element,\n        index,\n        mode: 'default',\n        type: 'data'\n    });\n}\nfunction clearStacks(meta, items) {\n    const datasetIndex = meta.controller.index;\n    const axis = meta.vScale && meta.vScale.axis;\n    if (!axis) {\n        return;\n    }\n    items = items || meta._parsed;\n    for (const parsed of items){\n        const stacks = parsed._stacks;\n        if (!stacks || stacks[axis] === undefined || stacks[axis][datasetIndex] === undefined) {\n            return;\n        }\n        delete stacks[axis][datasetIndex];\n        if (stacks[axis]._visualValues !== undefined && stacks[axis]._visualValues[datasetIndex] !== undefined) {\n            delete stacks[axis]._visualValues[datasetIndex];\n        }\n    }\n}\nconst isDirectUpdateMode = (mode)=>mode === 'reset' || mode === 'none';\nconst cloneIfNotShared = (cached, shared)=>shared ? cached : Object.assign({}, cached);\nconst createStack = (canStack, meta, chart)=>canStack && !meta.hidden && meta._stacked && {\n        keys: getSortedDatasetIndices(chart, true),\n        values: null\n    };\nclass DatasetController {\n static defaults = {};\n static datasetElementType = null;\n static dataElementType = null;\n constructor(chart, datasetIndex){\n        this.chart = chart;\n        this._ctx = chart.ctx;\n        this.index = datasetIndex;\n        this._cachedDataOpts = {};\n        this._cachedMeta = this.getMeta();\n        this._type = this._cachedMeta.type;\n        this.options = undefined;\n         this._parsing = false;\n        this._data = undefined;\n        this._objectData = undefined;\n        this._sharedOptions = undefined;\n        this._drawStart = undefined;\n        this._drawCount = undefined;\n        this.enableOptionSharing = false;\n        this.supportsDecimation = false;\n        this.$context = undefined;\n        this._syncList = [];\n        this.datasetElementType = new.target.datasetElementType;\n        this.dataElementType = new.target.dataElementType;\n        this.initialize();\n    }\n    initialize() {\n        const meta = this._cachedMeta;\n        this.configure();\n        this.linkScales();\n        meta._stacked = isStacked(meta.vScale, meta);\n        this.addElements();\n        if (this.options.fill && !this.chart.isPluginEnabled('filler')) {\n            console.warn(\"Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options\");\n        }\n    }\n    updateIndex(datasetIndex) {\n        if (this.index !== datasetIndex) {\n            clearStacks(this._cachedMeta);\n        }\n        this.index = datasetIndex;\n    }\n    linkScales() {\n        const chart = this.chart;\n        const meta = this._cachedMeta;\n        const dataset = this.getDataset();\n        const chooseId = (axis, x, y, r)=>axis === 'x' ? x : axis === 'r' ? r : y;\n        const xid = meta.xAxisID = valueOrDefault(dataset.xAxisID, getFirstScaleId(chart, 'x'));\n        const yid = meta.yAxisID = valueOrDefault(dataset.yAxisID, getFirstScaleId(chart, 'y'));\n        const rid = meta.rAxisID = valueOrDefault(dataset.rAxisID, getFirstScaleId(chart, 'r'));\n        const indexAxis = meta.indexAxis;\n        const iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);\n        const vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);\n        meta.xScale = this.getScaleForId(xid);\n        meta.yScale = this.getScaleForId(yid);\n        meta.rScale = this.getScaleForId(rid);\n        meta.iScale = this.getScaleForId(iid);\n        meta.vScale = this.getScaleForId(vid);\n    }\n    getDataset() {\n        return this.chart.data.datasets[this.index];\n    }\n    getMeta() {\n        return this.chart.getDatasetMeta(this.index);\n    }\n getScaleForId(scaleID) {\n        return this.chart.scales[scaleID];\n    }\n _getOtherScale(scale) {\n        const meta = this._cachedMeta;\n        return scale === meta.iScale ? meta.vScale : meta.iScale;\n    }\n    reset() {\n        this._update('reset');\n    }\n _destroy() {\n        const meta = this._cachedMeta;\n        if (this._data) {\n            unlistenArrayEvents(this._data, this);\n        }\n        if (meta._stacked) {\n            clearStacks(meta);\n        }\n    }\n _dataCheck() {\n        const dataset = this.getDataset();\n        const data = dataset.data || (dataset.data = []);\n        const _data = this._data;\n        if (isObject(data)) {\n            this._data = convertObjectDataToArray(data);\n        } else if (_data !== data) {\n            if (_data) {\n                unlistenArrayEvents(_data, this);\n                const meta = this._cachedMeta;\n                clearStacks(meta);\n                meta._parsed = [];\n            }\n            if (data && Object.isExtensible(data)) {\n                listenArrayEvents(data, this);\n            }\n            this._syncList = [];\n            this._data = data;\n        }\n    }\n    addElements() {\n        const meta = this._cachedMeta;\n        this._dataCheck();\n        if (this.datasetElementType) {\n            meta.dataset = new this.datasetElementType();\n        }\n    }\n    buildOrUpdateElements(resetNewElements) {\n        const meta = this._cachedMeta;\n        const dataset = this.getDataset();\n        let stackChanged = false;\n        this._dataCheck();\n        const oldStacked = meta._stacked;\n        meta._stacked = isStacked(meta.vScale, meta);\n        if (meta.stack !== dataset.stack) {\n            stackChanged = true;\n            clearStacks(meta);\n            meta.stack = dataset.stack;\n        }\n        this._resyncElements(resetNewElements);\n        if (stackChanged || oldStacked !== meta._stacked) {\n            updateStacks(this, meta._parsed);\n        }\n    }\n configure() {\n        const config = this.chart.config;\n        const scopeKeys = config.datasetScopeKeys(this._type);\n        const scopes = config.getOptionScopes(this.getDataset(), scopeKeys, true);\n        this.options = config.createResolver(scopes, this.getContext());\n        this._parsing = this.options.parsing;\n        this._cachedDataOpts = {};\n    }\n parse(start, count) {\n        const { _cachedMeta: meta , _data: data  } = this;\n        const { iScale , _stacked  } = meta;\n        const iAxis = iScale.axis;\n        let sorted = start === 0 && count === data.length ? true : meta._sorted;\n        let prev = start > 0 && meta._parsed[start - 1];\n        let i, cur, parsed;\n        if (this._parsing === false) {\n            meta._parsed = data;\n            meta._sorted = true;\n            parsed = data;\n        } else {\n            if (isArray(data[start])) {\n                parsed = this.parseArrayData(meta, data, start, count);\n            } else if (isObject(data[start])) {\n                parsed = this.parseObjectData(meta, data, start, count);\n            } else {\n                parsed = this.parsePrimitiveData(meta, data, start, count);\n            }\n            const isNotInOrderComparedToPrev = ()=>cur[iAxis] === null || prev && cur[iAxis] < prev[iAxis];\n            for(i = 0; i < count; ++i){\n                meta._parsed[i + start] = cur = parsed[i];\n                if (sorted) {\n                    if (isNotInOrderComparedToPrev()) {\n                        sorted = false;\n                    }\n                    prev = cur;\n                }\n            }\n            meta._sorted = sorted;\n        }\n        if (_stacked) {\n            updateStacks(this, parsed);\n        }\n    }\n parsePrimitiveData(meta, data, start, count) {\n        const { iScale , vScale  } = meta;\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        const labels = iScale.getLabels();\n        const singleScale = iScale === vScale;\n        const parsed = new Array(count);\n        let i, ilen, index;\n        for(i = 0, ilen = count; i < ilen; ++i){\n            index = i + start;\n            parsed[i] = {\n                [iAxis]: singleScale || iScale.parse(labels[index], index),\n                [vAxis]: vScale.parse(data[index], index)\n            };\n        }\n        return parsed;\n    }\n parseArrayData(meta, data, start, count) {\n        const { xScale , yScale  } = meta;\n        const parsed = new Array(count);\n        let i, ilen, index, item;\n        for(i = 0, ilen = count; i < ilen; ++i){\n            index = i + start;\n            item = data[index];\n            parsed[i] = {\n                x: xScale.parse(item[0], index),\n                y: yScale.parse(item[1], index)\n            };\n        }\n        return parsed;\n    }\n parseObjectData(meta, data, start, count) {\n        const { xScale , yScale  } = meta;\n        const { xAxisKey ='x' , yAxisKey ='y'  } = this._parsing;\n        const parsed = new Array(count);\n        let i, ilen, index, item;\n        for(i = 0, ilen = count; i < ilen; ++i){\n            index = i + start;\n            item = data[index];\n            parsed[i] = {\n                x: xScale.parse(resolveObjectKey(item, xAxisKey), index),\n                y: yScale.parse(resolveObjectKey(item, yAxisKey), index)\n            };\n        }\n        return parsed;\n    }\n getParsed(index) {\n        return this._cachedMeta._parsed[index];\n    }\n getDataElement(index) {\n        return this._cachedMeta.data[index];\n    }\n applyStack(scale, parsed, mode) {\n        const chart = this.chart;\n        const meta = this._cachedMeta;\n        const value = parsed[scale.axis];\n        const stack = {\n            keys: getSortedDatasetIndices(chart, true),\n            values: parsed._stacks[scale.axis]._visualValues\n        };\n        return applyStack(stack, value, meta.index, {\n            mode\n        });\n    }\n updateRangeFromParsed(range, scale, parsed, stack) {\n        const parsedValue = parsed[scale.axis];\n        let value = parsedValue === null ? NaN : parsedValue;\n        const values = stack && parsed._stacks[scale.axis];\n        if (stack && values) {\n            stack.values = values;\n            value = applyStack(stack, parsedValue, this._cachedMeta.index);\n        }\n        range.min = Math.min(range.min, value);\n        range.max = Math.max(range.max, value);\n    }\n getMinMax(scale, canStack) {\n        const meta = this._cachedMeta;\n        const _parsed = meta._parsed;\n        const sorted = meta._sorted && scale === meta.iScale;\n        const ilen = _parsed.length;\n        const otherScale = this._getOtherScale(scale);\n        const stack = createStack(canStack, meta, this.chart);\n        const range = {\n            min: Number.POSITIVE_INFINITY,\n            max: Number.NEGATIVE_INFINITY\n        };\n        const { min: otherMin , max: otherMax  } = getUserBounds(otherScale);\n        let i, parsed;\n        function _skip() {\n            parsed = _parsed[i];\n            const otherValue = parsed[otherScale.axis];\n            return !isNumberFinite(parsed[scale.axis]) || otherMin > otherValue || otherMax < otherValue;\n        }\n        for(i = 0; i < ilen; ++i){\n            if (_skip()) {\n                continue;\n            }\n            this.updateRangeFromParsed(range, scale, parsed, stack);\n            if (sorted) {\n                break;\n            }\n        }\n        if (sorted) {\n            for(i = ilen - 1; i >= 0; --i){\n                if (_skip()) {\n                    continue;\n                }\n                this.updateRangeFromParsed(range, scale, parsed, stack);\n                break;\n            }\n        }\n        return range;\n    }\n    getAllParsedValues(scale) {\n        const parsed = this._cachedMeta._parsed;\n        const values = [];\n        let i, ilen, value;\n        for(i = 0, ilen = parsed.length; i < ilen; ++i){\n            value = parsed[i][scale.axis];\n            if (isNumberFinite(value)) {\n                values.push(value);\n            }\n        }\n        return values;\n    }\n getMaxOverflow() {\n        return false;\n    }\n getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const iScale = meta.iScale;\n        const vScale = meta.vScale;\n        const parsed = this.getParsed(index);\n        return {\n            label: iScale ? '' + iScale.getLabelForValue(parsed[iScale.axis]) : '',\n            value: vScale ? '' + vScale.getLabelForValue(parsed[vScale.axis]) : ''\n        };\n    }\n _update(mode) {\n        const meta = this._cachedMeta;\n        this.update(mode || 'default');\n        meta._clip = toClip(valueOrDefault(this.options.clip, defaultClip(meta.xScale, meta.yScale, this.getMaxOverflow())));\n    }\n update(mode) {}\n    draw() {\n        const ctx = this._ctx;\n        const chart = this.chart;\n        const meta = this._cachedMeta;\n        const elements = meta.data || [];\n        const area = chart.chartArea;\n        const active = [];\n        const start = this._drawStart || 0;\n        const count = this._drawCount || elements.length - start;\n        const drawActiveElementsOnTop = this.options.drawActiveElementsOnTop;\n        let i;\n        if (meta.dataset) {\n            meta.dataset.draw(ctx, area, start, count);\n        }\n        for(i = start; i < start + count; ++i){\n            const element = elements[i];\n            if (element.hidden) {\n                continue;\n            }\n            if (element.active && drawActiveElementsOnTop) {\n                active.push(element);\n            } else {\n                element.draw(ctx, area);\n            }\n        }\n        for(i = 0; i < active.length; ++i){\n            active[i].draw(ctx, area);\n        }\n    }\n getStyle(index, active) {\n        const mode = active ? 'active' : 'default';\n        return index === undefined && this._cachedMeta.dataset ? this.resolveDatasetElementOptions(mode) : this.resolveDataElementOptions(index || 0, mode);\n    }\n getContext(index, active, mode) {\n        const dataset = this.getDataset();\n        let context;\n        if (index >= 0 && index < this._cachedMeta.data.length) {\n            const element = this._cachedMeta.data[index];\n            context = element.$context || (element.$context = createDataContext(this.getContext(), index, element));\n            context.parsed = this.getParsed(index);\n            context.raw = dataset.data[index];\n            context.index = context.dataIndex = index;\n        } else {\n            context = this.$context || (this.$context = createDatasetContext(this.chart.getContext(), this.index));\n            context.dataset = dataset;\n            context.index = context.datasetIndex = this.index;\n        }\n        context.active = !!active;\n        context.mode = mode;\n        return context;\n    }\n resolveDatasetElementOptions(mode) {\n        return this._resolveElementOptions(this.datasetElementType.id, mode);\n    }\n resolveDataElementOptions(index, mode) {\n        return this._resolveElementOptions(this.dataElementType.id, mode, index);\n    }\n _resolveElementOptions(elementType, mode = 'default', index) {\n        const active = mode === 'active';\n        const cache = this._cachedDataOpts;\n        const cacheKey = elementType + '-' + mode;\n        const cached = cache[cacheKey];\n        const sharing = this.enableOptionSharing && defined(index);\n        if (cached) {\n            return cloneIfNotShared(cached, sharing);\n        }\n        const config = this.chart.config;\n        const scopeKeys = config.datasetElementScopeKeys(this._type, elementType);\n        const prefixes = active ? [\n            `${elementType}Hover`,\n            'hover',\n            elementType,\n            ''\n        ] : [\n            elementType,\n            ''\n        ];\n        const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n        const names = Object.keys(defaults.elements[elementType]);\n        const context = ()=>this.getContext(index, active, mode);\n        const values = config.resolveNamedOptions(scopes, names, context, prefixes);\n        if (values.$shared) {\n            values.$shared = sharing;\n            cache[cacheKey] = Object.freeze(cloneIfNotShared(values, sharing));\n        }\n        return values;\n    }\n _resolveAnimations(index, transition, active) {\n        const chart = this.chart;\n        const cache = this._cachedDataOpts;\n        const cacheKey = `animation-${transition}`;\n        const cached = cache[cacheKey];\n        if (cached) {\n            return cached;\n        }\n        let options;\n        if (chart.options.animation !== false) {\n            const config = this.chart.config;\n            const scopeKeys = config.datasetAnimationScopeKeys(this._type, transition);\n            const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n            options = config.createResolver(scopes, this.getContext(index, active, transition));\n        }\n        const animations = new Animations(chart, options && options.animations);\n        if (options && options._cacheable) {\n            cache[cacheKey] = Object.freeze(animations);\n        }\n        return animations;\n    }\n getSharedOptions(options) {\n        if (!options.$shared) {\n            return;\n        }\n        return this._sharedOptions || (this._sharedOptions = Object.assign({}, options));\n    }\n includeOptions(mode, sharedOptions) {\n        return !sharedOptions || isDirectUpdateMode(mode) || this.chart._animationsDisabled;\n    }\n _getSharedOptions(start, mode) {\n        const firstOpts = this.resolveDataElementOptions(start, mode);\n        const previouslySharedOptions = this._sharedOptions;\n        const sharedOptions = this.getSharedOptions(firstOpts);\n        const includeOptions = this.includeOptions(mode, sharedOptions) || sharedOptions !== previouslySharedOptions;\n        this.updateSharedOptions(sharedOptions, mode, firstOpts);\n        return {\n            sharedOptions,\n            includeOptions\n        };\n    }\n updateElement(element, index, properties, mode) {\n        if (isDirectUpdateMode(mode)) {\n            Object.assign(element, properties);\n        } else {\n            this._resolveAnimations(index, mode).update(element, properties);\n        }\n    }\n updateSharedOptions(sharedOptions, mode, newOptions) {\n        if (sharedOptions && !isDirectUpdateMode(mode)) {\n            this._resolveAnimations(undefined, mode).update(sharedOptions, newOptions);\n        }\n    }\n _setStyle(element, index, mode, active) {\n        element.active = active;\n        const options = this.getStyle(index, active);\n        this._resolveAnimations(index, mode, active).update(element, {\n            options: !active && this.getSharedOptions(options) || options\n        });\n    }\n    removeHoverStyle(element, datasetIndex, index) {\n        this._setStyle(element, index, 'active', false);\n    }\n    setHoverStyle(element, datasetIndex, index) {\n        this._setStyle(element, index, 'active', true);\n    }\n _removeDatasetHoverStyle() {\n        const element = this._cachedMeta.dataset;\n        if (element) {\n            this._setStyle(element, undefined, 'active', false);\n        }\n    }\n _setDatasetHoverStyle() {\n        const element = this._cachedMeta.dataset;\n        if (element) {\n            this._setStyle(element, undefined, 'active', true);\n        }\n    }\n _resyncElements(resetNewElements) {\n        const data = this._data;\n        const elements = this._cachedMeta.data;\n        for (const [method, arg1, arg2] of this._syncList){\n            this[method](arg1, arg2);\n        }\n        this._syncList = [];\n        const numMeta = elements.length;\n        const numData = data.length;\n        const count = Math.min(numData, numMeta);\n        if (count) {\n            this.parse(0, count);\n        }\n        if (numData > numMeta) {\n            this._insertElements(numMeta, numData - numMeta, resetNewElements);\n        } else if (numData < numMeta) {\n            this._removeElements(numData, numMeta - numData);\n        }\n    }\n _insertElements(start, count, resetNewElements = true) {\n        const meta = this._cachedMeta;\n        const data = meta.data;\n        const end = start + count;\n        let i;\n        const move = (arr)=>{\n            arr.length += count;\n            for(i = arr.length - 1; i >= end; i--){\n                arr[i] = arr[i - count];\n            }\n        };\n        move(data);\n        for(i = start; i < end; ++i){\n            data[i] = new this.dataElementType();\n        }\n        if (this._parsing) {\n            move(meta._parsed);\n        }\n        this.parse(start, count);\n        if (resetNewElements) {\n            this.updateElements(data, start, count, 'reset');\n        }\n    }\n    updateElements(element, start, count, mode) {}\n _removeElements(start, count) {\n        const meta = this._cachedMeta;\n        if (this._parsing) {\n            const removed = meta._parsed.splice(start, count);\n            if (meta._stacked) {\n                clearStacks(meta, removed);\n            }\n        }\n        meta.data.splice(start, count);\n    }\n _sync(args) {\n        if (this._parsing) {\n            this._syncList.push(args);\n        } else {\n            const [method, arg1, arg2] = args;\n            this[method](arg1, arg2);\n        }\n        this.chart._dataChanges.push([\n            this.index,\n            ...args\n        ]);\n    }\n    _onDataPush() {\n        const count = arguments.length;\n        this._sync([\n            '_insertElements',\n            this.getDataset().data.length - count,\n            count\n        ]);\n    }\n    _onDataPop() {\n        this._sync([\n            '_removeElements',\n            this._cachedMeta.data.length - 1,\n            1\n        ]);\n    }\n    _onDataShift() {\n        this._sync([\n            '_removeElements',\n            0,\n            1\n        ]);\n    }\n    _onDataSplice(start, count) {\n        if (count) {\n            this._sync([\n                '_removeElements',\n                start,\n                count\n            ]);\n        }\n        const newCount = arguments.length - 2;\n        if (newCount) {\n            this._sync([\n                '_insertElements',\n                start,\n                newCount\n            ]);\n        }\n    }\n    _onDataUnshift() {\n        this._sync([\n            '_insertElements',\n            0,\n            arguments.length\n        ]);\n    }\n}\n\nfunction getAllScaleValues(scale, type) {\n    if (!scale._cache.$bar) {\n        const visibleMetas = scale.getMatchingVisibleMetas(type);\n        let values = [];\n        for(let i = 0, ilen = visibleMetas.length; i < ilen; i++){\n            values = values.concat(visibleMetas[i].controller.getAllParsedValues(scale));\n        }\n        scale._cache.$bar = _arrayUnique(values.sort((a, b)=>a - b));\n    }\n    return scale._cache.$bar;\n}\n function computeMinSampleSize(meta) {\n    const scale = meta.iScale;\n    const values = getAllScaleValues(scale, meta.type);\n    let min = scale._length;\n    let i, ilen, curr, prev;\n    const updateMinAndPrev = ()=>{\n        if (curr === 32767 || curr === -32768) {\n            return;\n        }\n        if (defined(prev)) {\n            min = Math.min(min, Math.abs(curr - prev) || min);\n        }\n        prev = curr;\n    };\n    for(i = 0, ilen = values.length; i < ilen; ++i){\n        curr = scale.getPixelForValue(values[i]);\n        updateMinAndPrev();\n    }\n    prev = undefined;\n    for(i = 0, ilen = scale.ticks.length; i < ilen; ++i){\n        curr = scale.getPixelForTick(i);\n        updateMinAndPrev();\n    }\n    return min;\n}\n function computeFitCategoryTraits(index, ruler, options, stackCount) {\n    const thickness = options.barThickness;\n    let size, ratio;\n    if (isNullOrUndef(thickness)) {\n        size = ruler.min * options.categoryPercentage;\n        ratio = options.barPercentage;\n    } else {\n        size = thickness * stackCount;\n        ratio = 1;\n    }\n    return {\n        chunk: size / stackCount,\n        ratio,\n        start: ruler.pixels[index] - size / 2\n    };\n}\n function computeFlexCategoryTraits(index, ruler, options, stackCount) {\n    const pixels = ruler.pixels;\n    const curr = pixels[index];\n    let prev = index > 0 ? pixels[index - 1] : null;\n    let next = index < pixels.length - 1 ? pixels[index + 1] : null;\n    const percent = options.categoryPercentage;\n    if (prev === null) {\n        prev = curr - (next === null ? ruler.end - ruler.start : next - curr);\n    }\n    if (next === null) {\n        next = curr + curr - prev;\n    }\n    const start = curr - (curr - Math.min(prev, next)) / 2 * percent;\n    const size = Math.abs(next - prev) / 2 * percent;\n    return {\n        chunk: size / stackCount,\n        ratio: options.barPercentage,\n        start\n    };\n}\nfunction parseFloatBar(entry, item, vScale, i) {\n    const startValue = vScale.parse(entry[0], i);\n    const endValue = vScale.parse(entry[1], i);\n    const min = Math.min(startValue, endValue);\n    const max = Math.max(startValue, endValue);\n    let barStart = min;\n    let barEnd = max;\n    if (Math.abs(min) > Math.abs(max)) {\n        barStart = max;\n        barEnd = min;\n    }\n    item[vScale.axis] = barEnd;\n    item._custom = {\n        barStart,\n        barEnd,\n        start: startValue,\n        end: endValue,\n        min,\n        max\n    };\n}\nfunction parseValue(entry, item, vScale, i) {\n    if (isArray(entry)) {\n        parseFloatBar(entry, item, vScale, i);\n    } else {\n        item[vScale.axis] = vScale.parse(entry, i);\n    }\n    return item;\n}\nfunction parseArrayOrPrimitive(meta, data, start, count) {\n    const iScale = meta.iScale;\n    const vScale = meta.vScale;\n    const labels = iScale.getLabels();\n    const singleScale = iScale === vScale;\n    const parsed = [];\n    let i, ilen, item, entry;\n    for(i = start, ilen = start + count; i < ilen; ++i){\n        entry = data[i];\n        item = {};\n        item[iScale.axis] = singleScale || iScale.parse(labels[i], i);\n        parsed.push(parseValue(entry, item, vScale, i));\n    }\n    return parsed;\n}\nfunction isFloatBar(custom) {\n    return custom && custom.barStart !== undefined && custom.barEnd !== undefined;\n}\nfunction barSign(size, vScale, actualBase) {\n    if (size !== 0) {\n        return sign(size);\n    }\n    return (vScale.isHorizontal() ? 1 : -1) * (vScale.min >= actualBase ? 1 : -1);\n}\nfunction borderProps(properties) {\n    let reverse, start, end, top, bottom;\n    if (properties.horizontal) {\n        reverse = properties.base > properties.x;\n        start = 'left';\n        end = 'right';\n    } else {\n        reverse = properties.base < properties.y;\n        start = 'bottom';\n        end = 'top';\n    }\n    if (reverse) {\n        top = 'end';\n        bottom = 'start';\n    } else {\n        top = 'start';\n        bottom = 'end';\n    }\n    return {\n        start,\n        end,\n        reverse,\n        top,\n        bottom\n    };\n}\nfunction setBorderSkipped(properties, options, stack, index) {\n    let edge = options.borderSkipped;\n    const res = {};\n    if (!edge) {\n        properties.borderSkipped = res;\n        return;\n    }\n    if (edge === true) {\n        properties.borderSkipped = {\n            top: true,\n            right: true,\n            bottom: true,\n            left: true\n        };\n        return;\n    }\n    const { start , end , reverse , top , bottom  } = borderProps(properties);\n    if (edge === 'middle' && stack) {\n        properties.enableBorderRadius = true;\n        if ((stack._top || 0) === index) {\n            edge = top;\n        } else if ((stack._bottom || 0) === index) {\n            edge = bottom;\n        } else {\n            res[parseEdge(bottom, start, end, reverse)] = true;\n            edge = top;\n        }\n    }\n    res[parseEdge(edge, start, end, reverse)] = true;\n    properties.borderSkipped = res;\n}\nfunction parseEdge(edge, a, b, reverse) {\n    if (reverse) {\n        edge = swap(edge, a, b);\n        edge = startEnd(edge, b, a);\n    } else {\n        edge = startEnd(edge, a, b);\n    }\n    return edge;\n}\nfunction swap(orig, v1, v2) {\n    return orig === v1 ? v2 : orig === v2 ? v1 : orig;\n}\nfunction startEnd(v, start, end) {\n    return v === 'start' ? start : v === 'end' ? end : v;\n}\nfunction setInflateAmount(properties, { inflateAmount  }, ratio) {\n    properties.inflateAmount = inflateAmount === 'auto' ? ratio === 1 ? 0.33 : 0 : inflateAmount;\n}\nclass BarController extends DatasetController {\n    static id = 'bar';\n static defaults = {\n        datasetElementType: false,\n        dataElementType: 'bar',\n        categoryPercentage: 0.8,\n        barPercentage: 0.9,\n        grouped: true,\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'x',\n                    'y',\n                    'base',\n                    'width',\n                    'height'\n                ]\n            }\n        }\n    };\n static overrides = {\n        scales: {\n            _index_: {\n                type: 'category',\n                offset: true,\n                grid: {\n                    offset: true\n                }\n            },\n            _value_: {\n                type: 'linear',\n                beginAtZero: true\n            }\n        }\n    };\n parsePrimitiveData(meta, data, start, count) {\n        return parseArrayOrPrimitive(meta, data, start, count);\n    }\n parseArrayData(meta, data, start, count) {\n        return parseArrayOrPrimitive(meta, data, start, count);\n    }\n parseObjectData(meta, data, start, count) {\n        const { iScale , vScale  } = meta;\n        const { xAxisKey ='x' , yAxisKey ='y'  } = this._parsing;\n        const iAxisKey = iScale.axis === 'x' ? xAxisKey : yAxisKey;\n        const vAxisKey = vScale.axis === 'x' ? xAxisKey : yAxisKey;\n        const parsed = [];\n        let i, ilen, item, obj;\n        for(i = start, ilen = start + count; i < ilen; ++i){\n            obj = data[i];\n            item = {};\n            item[iScale.axis] = iScale.parse(resolveObjectKey(obj, iAxisKey), i);\n            parsed.push(parseValue(resolveObjectKey(obj, vAxisKey), item, vScale, i));\n        }\n        return parsed;\n    }\n updateRangeFromParsed(range, scale, parsed, stack) {\n        super.updateRangeFromParsed(range, scale, parsed, stack);\n        const custom = parsed._custom;\n        if (custom && scale === this._cachedMeta.vScale) {\n            range.min = Math.min(range.min, custom.min);\n            range.max = Math.max(range.max, custom.max);\n        }\n    }\n getMaxOverflow() {\n        return 0;\n    }\n getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const { iScale , vScale  } = meta;\n        const parsed = this.getParsed(index);\n        const custom = parsed._custom;\n        const value = isFloatBar(custom) ? '[' + custom.start + ', ' + custom.end + ']' : '' + vScale.getLabelForValue(parsed[vScale.axis]);\n        return {\n            label: '' + iScale.getLabelForValue(parsed[iScale.axis]),\n            value\n        };\n    }\n    initialize() {\n        this.enableOptionSharing = true;\n        super.initialize();\n        const meta = this._cachedMeta;\n        meta.stack = this.getDataset().stack;\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        this.updateElements(meta.data, 0, meta.data.length, mode);\n    }\n    updateElements(bars, start, count, mode) {\n        const reset = mode === 'reset';\n        const { index , _cachedMeta: { vScale  }  } = this;\n        const base = vScale.getBasePixel();\n        const horizontal = vScale.isHorizontal();\n        const ruler = this._getRuler();\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n        for(let i = start; i < start + count; i++){\n            const parsed = this.getParsed(i);\n            const vpixels = reset || isNullOrUndef(parsed[vScale.axis]) ? {\n                base,\n                head: base\n            } : this._calculateBarValuePixels(i);\n            const ipixels = this._calculateBarIndexPixels(i, ruler);\n            const stack = (parsed._stacks || {})[vScale.axis];\n            const properties = {\n                horizontal,\n                base: vpixels.base,\n                enableBorderRadius: !stack || isFloatBar(parsed._custom) || index === stack._top || index === stack._bottom,\n                x: horizontal ? vpixels.head : ipixels.center,\n                y: horizontal ? ipixels.center : vpixels.head,\n                height: horizontal ? ipixels.size : Math.abs(vpixels.size),\n                width: horizontal ? Math.abs(vpixels.size) : ipixels.size\n            };\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, bars[i].active ? 'active' : mode);\n            }\n            const options = properties.options || bars[i].options;\n            setBorderSkipped(properties, options, stack, index);\n            setInflateAmount(properties, options, ruler.ratio);\n            this.updateElement(bars[i], i, properties, mode);\n        }\n    }\n _getStacks(last, dataIndex) {\n        const { iScale  } = this._cachedMeta;\n        const metasets = iScale.getMatchingVisibleMetas(this._type).filter((meta)=>meta.controller.options.grouped);\n        const stacked = iScale.options.stacked;\n        const stacks = [];\n        const skipNull = (meta)=>{\n            const parsed = meta.controller.getParsed(dataIndex);\n            const val = parsed && parsed[meta.vScale.axis];\n            if (isNullOrUndef(val) || isNaN(val)) {\n                return true;\n            }\n        };\n        for (const meta of metasets){\n            if (dataIndex !== undefined && skipNull(meta)) {\n                continue;\n            }\n            if (stacked === false || stacks.indexOf(meta.stack) === -1 || stacked === undefined && meta.stack === undefined) {\n                stacks.push(meta.stack);\n            }\n            if (meta.index === last) {\n                break;\n            }\n        }\n        if (!stacks.length) {\n            stacks.push(undefined);\n        }\n        return stacks;\n    }\n _getStackCount(index) {\n        return this._getStacks(undefined, index).length;\n    }\n _getStackIndex(datasetIndex, name, dataIndex) {\n        const stacks = this._getStacks(datasetIndex, dataIndex);\n        const index = name !== undefined ? stacks.indexOf(name) : -1;\n        return index === -1 ? stacks.length - 1 : index;\n    }\n _getRuler() {\n        const opts = this.options;\n        const meta = this._cachedMeta;\n        const iScale = meta.iScale;\n        const pixels = [];\n        let i, ilen;\n        for(i = 0, ilen = meta.data.length; i < ilen; ++i){\n            pixels.push(iScale.getPixelForValue(this.getParsed(i)[iScale.axis], i));\n        }\n        const barThickness = opts.barThickness;\n        const min = barThickness || computeMinSampleSize(meta);\n        return {\n            min,\n            pixels,\n            start: iScale._startPixel,\n            end: iScale._endPixel,\n            stackCount: this._getStackCount(),\n            scale: iScale,\n            grouped: opts.grouped,\n            ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage\n        };\n    }\n _calculateBarValuePixels(index) {\n        const { _cachedMeta: { vScale , _stacked , index: datasetIndex  } , options: { base: baseValue , minBarLength  }  } = this;\n        const actualBase = baseValue || 0;\n        const parsed = this.getParsed(index);\n        const custom = parsed._custom;\n        const floating = isFloatBar(custom);\n        let value = parsed[vScale.axis];\n        let start = 0;\n        let length = _stacked ? this.applyStack(vScale, parsed, _stacked) : value;\n        let head, size;\n        if (length !== value) {\n            start = length - value;\n            length = value;\n        }\n        if (floating) {\n            value = custom.barStart;\n            length = custom.barEnd - custom.barStart;\n            if (value !== 0 && sign(value) !== sign(custom.barEnd)) {\n                start = 0;\n            }\n            start += value;\n        }\n        const startValue = !isNullOrUndef(baseValue) && !floating ? baseValue : start;\n        let base = vScale.getPixelForValue(startValue);\n        if (this.chart.getDataVisibility(index)) {\n            head = vScale.getPixelForValue(start + length);\n        } else {\n            head = base;\n        }\n        size = head - base;\n        if (Math.abs(size) < minBarLength) {\n            size = barSign(size, vScale, actualBase) * minBarLength;\n            if (value === actualBase) {\n                base -= size / 2;\n            }\n            const startPixel = vScale.getPixelForDecimal(0);\n            const endPixel = vScale.getPixelForDecimal(1);\n            const min = Math.min(startPixel, endPixel);\n            const max = Math.max(startPixel, endPixel);\n            base = Math.max(Math.min(base, max), min);\n            head = base + size;\n            if (_stacked && !floating) {\n                parsed._stacks[vScale.axis]._visualValues[datasetIndex] = vScale.getValueForPixel(head) - vScale.getValueForPixel(base);\n            }\n        }\n        if (base === vScale.getPixelForValue(actualBase)) {\n            const halfGrid = sign(size) * vScale.getLineWidthForValue(actualBase) / 2;\n            base += halfGrid;\n            size -= halfGrid;\n        }\n        return {\n            size,\n            base,\n            head,\n            center: head + size / 2\n        };\n    }\n _calculateBarIndexPixels(index, ruler) {\n        const scale = ruler.scale;\n        const options = this.options;\n        const skipNull = options.skipNull;\n        const maxBarThickness = valueOrDefault(options.maxBarThickness, Infinity);\n        let center, size;\n        if (ruler.grouped) {\n            const stackCount = skipNull ? this._getStackCount(index) : ruler.stackCount;\n            const range = options.barThickness === 'flex' ? computeFlexCategoryTraits(index, ruler, options, stackCount) : computeFitCategoryTraits(index, ruler, options, stackCount);\n            const stackIndex = this._getStackIndex(this.index, this._cachedMeta.stack, skipNull ? index : undefined);\n            center = range.start + range.chunk * stackIndex + range.chunk / 2;\n            size = Math.min(maxBarThickness, range.chunk * range.ratio);\n        } else {\n            center = scale.getPixelForValue(this.getParsed(index)[scale.axis], index);\n            size = Math.min(maxBarThickness, ruler.min * ruler.ratio);\n        }\n        return {\n            base: center - size / 2,\n            head: center + size / 2,\n            center,\n            size\n        };\n    }\n    draw() {\n        const meta = this._cachedMeta;\n        const vScale = meta.vScale;\n        const rects = meta.data;\n        const ilen = rects.length;\n        let i = 0;\n        for(; i < ilen; ++i){\n            if (this.getParsed(i)[vScale.axis] !== null) {\n                rects[i].draw(this._ctx);\n            }\n        }\n    }\n}\n\nclass BubbleController extends DatasetController {\n    static id = 'bubble';\n static defaults = {\n        datasetElementType: false,\n        dataElementType: 'point',\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'x',\n                    'y',\n                    'borderWidth',\n                    'radius'\n                ]\n            }\n        }\n    };\n static overrides = {\n        scales: {\n            x: {\n                type: 'linear'\n            },\n            y: {\n                type: 'linear'\n            }\n        }\n    };\n    initialize() {\n        this.enableOptionSharing = true;\n        super.initialize();\n    }\n parsePrimitiveData(meta, data, start, count) {\n        const parsed = super.parsePrimitiveData(meta, data, start, count);\n        for(let i = 0; i < parsed.length; i++){\n            parsed[i]._custom = this.resolveDataElementOptions(i + start).radius;\n        }\n        return parsed;\n    }\n parseArrayData(meta, data, start, count) {\n        const parsed = super.parseArrayData(meta, data, start, count);\n        for(let i = 0; i < parsed.length; i++){\n            const item = data[start + i];\n            parsed[i]._custom = valueOrDefault(item[2], this.resolveDataElementOptions(i + start).radius);\n        }\n        return parsed;\n    }\n parseObjectData(meta, data, start, count) {\n        const parsed = super.parseObjectData(meta, data, start, count);\n        for(let i = 0; i < parsed.length; i++){\n            const item = data[start + i];\n            parsed[i]._custom = valueOrDefault(item && item.r && +item.r, this.resolveDataElementOptions(i + start).radius);\n        }\n        return parsed;\n    }\n getMaxOverflow() {\n        const data = this._cachedMeta.data;\n        let max = 0;\n        for(let i = data.length - 1; i >= 0; --i){\n            max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n        }\n        return max > 0 && max;\n    }\n getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const labels = this.chart.data.labels || [];\n        const { xScale , yScale  } = meta;\n        const parsed = this.getParsed(index);\n        const x = xScale.getLabelForValue(parsed.x);\n        const y = yScale.getLabelForValue(parsed.y);\n        const r = parsed._custom;\n        return {\n            label: labels[index] || '',\n            value: '(' + x + ', ' + y + (r ? ', ' + r : '') + ')'\n        };\n    }\n    update(mode) {\n        const points = this._cachedMeta.data;\n        this.updateElements(points, 0, points.length, mode);\n    }\n    updateElements(points, start, count, mode) {\n        const reset = mode === 'reset';\n        const { iScale , vScale  } = this._cachedMeta;\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        for(let i = start; i < start + count; i++){\n            const point = points[i];\n            const parsed = !reset && this.getParsed(i);\n            const properties = {};\n            const iPixel = properties[iAxis] = reset ? iScale.getPixelForDecimal(0.5) : iScale.getPixelForValue(parsed[iAxis]);\n            const vPixel = properties[vAxis] = reset ? vScale.getBasePixel() : vScale.getPixelForValue(parsed[vAxis]);\n            properties.skip = isNaN(iPixel) || isNaN(vPixel);\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n                if (reset) {\n                    properties.options.radius = 0;\n                }\n            }\n            this.updateElement(point, i, properties, mode);\n        }\n    }\n resolveDataElementOptions(index, mode) {\n        const parsed = this.getParsed(index);\n        let values = super.resolveDataElementOptions(index, mode);\n        if (values.$shared) {\n            values = Object.assign({}, values, {\n                $shared: false\n            });\n        }\n        const radius = values.radius;\n        if (mode !== 'active') {\n            values.radius = 0;\n        }\n        values.radius += valueOrDefault(parsed && parsed._custom, radius);\n        return values;\n    }\n}\n\nfunction getRatioAndOffset(rotation, circumference, cutout) {\n    let ratioX = 1;\n    let ratioY = 1;\n    let offsetX = 0;\n    let offsetY = 0;\n    if (circumference < TAU) {\n        const startAngle = rotation;\n        const endAngle = startAngle + circumference;\n        const startX = Math.cos(startAngle);\n        const startY = Math.sin(startAngle);\n        const endX = Math.cos(endAngle);\n        const endY = Math.sin(endAngle);\n        const calcMax = (angle, a, b)=>_angleBetween(angle, startAngle, endAngle, true) ? 1 : Math.max(a, a * cutout, b, b * cutout);\n        const calcMin = (angle, a, b)=>_angleBetween(angle, startAngle, endAngle, true) ? -1 : Math.min(a, a * cutout, b, b * cutout);\n        const maxX = calcMax(0, startX, endX);\n        const maxY = calcMax(HALF_PI, startY, endY);\n        const minX = calcMin(PI, startX, endX);\n        const minY = calcMin(PI + HALF_PI, startY, endY);\n        ratioX = (maxX - minX) / 2;\n        ratioY = (maxY - minY) / 2;\n        offsetX = -(maxX + minX) / 2;\n        offsetY = -(maxY + minY) / 2;\n    }\n    return {\n        ratioX,\n        ratioY,\n        offsetX,\n        offsetY\n    };\n}\nclass DoughnutController extends DatasetController {\n    static id = 'doughnut';\n static defaults = {\n        datasetElementType: false,\n        dataElementType: 'arc',\n        animation: {\n            animateRotate: true,\n            animateScale: false\n        },\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'circumference',\n                    'endAngle',\n                    'innerRadius',\n                    'outerRadius',\n                    'startAngle',\n                    'x',\n                    'y',\n                    'offset',\n                    'borderWidth',\n                    'spacing'\n                ]\n            }\n        },\n        cutout: '50%',\n        rotation: 0,\n        circumference: 360,\n        radius: '100%',\n        spacing: 0,\n        indexAxis: 'r'\n    };\n    static descriptors = {\n        _scriptable: (name)=>name !== 'spacing',\n        _indexable: (name)=>name !== 'spacing' && !name.startsWith('borderDash') && !name.startsWith('hoverBorderDash')\n    };\n static overrides = {\n        aspectRatio: 1,\n        plugins: {\n            legend: {\n                labels: {\n                    generateLabels (chart) {\n                        const data = chart.data;\n                        if (data.labels.length && data.datasets.length) {\n                            const { labels: { pointStyle , color  }  } = chart.legend.options;\n                            return data.labels.map((label, i)=>{\n                                const meta = chart.getDatasetMeta(0);\n                                const style = meta.controller.getStyle(i);\n                                return {\n                                    text: label,\n                                    fillStyle: style.backgroundColor,\n                                    strokeStyle: style.borderColor,\n                                    fontColor: color,\n                                    lineWidth: style.borderWidth,\n                                    pointStyle: pointStyle,\n                                    hidden: !chart.getDataVisibility(i),\n                                    index: i\n                                };\n                            });\n                        }\n                        return [];\n                    }\n                },\n                onClick (e, legendItem, legend) {\n                    legend.chart.toggleDataVisibility(legendItem.index);\n                    legend.chart.update();\n                }\n            }\n        }\n    };\n    constructor(chart, datasetIndex){\n        super(chart, datasetIndex);\n        this.enableOptionSharing = true;\n        this.innerRadius = undefined;\n        this.outerRadius = undefined;\n        this.offsetX = undefined;\n        this.offsetY = undefined;\n    }\n    linkScales() {}\n parse(start, count) {\n        const data = this.getDataset().data;\n        const meta = this._cachedMeta;\n        if (this._parsing === false) {\n            meta._parsed = data;\n        } else {\n            let getter = (i)=>+data[i];\n            if (isObject(data[start])) {\n                const { key ='value'  } = this._parsing;\n                getter = (i)=>+resolveObjectKey(data[i], key);\n            }\n            let i, ilen;\n            for(i = start, ilen = start + count; i < ilen; ++i){\n                meta._parsed[i] = getter(i);\n            }\n        }\n    }\n _getRotation() {\n        return toRadians(this.options.rotation - 90);\n    }\n _getCircumference() {\n        return toRadians(this.options.circumference);\n    }\n _getRotationExtents() {\n        let min = TAU;\n        let max = -TAU;\n        for(let i = 0; i < this.chart.data.datasets.length; ++i){\n            if (this.chart.isDatasetVisible(i) && this.chart.getDatasetMeta(i).type === this._type) {\n                const controller = this.chart.getDatasetMeta(i).controller;\n                const rotation = controller._getRotation();\n                const circumference = controller._getCircumference();\n                min = Math.min(min, rotation);\n                max = Math.max(max, rotation + circumference);\n            }\n        }\n        return {\n            rotation: min,\n            circumference: max - min\n        };\n    }\n update(mode) {\n        const chart = this.chart;\n        const { chartArea  } = chart;\n        const meta = this._cachedMeta;\n        const arcs = meta.data;\n        const spacing = this.getMaxBorderWidth() + this.getMaxOffset(arcs) + this.options.spacing;\n        const maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing) / 2, 0);\n        const cutout = Math.min(toPercentage(this.options.cutout, maxSize), 1);\n        const chartWeight = this._getRingWeight(this.index);\n        const { circumference , rotation  } = this._getRotationExtents();\n        const { ratioX , ratioY , offsetX , offsetY  } = getRatioAndOffset(rotation, circumference, cutout);\n        const maxWidth = (chartArea.width - spacing) / ratioX;\n        const maxHeight = (chartArea.height - spacing) / ratioY;\n        const maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);\n        const outerRadius = toDimension(this.options.radius, maxRadius);\n        const innerRadius = Math.max(outerRadius * cutout, 0);\n        const radiusLength = (outerRadius - innerRadius) / this._getVisibleDatasetWeightTotal();\n        this.offsetX = offsetX * outerRadius;\n        this.offsetY = offsetY * outerRadius;\n        meta.total = this.calculateTotal();\n        this.outerRadius = outerRadius - radiusLength * this._getRingWeightOffset(this.index);\n        this.innerRadius = Math.max(this.outerRadius - radiusLength * chartWeight, 0);\n        this.updateElements(arcs, 0, arcs.length, mode);\n    }\n _circumference(i, reset) {\n        const opts = this.options;\n        const meta = this._cachedMeta;\n        const circumference = this._getCircumference();\n        if (reset && opts.animation.animateRotate || !this.chart.getDataVisibility(i) || meta._parsed[i] === null || meta.data[i].hidden) {\n            return 0;\n        }\n        return this.calculateCircumference(meta._parsed[i] * circumference / TAU);\n    }\n    updateElements(arcs, start, count, mode) {\n        const reset = mode === 'reset';\n        const chart = this.chart;\n        const chartArea = chart.chartArea;\n        const opts = chart.options;\n        const animationOpts = opts.animation;\n        const centerX = (chartArea.left + chartArea.right) / 2;\n        const centerY = (chartArea.top + chartArea.bottom) / 2;\n        const animateScale = reset && animationOpts.animateScale;\n        const innerRadius = animateScale ? 0 : this.innerRadius;\n        const outerRadius = animateScale ? 0 : this.outerRadius;\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n        let startAngle = this._getRotation();\n        let i;\n        for(i = 0; i < start; ++i){\n            startAngle += this._circumference(i, reset);\n        }\n        for(i = start; i < start + count; ++i){\n            const circumference = this._circumference(i, reset);\n            const arc = arcs[i];\n            const properties = {\n                x: centerX + this.offsetX,\n                y: centerY + this.offsetY,\n                startAngle,\n                endAngle: startAngle + circumference,\n                circumference,\n                outerRadius,\n                innerRadius\n            };\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, arc.active ? 'active' : mode);\n            }\n            startAngle += circumference;\n            this.updateElement(arc, i, properties, mode);\n        }\n    }\n    calculateTotal() {\n        const meta = this._cachedMeta;\n        const metaData = meta.data;\n        let total = 0;\n        let i;\n        for(i = 0; i < metaData.length; i++){\n            const value = meta._parsed[i];\n            if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i) && !metaData[i].hidden) {\n                total += Math.abs(value);\n            }\n        }\n        return total;\n    }\n    calculateCircumference(value) {\n        const total = this._cachedMeta.total;\n        if (total > 0 && !isNaN(value)) {\n            return TAU * (Math.abs(value) / total);\n        }\n        return 0;\n    }\n    getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const chart = this.chart;\n        const labels = chart.data.labels || [];\n        const value = formatNumber(meta._parsed[index], chart.options.locale);\n        return {\n            label: labels[index] || '',\n            value\n        };\n    }\n    getMaxBorderWidth(arcs) {\n        let max = 0;\n        const chart = this.chart;\n        let i, ilen, meta, controller, options;\n        if (!arcs) {\n            for(i = 0, ilen = chart.data.datasets.length; i < ilen; ++i){\n                if (chart.isDatasetVisible(i)) {\n                    meta = chart.getDatasetMeta(i);\n                    arcs = meta.data;\n                    controller = meta.controller;\n                    break;\n                }\n            }\n        }\n        if (!arcs) {\n            return 0;\n        }\n        for(i = 0, ilen = arcs.length; i < ilen; ++i){\n            options = controller.resolveDataElementOptions(i);\n            if (options.borderAlign !== 'inner') {\n                max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);\n            }\n        }\n        return max;\n    }\n    getMaxOffset(arcs) {\n        let max = 0;\n        for(let i = 0, ilen = arcs.length; i < ilen; ++i){\n            const options = this.resolveDataElementOptions(i);\n            max = Math.max(max, options.offset || 0, options.hoverOffset || 0);\n        }\n        return max;\n    }\n _getRingWeightOffset(datasetIndex) {\n        let ringWeightOffset = 0;\n        for(let i = 0; i < datasetIndex; ++i){\n            if (this.chart.isDatasetVisible(i)) {\n                ringWeightOffset += this._getRingWeight(i);\n            }\n        }\n        return ringWeightOffset;\n    }\n _getRingWeight(datasetIndex) {\n        return Math.max(valueOrDefault(this.chart.data.datasets[datasetIndex].weight, 1), 0);\n    }\n _getVisibleDatasetWeightTotal() {\n        return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;\n    }\n}\n\nclass LineController extends DatasetController {\n    static id = 'line';\n static defaults = {\n        datasetElementType: 'line',\n        dataElementType: 'point',\n        showLine: true,\n        spanGaps: false\n    };\n static overrides = {\n        scales: {\n            _index_: {\n                type: 'category'\n            },\n            _value_: {\n                type: 'linear'\n            }\n        }\n    };\n    initialize() {\n        this.enableOptionSharing = true;\n        this.supportsDecimation = true;\n        super.initialize();\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        const { dataset: line , data: points = [] , _dataset  } = meta;\n        const animationsDisabled = this.chart._animationsDisabled;\n        let { start , count  } = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n        this._drawStart = start;\n        this._drawCount = count;\n        if (_scaleRangesChanged(meta)) {\n            start = 0;\n            count = points.length;\n        }\n        line._chart = this.chart;\n        line._datasetIndex = this.index;\n        line._decimated = !!_dataset._decimated;\n        line.points = points;\n        const options = this.resolveDatasetElementOptions(mode);\n        if (!this.options.showLine) {\n            options.borderWidth = 0;\n        }\n        options.segment = this.options.segment;\n        this.updateElement(line, undefined, {\n            animated: !animationsDisabled,\n            options\n        }, mode);\n        this.updateElements(points, start, count, mode);\n    }\n    updateElements(points, start, count, mode) {\n        const reset = mode === 'reset';\n        const { iScale , vScale , _stacked , _dataset  } = this._cachedMeta;\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        const { spanGaps , segment  } = this.options;\n        const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n        const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n        const end = start + count;\n        const pointsCount = points.length;\n        let prevParsed = start > 0 && this.getParsed(start - 1);\n        for(let i = 0; i < pointsCount; ++i){\n            const point = points[i];\n            const properties = directUpdate ? point : {};\n            if (i < start || i >= end) {\n                properties.skip = true;\n                continue;\n            }\n            const parsed = this.getParsed(i);\n            const nullData = isNullOrUndef(parsed[vAxis]);\n            const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n            const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n            properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n            properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;\n            if (segment) {\n                properties.parsed = parsed;\n                properties.raw = _dataset.data[i];\n            }\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n            }\n            if (!directUpdate) {\n                this.updateElement(point, i, properties, mode);\n            }\n            prevParsed = parsed;\n        }\n    }\n getMaxOverflow() {\n        const meta = this._cachedMeta;\n        const dataset = meta.dataset;\n        const border = dataset.options && dataset.options.borderWidth || 0;\n        const data = meta.data || [];\n        if (!data.length) {\n            return border;\n        }\n        const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n        const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n        return Math.max(border, firstPoint, lastPoint) / 2;\n    }\n    draw() {\n        const meta = this._cachedMeta;\n        meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);\n        super.draw();\n    }\n}\n\nclass PolarAreaController extends DatasetController {\n    static id = 'polarArea';\n static defaults = {\n        dataElementType: 'arc',\n        animation: {\n            animateRotate: true,\n            animateScale: true\n        },\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'x',\n                    'y',\n                    'startAngle',\n                    'endAngle',\n                    'innerRadius',\n                    'outerRadius'\n                ]\n            }\n        },\n        indexAxis: 'r',\n        startAngle: 0\n    };\n static overrides = {\n        aspectRatio: 1,\n        plugins: {\n            legend: {\n                labels: {\n                    generateLabels (chart) {\n                        const data = chart.data;\n                        if (data.labels.length && data.datasets.length) {\n                            const { labels: { pointStyle , color  }  } = chart.legend.options;\n                            return data.labels.map((label, i)=>{\n                                const meta = chart.getDatasetMeta(0);\n                                const style = meta.controller.getStyle(i);\n                                return {\n                                    text: label,\n                                    fillStyle: style.backgroundColor,\n                                    strokeStyle: style.borderColor,\n                                    fontColor: color,\n                                    lineWidth: style.borderWidth,\n                                    pointStyle: pointStyle,\n                                    hidden: !chart.getDataVisibility(i),\n                                    index: i\n                                };\n                            });\n                        }\n                        return [];\n                    }\n                },\n                onClick (e, legendItem, legend) {\n                    legend.chart.toggleDataVisibility(legendItem.index);\n                    legend.chart.update();\n                }\n            }\n        },\n        scales: {\n            r: {\n                type: 'radialLinear',\n                angleLines: {\n                    display: false\n                },\n                beginAtZero: true,\n                grid: {\n                    circular: true\n                },\n                pointLabels: {\n                    display: false\n                },\n                startAngle: 0\n            }\n        }\n    };\n    constructor(chart, datasetIndex){\n        super(chart, datasetIndex);\n        this.innerRadius = undefined;\n        this.outerRadius = undefined;\n    }\n    getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const chart = this.chart;\n        const labels = chart.data.labels || [];\n        const value = formatNumber(meta._parsed[index].r, chart.options.locale);\n        return {\n            label: labels[index] || '',\n            value\n        };\n    }\n    parseObjectData(meta, data, start, count) {\n        return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n    }\n    update(mode) {\n        const arcs = this._cachedMeta.data;\n        this._updateRadius();\n        this.updateElements(arcs, 0, arcs.length, mode);\n    }\n getMinMax() {\n        const meta = this._cachedMeta;\n        const range = {\n            min: Number.POSITIVE_INFINITY,\n            max: Number.NEGATIVE_INFINITY\n        };\n        meta.data.forEach((element, index)=>{\n            const parsed = this.getParsed(index).r;\n            if (!isNaN(parsed) && this.chart.getDataVisibility(index)) {\n                if (parsed < range.min) {\n                    range.min = parsed;\n                }\n                if (parsed > range.max) {\n                    range.max = parsed;\n                }\n            }\n        });\n        return range;\n    }\n _updateRadius() {\n        const chart = this.chart;\n        const chartArea = chart.chartArea;\n        const opts = chart.options;\n        const minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);\n        const outerRadius = Math.max(minSize / 2, 0);\n        const innerRadius = Math.max(opts.cutoutPercentage ? outerRadius / 100 * opts.cutoutPercentage : 1, 0);\n        const radiusLength = (outerRadius - innerRadius) / chart.getVisibleDatasetCount();\n        this.outerRadius = outerRadius - radiusLength * this.index;\n        this.innerRadius = this.outerRadius - radiusLength;\n    }\n    updateElements(arcs, start, count, mode) {\n        const reset = mode === 'reset';\n        const chart = this.chart;\n        const opts = chart.options;\n        const animationOpts = opts.animation;\n        const scale = this._cachedMeta.rScale;\n        const centerX = scale.xCenter;\n        const centerY = scale.yCenter;\n        const datasetStartAngle = scale.getIndexAngle(0) - 0.5 * PI;\n        let angle = datasetStartAngle;\n        let i;\n        const defaultAngle = 360 / this.countVisibleElements();\n        for(i = 0; i < start; ++i){\n            angle += this._computeAngle(i, mode, defaultAngle);\n        }\n        for(i = start; i < start + count; i++){\n            const arc = arcs[i];\n            let startAngle = angle;\n            let endAngle = angle + this._computeAngle(i, mode, defaultAngle);\n            let outerRadius = chart.getDataVisibility(i) ? scale.getDistanceFromCenterForValue(this.getParsed(i).r) : 0;\n            angle = endAngle;\n            if (reset) {\n                if (animationOpts.animateScale) {\n                    outerRadius = 0;\n                }\n                if (animationOpts.animateRotate) {\n                    startAngle = endAngle = datasetStartAngle;\n                }\n            }\n            const properties = {\n                x: centerX,\n                y: centerY,\n                innerRadius: 0,\n                outerRadius,\n                startAngle,\n                endAngle,\n                options: this.resolveDataElementOptions(i, arc.active ? 'active' : mode)\n            };\n            this.updateElement(arc, i, properties, mode);\n        }\n    }\n    countVisibleElements() {\n        const meta = this._cachedMeta;\n        let count = 0;\n        meta.data.forEach((element, index)=>{\n            if (!isNaN(this.getParsed(index).r) && this.chart.getDataVisibility(index)) {\n                count++;\n            }\n        });\n        return count;\n    }\n _computeAngle(index, mode, defaultAngle) {\n        return this.chart.getDataVisibility(index) ? toRadians(this.resolveDataElementOptions(index, mode).angle || defaultAngle) : 0;\n    }\n}\n\nclass PieController extends DoughnutController {\n    static id = 'pie';\n static defaults = {\n        cutout: 0,\n        rotation: 0,\n        circumference: 360,\n        radius: '100%'\n    };\n}\n\nclass RadarController extends DatasetController {\n    static id = 'radar';\n static defaults = {\n        datasetElementType: 'line',\n        dataElementType: 'point',\n        indexAxis: 'r',\n        showLine: true,\n        elements: {\n            line: {\n                fill: 'start'\n            }\n        }\n    };\n static overrides = {\n        aspectRatio: 1,\n        scales: {\n            r: {\n                type: 'radialLinear'\n            }\n        }\n    };\n getLabelAndValue(index) {\n        const vScale = this._cachedMeta.vScale;\n        const parsed = this.getParsed(index);\n        return {\n            label: vScale.getLabels()[index],\n            value: '' + vScale.getLabelForValue(parsed[vScale.axis])\n        };\n    }\n    parseObjectData(meta, data, start, count) {\n        return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        const line = meta.dataset;\n        const points = meta.data || [];\n        const labels = meta.iScale.getLabels();\n        line.points = points;\n        if (mode !== 'resize') {\n            const options = this.resolveDatasetElementOptions(mode);\n            if (!this.options.showLine) {\n                options.borderWidth = 0;\n            }\n            const properties = {\n                _loop: true,\n                _fullLoop: labels.length === points.length,\n                options\n            };\n            this.updateElement(line, undefined, properties, mode);\n        }\n        this.updateElements(points, 0, points.length, mode);\n    }\n    updateElements(points, start, count, mode) {\n        const scale = this._cachedMeta.rScale;\n        const reset = mode === 'reset';\n        for(let i = start; i < start + count; i++){\n            const point = points[i];\n            const options = this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n            const pointPosition = scale.getPointPositionForValue(i, this.getParsed(i).r);\n            const x = reset ? scale.xCenter : pointPosition.x;\n            const y = reset ? scale.yCenter : pointPosition.y;\n            const properties = {\n                x,\n                y,\n                angle: pointPosition.angle,\n                skip: isNaN(x) || isNaN(y),\n                options\n            };\n            this.updateElement(point, i, properties, mode);\n        }\n    }\n}\n\nclass ScatterController extends DatasetController {\n    static id = 'scatter';\n static defaults = {\n        datasetElementType: false,\n        dataElementType: 'point',\n        showLine: false,\n        fill: false\n    };\n static overrides = {\n        interaction: {\n            mode: 'point'\n        },\n        scales: {\n            x: {\n                type: 'linear'\n            },\n            y: {\n                type: 'linear'\n            }\n        }\n    };\n getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const labels = this.chart.data.labels || [];\n        const { xScale , yScale  } = meta;\n        const parsed = this.getParsed(index);\n        const x = xScale.getLabelForValue(parsed.x);\n        const y = yScale.getLabelForValue(parsed.y);\n        return {\n            label: labels[index] || '',\n            value: '(' + x + ', ' + y + ')'\n        };\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        const { data: points = []  } = meta;\n        const animationsDisabled = this.chart._animationsDisabled;\n        let { start , count  } = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n        this._drawStart = start;\n        this._drawCount = count;\n        if (_scaleRangesChanged(meta)) {\n            start = 0;\n            count = points.length;\n        }\n        if (this.options.showLine) {\n            if (!this.datasetElementType) {\n                this.addElements();\n            }\n            const { dataset: line , _dataset  } = meta;\n            line._chart = this.chart;\n            line._datasetIndex = this.index;\n            line._decimated = !!_dataset._decimated;\n            line.points = points;\n            const options = this.resolveDatasetElementOptions(mode);\n            options.segment = this.options.segment;\n            this.updateElement(line, undefined, {\n                animated: !animationsDisabled,\n                options\n            }, mode);\n        } else if (this.datasetElementType) {\n            delete meta.dataset;\n            this.datasetElementType = false;\n        }\n        this.updateElements(points, start, count, mode);\n    }\n    addElements() {\n        const { showLine  } = this.options;\n        if (!this.datasetElementType && showLine) {\n            this.datasetElementType = this.chart.registry.getElement('line');\n        }\n        super.addElements();\n    }\n    updateElements(points, start, count, mode) {\n        const reset = mode === 'reset';\n        const { iScale , vScale , _stacked , _dataset  } = this._cachedMeta;\n        const firstOpts = this.resolveDataElementOptions(start, mode);\n        const sharedOptions = this.getSharedOptions(firstOpts);\n        const includeOptions = this.includeOptions(mode, sharedOptions);\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        const { spanGaps , segment  } = this.options;\n        const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n        const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n        let prevParsed = start > 0 && this.getParsed(start - 1);\n        for(let i = start; i < start + count; ++i){\n            const point = points[i];\n            const parsed = this.getParsed(i);\n            const properties = directUpdate ? point : {};\n            const nullData = isNullOrUndef(parsed[vAxis]);\n            const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n            const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n            properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n            properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;\n            if (segment) {\n                properties.parsed = parsed;\n                properties.raw = _dataset.data[i];\n            }\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n            }\n            if (!directUpdate) {\n                this.updateElement(point, i, properties, mode);\n            }\n            prevParsed = parsed;\n        }\n        this.updateSharedOptions(sharedOptions, mode, firstOpts);\n    }\n getMaxOverflow() {\n        const meta = this._cachedMeta;\n        const data = meta.data || [];\n        if (!this.options.showLine) {\n            let max = 0;\n            for(let i = data.length - 1; i >= 0; --i){\n                max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n            }\n            return max > 0 && max;\n        }\n        const dataset = meta.dataset;\n        const border = dataset.options && dataset.options.borderWidth || 0;\n        if (!data.length) {\n            return border;\n        }\n        const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n        const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n        return Math.max(border, firstPoint, lastPoint) / 2;\n    }\n}\n\nvar controllers = /*#__PURE__*/Object.freeze({\n__proto__: null,\nBarController: BarController,\nBubbleController: BubbleController,\nDoughnutController: DoughnutController,\nLineController: LineController,\nPieController: PieController,\nPolarAreaController: PolarAreaController,\nRadarController: RadarController,\nScatterController: ScatterController\n});\n\n/**\n * @namespace Chart._adapters\n * @since 2.8.0\n * @private\n */ function abstract() {\n    throw new Error('This method is not implemented: Check that a complete date adapter is provided.');\n}\n/**\n * Date adapter (current used by the time scale)\n * @namespace Chart._adapters._date\n * @memberof Chart._adapters\n * @private\n */ class DateAdapterBase {\n    /**\n   * Override default date adapter methods.\n   * Accepts type parameter to define options type.\n   * @example\n   * Chart._adapters._date.override<{myAdapterOption: string}>({\n   *   init() {\n   *     console.log(this.options.myAdapterOption);\n   *   }\n   * })\n   */ static override(members) {\n        Object.assign(DateAdapterBase.prototype, members);\n    }\n    options;\n    constructor(options){\n        this.options = options || {};\n    }\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    init() {}\n    formats() {\n        return abstract();\n    }\n    parse() {\n        return abstract();\n    }\n    format() {\n        return abstract();\n    }\n    add() {\n        return abstract();\n    }\n    diff() {\n        return abstract();\n    }\n    startOf() {\n        return abstract();\n    }\n    endOf() {\n        return abstract();\n    }\n}\nvar adapters = {\n    _date: DateAdapterBase\n};\n\nfunction binarySearch(metaset, axis, value, intersect) {\n    const { controller , data , _sorted  } = metaset;\n    const iScale = controller._cachedMeta.iScale;\n    if (iScale && axis === iScale.axis && axis !== 'r' && _sorted && data.length) {\n        const lookupMethod = iScale._reversePixels ? _rlookupByKey : _lookupByKey;\n        if (!intersect) {\n            return lookupMethod(data, axis, value);\n        } else if (controller._sharedOptions) {\n            const el = data[0];\n            const range = typeof el.getRange === 'function' && el.getRange(axis);\n            if (range) {\n                const start = lookupMethod(data, axis, value - range);\n                const end = lookupMethod(data, axis, value + range);\n                return {\n                    lo: start.lo,\n                    hi: end.hi\n                };\n            }\n        }\n    }\n    return {\n        lo: 0,\n        hi: data.length - 1\n    };\n}\n function evaluateInteractionItems(chart, axis, position, handler, intersect) {\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    const value = position[axis];\n    for(let i = 0, ilen = metasets.length; i < ilen; ++i){\n        const { index , data  } = metasets[i];\n        const { lo , hi  } = binarySearch(metasets[i], axis, value, intersect);\n        for(let j = lo; j <= hi; ++j){\n            const element = data[j];\n            if (!element.skip) {\n                handler(element, index, j);\n            }\n        }\n    }\n}\n function getDistanceMetricForAxis(axis) {\n    const useX = axis.indexOf('x') !== -1;\n    const useY = axis.indexOf('y') !== -1;\n    return function(pt1, pt2) {\n        const deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;\n        const deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;\n        return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));\n    };\n}\n function getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) {\n    const items = [];\n    if (!includeInvisible && !chart.isPointInArea(position)) {\n        return items;\n    }\n    const evaluationFunc = function(element, datasetIndex, index) {\n        if (!includeInvisible && !_isPointInArea(element, chart.chartArea, 0)) {\n            return;\n        }\n        if (element.inRange(position.x, position.y, useFinalPosition)) {\n            items.push({\n                element,\n                datasetIndex,\n                index\n            });\n        }\n    };\n    evaluateInteractionItems(chart, axis, position, evaluationFunc, true);\n    return items;\n}\n function getNearestRadialItems(chart, position, axis, useFinalPosition) {\n    let items = [];\n    function evaluationFunc(element, datasetIndex, index) {\n        const { startAngle , endAngle  } = element.getProps([\n            'startAngle',\n            'endAngle'\n        ], useFinalPosition);\n        const { angle  } = getAngleFromPoint(element, {\n            x: position.x,\n            y: position.y\n        });\n        if (_angleBetween(angle, startAngle, endAngle)) {\n            items.push({\n                element,\n                datasetIndex,\n                index\n            });\n        }\n    }\n    evaluateInteractionItems(chart, axis, position, evaluationFunc);\n    return items;\n}\n function getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n    let items = [];\n    const distanceMetric = getDistanceMetricForAxis(axis);\n    let minDistance = Number.POSITIVE_INFINITY;\n    function evaluationFunc(element, datasetIndex, index) {\n        const inRange = element.inRange(position.x, position.y, useFinalPosition);\n        if (intersect && !inRange) {\n            return;\n        }\n        const center = element.getCenterPoint(useFinalPosition);\n        const pointInArea = !!includeInvisible || chart.isPointInArea(center);\n        if (!pointInArea && !inRange) {\n            return;\n        }\n        const distance = distanceMetric(position, center);\n        if (distance < minDistance) {\n            items = [\n                {\n                    element,\n                    datasetIndex,\n                    index\n                }\n            ];\n            minDistance = distance;\n        } else if (distance === minDistance) {\n            items.push({\n                element,\n                datasetIndex,\n                index\n            });\n        }\n    }\n    evaluateInteractionItems(chart, axis, position, evaluationFunc);\n    return items;\n}\n function getNearestItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n    if (!includeInvisible && !chart.isPointInArea(position)) {\n        return [];\n    }\n    return axis === 'r' && !intersect ? getNearestRadialItems(chart, position, axis, useFinalPosition) : getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible);\n}\n function getAxisItems(chart, position, axis, intersect, useFinalPosition) {\n    const items = [];\n    const rangeMethod = axis === 'x' ? 'inXRange' : 'inYRange';\n    let intersectsItem = false;\n    evaluateInteractionItems(chart, axis, position, (element, datasetIndex, index)=>{\n        if (element[rangeMethod](position[axis], useFinalPosition)) {\n            items.push({\n                element,\n                datasetIndex,\n                index\n            });\n            intersectsItem = intersectsItem || element.inRange(position.x, position.y, useFinalPosition);\n        }\n    });\n    if (intersect && !intersectsItem) {\n        return [];\n    }\n    return items;\n}\n var Interaction = {\n    evaluateInteractionItems,\n    modes: {\n index (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            const axis = options.axis || 'x';\n            const includeInvisible = options.includeInvisible || false;\n            const items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n            const elements = [];\n            if (!items.length) {\n                return [];\n            }\n            chart.getSortedVisibleDatasetMetas().forEach((meta)=>{\n                const index = items[0].index;\n                const element = meta.data[index];\n                if (element && !element.skip) {\n                    elements.push({\n                        element,\n                        datasetIndex: meta.index,\n                        index\n                    });\n                }\n            });\n            return elements;\n        },\n dataset (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            const axis = options.axis || 'xy';\n            const includeInvisible = options.includeInvisible || false;\n            let items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n            if (items.length > 0) {\n                const datasetIndex = items[0].datasetIndex;\n                const data = chart.getDatasetMeta(datasetIndex).data;\n                items = [];\n                for(let i = 0; i < data.length; ++i){\n                    items.push({\n                        element: data[i],\n                        datasetIndex,\n                        index: i\n                    });\n                }\n            }\n            return items;\n        },\n point (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            const axis = options.axis || 'xy';\n            const includeInvisible = options.includeInvisible || false;\n            return getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible);\n        },\n nearest (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            const axis = options.axis || 'xy';\n            const includeInvisible = options.includeInvisible || false;\n            return getNearestItems(chart, position, axis, options.intersect, useFinalPosition, includeInvisible);\n        },\n x (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            return getAxisItems(chart, position, 'x', options.intersect, useFinalPosition);\n        },\n y (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            return getAxisItems(chart, position, 'y', options.intersect, useFinalPosition);\n        }\n    }\n};\n\nconst STATIC_POSITIONS = [\n    'left',\n    'top',\n    'right',\n    'bottom'\n];\nfunction filterByPosition(array, position) {\n    return array.filter((v)=>v.pos === position);\n}\nfunction filterDynamicPositionByAxis(array, axis) {\n    return array.filter((v)=>STATIC_POSITIONS.indexOf(v.pos) === -1 && v.box.axis === axis);\n}\nfunction sortByWeight(array, reverse) {\n    return array.sort((a, b)=>{\n        const v0 = reverse ? b : a;\n        const v1 = reverse ? a : b;\n        return v0.weight === v1.weight ? v0.index - v1.index : v0.weight - v1.weight;\n    });\n}\nfunction wrapBoxes(boxes) {\n    const layoutBoxes = [];\n    let i, ilen, box, pos, stack, stackWeight;\n    for(i = 0, ilen = (boxes || []).length; i < ilen; ++i){\n        box = boxes[i];\n        ({ position: pos , options: { stack , stackWeight =1  }  } = box);\n        layoutBoxes.push({\n            index: i,\n            box,\n            pos,\n            horizontal: box.isHorizontal(),\n            weight: box.weight,\n            stack: stack && pos + stack,\n            stackWeight\n        });\n    }\n    return layoutBoxes;\n}\nfunction buildStacks(layouts) {\n    const stacks = {};\n    for (const wrap of layouts){\n        const { stack , pos , stackWeight  } = wrap;\n        if (!stack || !STATIC_POSITIONS.includes(pos)) {\n            continue;\n        }\n        const _stack = stacks[stack] || (stacks[stack] = {\n            count: 0,\n            placed: 0,\n            weight: 0,\n            size: 0\n        });\n        _stack.count++;\n        _stack.weight += stackWeight;\n    }\n    return stacks;\n}\n function setLayoutDims(layouts, params) {\n    const stacks = buildStacks(layouts);\n    const { vBoxMaxWidth , hBoxMaxHeight  } = params;\n    let i, ilen, layout;\n    for(i = 0, ilen = layouts.length; i < ilen; ++i){\n        layout = layouts[i];\n        const { fullSize  } = layout.box;\n        const stack = stacks[layout.stack];\n        const factor = stack && layout.stackWeight / stack.weight;\n        if (layout.horizontal) {\n            layout.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;\n            layout.height = hBoxMaxHeight;\n        } else {\n            layout.width = vBoxMaxWidth;\n            layout.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;\n        }\n    }\n    return stacks;\n}\nfunction buildLayoutBoxes(boxes) {\n    const layoutBoxes = wrapBoxes(boxes);\n    const fullSize = sortByWeight(layoutBoxes.filter((wrap)=>wrap.box.fullSize), true);\n    const left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);\n    const right = sortByWeight(filterByPosition(layoutBoxes, 'right'));\n    const top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);\n    const bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));\n    const centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, 'x');\n    const centerVertical = filterDynamicPositionByAxis(layoutBoxes, 'y');\n    return {\n        fullSize,\n        leftAndTop: left.concat(top),\n        rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),\n        chartArea: filterByPosition(layoutBoxes, 'chartArea'),\n        vertical: left.concat(right).concat(centerVertical),\n        horizontal: top.concat(bottom).concat(centerHorizontal)\n    };\n}\nfunction getCombinedMax(maxPadding, chartArea, a, b) {\n    return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);\n}\nfunction updateMaxPadding(maxPadding, boxPadding) {\n    maxPadding.top = Math.max(maxPadding.top, boxPadding.top);\n    maxPadding.left = Math.max(maxPadding.left, boxPadding.left);\n    maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);\n    maxPadding.right = Math.max(maxPadding.right, boxPadding.right);\n}\nfunction updateDims(chartArea, params, layout, stacks) {\n    const { pos , box  } = layout;\n    const maxPadding = chartArea.maxPadding;\n    if (!isObject(pos)) {\n        if (layout.size) {\n            chartArea[pos] -= layout.size;\n        }\n        const stack = stacks[layout.stack] || {\n            size: 0,\n            count: 1\n        };\n        stack.size = Math.max(stack.size, layout.horizontal ? box.height : box.width);\n        layout.size = stack.size / stack.count;\n        chartArea[pos] += layout.size;\n    }\n    if (box.getPadding) {\n        updateMaxPadding(maxPadding, box.getPadding());\n    }\n    const newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right'));\n    const newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom'));\n    const widthChanged = newWidth !== chartArea.w;\n    const heightChanged = newHeight !== chartArea.h;\n    chartArea.w = newWidth;\n    chartArea.h = newHeight;\n    return layout.horizontal ? {\n        same: widthChanged,\n        other: heightChanged\n    } : {\n        same: heightChanged,\n        other: widthChanged\n    };\n}\nfunction handleMaxPadding(chartArea) {\n    const maxPadding = chartArea.maxPadding;\n    function updatePos(pos) {\n        const change = Math.max(maxPadding[pos] - chartArea[pos], 0);\n        chartArea[pos] += change;\n        return change;\n    }\n    chartArea.y += updatePos('top');\n    chartArea.x += updatePos('left');\n    updatePos('right');\n    updatePos('bottom');\n}\nfunction getMargins(horizontal, chartArea) {\n    const maxPadding = chartArea.maxPadding;\n    function marginForPositions(positions) {\n        const margin = {\n            left: 0,\n            top: 0,\n            right: 0,\n            bottom: 0\n        };\n        positions.forEach((pos)=>{\n            margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);\n        });\n        return margin;\n    }\n    return horizontal ? marginForPositions([\n        'left',\n        'right'\n    ]) : marginForPositions([\n        'top',\n        'bottom'\n    ]);\n}\nfunction fitBoxes(boxes, chartArea, params, stacks) {\n    const refitBoxes = [];\n    let i, ilen, layout, box, refit, changed;\n    for(i = 0, ilen = boxes.length, refit = 0; i < ilen; ++i){\n        layout = boxes[i];\n        box = layout.box;\n        box.update(layout.width || chartArea.w, layout.height || chartArea.h, getMargins(layout.horizontal, chartArea));\n        const { same , other  } = updateDims(chartArea, params, layout, stacks);\n        refit |= same && refitBoxes.length;\n        changed = changed || other;\n        if (!box.fullSize) {\n            refitBoxes.push(layout);\n        }\n    }\n    return refit && fitBoxes(refitBoxes, chartArea, params, stacks) || changed;\n}\nfunction setBoxDims(box, left, top, width, height) {\n    box.top = top;\n    box.left = left;\n    box.right = left + width;\n    box.bottom = top + height;\n    box.width = width;\n    box.height = height;\n}\nfunction placeBoxes(boxes, chartArea, params, stacks) {\n    const userPadding = params.padding;\n    let { x , y  } = chartArea;\n    for (const layout of boxes){\n        const box = layout.box;\n        const stack = stacks[layout.stack] || {\n            count: 1,\n            placed: 0,\n            weight: 1\n        };\n        const weight = layout.stackWeight / stack.weight || 1;\n        if (layout.horizontal) {\n            const width = chartArea.w * weight;\n            const height = stack.size || box.height;\n            if (defined(stack.start)) {\n                y = stack.start;\n            }\n            if (box.fullSize) {\n                setBoxDims(box, userPadding.left, y, params.outerWidth - userPadding.right - userPadding.left, height);\n            } else {\n                setBoxDims(box, chartArea.left + stack.placed, y, width, height);\n            }\n            stack.start = y;\n            stack.placed += width;\n            y = box.bottom;\n        } else {\n            const height = chartArea.h * weight;\n            const width = stack.size || box.width;\n            if (defined(stack.start)) {\n                x = stack.start;\n            }\n            if (box.fullSize) {\n                setBoxDims(box, x, userPadding.top, width, params.outerHeight - userPadding.bottom - userPadding.top);\n            } else {\n                setBoxDims(box, x, chartArea.top + stack.placed, width, height);\n            }\n            stack.start = x;\n            stack.placed += height;\n            x = box.right;\n        }\n    }\n    chartArea.x = x;\n    chartArea.y = y;\n}\nvar layouts = {\n addBox (chart, item) {\n        if (!chart.boxes) {\n            chart.boxes = [];\n        }\n        item.fullSize = item.fullSize || false;\n        item.position = item.position || 'top';\n        item.weight = item.weight || 0;\n        item._layers = item._layers || function() {\n            return [\n                {\n                    z: 0,\n                    draw (chartArea) {\n                        item.draw(chartArea);\n                    }\n                }\n            ];\n        };\n        chart.boxes.push(item);\n    },\n removeBox (chart, layoutItem) {\n        const index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;\n        if (index !== -1) {\n            chart.boxes.splice(index, 1);\n        }\n    },\n configure (chart, item, options) {\n        item.fullSize = options.fullSize;\n        item.position = options.position;\n        item.weight = options.weight;\n    },\n update (chart, width, height, minPadding) {\n        if (!chart) {\n            return;\n        }\n        const padding = toPadding(chart.options.layout.padding);\n        const availableWidth = Math.max(width - padding.width, 0);\n        const availableHeight = Math.max(height - padding.height, 0);\n        const boxes = buildLayoutBoxes(chart.boxes);\n        const verticalBoxes = boxes.vertical;\n        const horizontalBoxes = boxes.horizontal;\n        each(chart.boxes, (box)=>{\n            if (typeof box.beforeLayout === 'function') {\n                box.beforeLayout();\n            }\n        });\n        const visibleVerticalBoxCount = verticalBoxes.reduce((total, wrap)=>wrap.box.options && wrap.box.options.display === false ? total : total + 1, 0) || 1;\n        const params = Object.freeze({\n            outerWidth: width,\n            outerHeight: height,\n            padding,\n            availableWidth,\n            availableHeight,\n            vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,\n            hBoxMaxHeight: availableHeight / 2\n        });\n        const maxPadding = Object.assign({}, padding);\n        updateMaxPadding(maxPadding, toPadding(minPadding));\n        const chartArea = Object.assign({\n            maxPadding,\n            w: availableWidth,\n            h: availableHeight,\n            x: padding.left,\n            y: padding.top\n        }, padding);\n        const stacks = setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);\n        fitBoxes(boxes.fullSize, chartArea, params, stacks);\n        fitBoxes(verticalBoxes, chartArea, params, stacks);\n        if (fitBoxes(horizontalBoxes, chartArea, params, stacks)) {\n            fitBoxes(verticalBoxes, chartArea, params, stacks);\n        }\n        handleMaxPadding(chartArea);\n        placeBoxes(boxes.leftAndTop, chartArea, params, stacks);\n        chartArea.x += chartArea.w;\n        chartArea.y += chartArea.h;\n        placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);\n        chart.chartArea = {\n            left: chartArea.left,\n            top: chartArea.top,\n            right: chartArea.left + chartArea.w,\n            bottom: chartArea.top + chartArea.h,\n            height: chartArea.h,\n            width: chartArea.w\n        };\n        each(boxes.chartArea, (layout)=>{\n            const box = layout.box;\n            Object.assign(box, chart.chartArea);\n            box.update(chartArea.w, chartArea.h, {\n                left: 0,\n                top: 0,\n                right: 0,\n                bottom: 0\n            });\n        });\n    }\n};\n\nclass BasePlatform {\n acquireContext(canvas, aspectRatio) {}\n releaseContext(context) {\n        return false;\n    }\n addEventListener(chart, type, listener) {}\n removeEventListener(chart, type, listener) {}\n getDevicePixelRatio() {\n        return 1;\n    }\n getMaximumSize(element, width, height, aspectRatio) {\n        width = Math.max(0, width || element.width);\n        height = height || element.height;\n        return {\n            width,\n            height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)\n        };\n    }\n isAttached(canvas) {\n        return true;\n    }\n updateConfig(config) {\n    }\n}\n\nclass BasicPlatform extends BasePlatform {\n    acquireContext(item) {\n        return item && item.getContext && item.getContext('2d') || null;\n    }\n    updateConfig(config) {\n        config.options.animation = false;\n    }\n}\n\nconst EXPANDO_KEY = '$chartjs';\n const EVENT_TYPES = {\n    touchstart: 'mousedown',\n    touchmove: 'mousemove',\n    touchend: 'mouseup',\n    pointerenter: 'mouseenter',\n    pointerdown: 'mousedown',\n    pointermove: 'mousemove',\n    pointerup: 'mouseup',\n    pointerleave: 'mouseout',\n    pointerout: 'mouseout'\n};\nconst isNullOrEmpty = (value)=>value === null || value === '';\n function initCanvas(canvas, aspectRatio) {\n    const style = canvas.style;\n    const renderHeight = canvas.getAttribute('height');\n    const renderWidth = canvas.getAttribute('width');\n    canvas[EXPANDO_KEY] = {\n        initial: {\n            height: renderHeight,\n            width: renderWidth,\n            style: {\n                display: style.display,\n                height: style.height,\n                width: style.width\n            }\n        }\n    };\n    style.display = style.display || 'block';\n    style.boxSizing = style.boxSizing || 'border-box';\n    if (isNullOrEmpty(renderWidth)) {\n        const displayWidth = readUsedSize(canvas, 'width');\n        if (displayWidth !== undefined) {\n            canvas.width = displayWidth;\n        }\n    }\n    if (isNullOrEmpty(renderHeight)) {\n        if (canvas.style.height === '') {\n            canvas.height = canvas.width / (aspectRatio || 2);\n        } else {\n            const displayHeight = readUsedSize(canvas, 'height');\n            if (displayHeight !== undefined) {\n                canvas.height = displayHeight;\n            }\n        }\n    }\n    return canvas;\n}\nconst eventListenerOptions = supportsEventListenerOptions ? {\n    passive: true\n} : false;\nfunction addListener(node, type, listener) {\n    if (node) {\n        node.addEventListener(type, listener, eventListenerOptions);\n    }\n}\nfunction removeListener(chart, type, listener) {\n    if (chart && chart.canvas) {\n        chart.canvas.removeEventListener(type, listener, eventListenerOptions);\n    }\n}\nfunction fromNativeEvent(event, chart) {\n    const type = EVENT_TYPES[event.type] || event.type;\n    const { x , y  } = getRelativePosition(event, chart);\n    return {\n        type,\n        chart,\n        native: event,\n        x: x !== undefined ? x : null,\n        y: y !== undefined ? y : null\n    };\n}\nfunction nodeListContains(nodeList, canvas) {\n    for (const node of nodeList){\n        if (node === canvas || node.contains(canvas)) {\n            return true;\n        }\n    }\n}\nfunction createAttachObserver(chart, type, listener) {\n    const canvas = chart.canvas;\n    const observer = new MutationObserver((entries)=>{\n        let trigger = false;\n        for (const entry of entries){\n            trigger = trigger || nodeListContains(entry.addedNodes, canvas);\n            trigger = trigger && !nodeListContains(entry.removedNodes, canvas);\n        }\n        if (trigger) {\n            listener();\n        }\n    });\n    observer.observe(document, {\n        childList: true,\n        subtree: true\n    });\n    return observer;\n}\nfunction createDetachObserver(chart, type, listener) {\n    const canvas = chart.canvas;\n    const observer = new MutationObserver((entries)=>{\n        let trigger = false;\n        for (const entry of entries){\n            trigger = trigger || nodeListContains(entry.removedNodes, canvas);\n            trigger = trigger && !nodeListContains(entry.addedNodes, canvas);\n        }\n        if (trigger) {\n            listener();\n        }\n    });\n    observer.observe(document, {\n        childList: true,\n        subtree: true\n    });\n    return observer;\n}\nconst drpListeningCharts = new Map();\nlet oldDevicePixelRatio = 0;\nfunction onWindowResize() {\n    const dpr = window.devicePixelRatio;\n    if (dpr === oldDevicePixelRatio) {\n        return;\n    }\n    oldDevicePixelRatio = dpr;\n    drpListeningCharts.forEach((resize, chart)=>{\n        if (chart.currentDevicePixelRatio !== dpr) {\n            resize();\n        }\n    });\n}\nfunction listenDevicePixelRatioChanges(chart, resize) {\n    if (!drpListeningCharts.size) {\n        window.addEventListener('resize', onWindowResize);\n    }\n    drpListeningCharts.set(chart, resize);\n}\nfunction unlistenDevicePixelRatioChanges(chart) {\n    drpListeningCharts.delete(chart);\n    if (!drpListeningCharts.size) {\n        window.removeEventListener('resize', onWindowResize);\n    }\n}\nfunction createResizeObserver(chart, type, listener) {\n    const canvas = chart.canvas;\n    const container = canvas && _getParentNode(canvas);\n    if (!container) {\n        return;\n    }\n    const resize = throttled((width, height)=>{\n        const w = container.clientWidth;\n        listener(width, height);\n        if (w < container.clientWidth) {\n            listener();\n        }\n    }, window);\n    const observer = new ResizeObserver((entries)=>{\n        const entry = entries[0];\n        const width = entry.contentRect.width;\n        const height = entry.contentRect.height;\n        if (width === 0 && height === 0) {\n            return;\n        }\n        resize(width, height);\n    });\n    observer.observe(container);\n    listenDevicePixelRatioChanges(chart, resize);\n    return observer;\n}\nfunction releaseObserver(chart, type, observer) {\n    if (observer) {\n        observer.disconnect();\n    }\n    if (type === 'resize') {\n        unlistenDevicePixelRatioChanges(chart);\n    }\n}\nfunction createProxyAndListen(chart, type, listener) {\n    const canvas = chart.canvas;\n    const proxy = throttled((event)=>{\n        if (chart.ctx !== null) {\n            listener(fromNativeEvent(event, chart));\n        }\n    }, chart);\n    addListener(canvas, type, proxy);\n    return proxy;\n}\n class DomPlatform extends BasePlatform {\n acquireContext(canvas, aspectRatio) {\n        const context = canvas && canvas.getContext && canvas.getContext('2d');\n        if (context && context.canvas === canvas) {\n            initCanvas(canvas, aspectRatio);\n            return context;\n        }\n        return null;\n    }\n releaseContext(context) {\n        const canvas = context.canvas;\n        if (!canvas[EXPANDO_KEY]) {\n            return false;\n        }\n        const initial = canvas[EXPANDO_KEY].initial;\n        [\n            'height',\n            'width'\n        ].forEach((prop)=>{\n            const value = initial[prop];\n            if (isNullOrUndef(value)) {\n                canvas.removeAttribute(prop);\n            } else {\n                canvas.setAttribute(prop, value);\n            }\n        });\n        const style = initial.style || {};\n        Object.keys(style).forEach((key)=>{\n            canvas.style[key] = style[key];\n        });\n        canvas.width = canvas.width;\n        delete canvas[EXPANDO_KEY];\n        return true;\n    }\n addEventListener(chart, type, listener) {\n        this.removeEventListener(chart, type);\n        const proxies = chart.$proxies || (chart.$proxies = {});\n        const handlers = {\n            attach: createAttachObserver,\n            detach: createDetachObserver,\n            resize: createResizeObserver\n        };\n        const handler = handlers[type] || createProxyAndListen;\n        proxies[type] = handler(chart, type, listener);\n    }\n removeEventListener(chart, type) {\n        const proxies = chart.$proxies || (chart.$proxies = {});\n        const proxy = proxies[type];\n        if (!proxy) {\n            return;\n        }\n        const handlers = {\n            attach: releaseObserver,\n            detach: releaseObserver,\n            resize: releaseObserver\n        };\n        const handler = handlers[type] || removeListener;\n        handler(chart, type, proxy);\n        proxies[type] = undefined;\n    }\n    getDevicePixelRatio() {\n        return window.devicePixelRatio;\n    }\n getMaximumSize(canvas, width, height, aspectRatio) {\n        return getMaximumSize(canvas, width, height, aspectRatio);\n    }\n isAttached(canvas) {\n        const container = _getParentNode(canvas);\n        return !!(container && container.isConnected);\n    }\n}\n\nfunction _detectPlatform(canvas) {\n    if (!_isDomSupported() || typeof OffscreenCanvas !== 'undefined' && canvas instanceof OffscreenCanvas) {\n        return BasicPlatform;\n    }\n    return DomPlatform;\n}\n\nclass Element {\n    static defaults = {};\n    static defaultRoutes = undefined;\n    x;\n    y;\n    active = false;\n    options;\n    $animations;\n    tooltipPosition(useFinalPosition) {\n        const { x , y  } = this.getProps([\n            'x',\n            'y'\n        ], useFinalPosition);\n        return {\n            x,\n            y\n        };\n    }\n    hasValue() {\n        return isNumber(this.x) && isNumber(this.y);\n    }\n    getProps(props, final) {\n        const anims = this.$animations;\n        if (!final || !anims) {\n            // let's not create an object, if not needed\n            return this;\n        }\n        const ret = {};\n        props.forEach((prop)=>{\n            ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : this[prop];\n        });\n        return ret;\n    }\n}\n\nfunction autoSkip(scale, ticks) {\n    const tickOpts = scale.options.ticks;\n    const determinedMaxTicks = determineMaxTicks(scale);\n    const ticksLimit = Math.min(tickOpts.maxTicksLimit || determinedMaxTicks, determinedMaxTicks);\n    const majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];\n    const numMajorIndices = majorIndices.length;\n    const first = majorIndices[0];\n    const last = majorIndices[numMajorIndices - 1];\n    const newTicks = [];\n    if (numMajorIndices > ticksLimit) {\n        skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);\n        return newTicks;\n    }\n    const spacing = calculateSpacing(majorIndices, ticks, ticksLimit);\n    if (numMajorIndices > 0) {\n        let i, ilen;\n        const avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;\n        skip(ticks, newTicks, spacing, isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);\n        for(i = 0, ilen = numMajorIndices - 1; i < ilen; i++){\n            skip(ticks, newTicks, spacing, majorIndices[i], majorIndices[i + 1]);\n        }\n        skip(ticks, newTicks, spacing, last, isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);\n        return newTicks;\n    }\n    skip(ticks, newTicks, spacing);\n    return newTicks;\n}\nfunction determineMaxTicks(scale) {\n    const offset = scale.options.offset;\n    const tickLength = scale._tickSize();\n    const maxScale = scale._length / tickLength + (offset ? 0 : 1);\n    const maxChart = scale._maxLength / tickLength;\n    return Math.floor(Math.min(maxScale, maxChart));\n}\n function calculateSpacing(majorIndices, ticks, ticksLimit) {\n    const evenMajorSpacing = getEvenSpacing(majorIndices);\n    const spacing = ticks.length / ticksLimit;\n    if (!evenMajorSpacing) {\n        return Math.max(spacing, 1);\n    }\n    const factors = _factorize(evenMajorSpacing);\n    for(let i = 0, ilen = factors.length - 1; i < ilen; i++){\n        const factor = factors[i];\n        if (factor > spacing) {\n            return factor;\n        }\n    }\n    return Math.max(spacing, 1);\n}\n function getMajorIndices(ticks) {\n    const result = [];\n    let i, ilen;\n    for(i = 0, ilen = ticks.length; i < ilen; i++){\n        if (ticks[i].major) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n function skipMajors(ticks, newTicks, majorIndices, spacing) {\n    let count = 0;\n    let next = majorIndices[0];\n    let i;\n    spacing = Math.ceil(spacing);\n    for(i = 0; i < ticks.length; i++){\n        if (i === next) {\n            newTicks.push(ticks[i]);\n            count++;\n            next = majorIndices[count * spacing];\n        }\n    }\n}\n function skip(ticks, newTicks, spacing, majorStart, majorEnd) {\n    const start = valueOrDefault(majorStart, 0);\n    const end = Math.min(valueOrDefault(majorEnd, ticks.length), ticks.length);\n    let count = 0;\n    let length, i, next;\n    spacing = Math.ceil(spacing);\n    if (majorEnd) {\n        length = majorEnd - majorStart;\n        spacing = length / Math.floor(length / spacing);\n    }\n    next = start;\n    while(next < 0){\n        count++;\n        next = Math.round(start + count * spacing);\n    }\n    for(i = Math.max(start, 0); i < end; i++){\n        if (i === next) {\n            newTicks.push(ticks[i]);\n            count++;\n            next = Math.round(start + count * spacing);\n        }\n    }\n}\n function getEvenSpacing(arr) {\n    const len = arr.length;\n    let i, diff;\n    if (len < 2) {\n        return false;\n    }\n    for(diff = arr[0], i = 1; i < len; ++i){\n        if (arr[i] - arr[i - 1] !== diff) {\n            return false;\n        }\n    }\n    return diff;\n}\n\nconst reverseAlign = (align)=>align === 'left' ? 'right' : align === 'right' ? 'left' : align;\nconst offsetFromEdge = (scale, edge, offset)=>edge === 'top' || edge === 'left' ? scale[edge] + offset : scale[edge] - offset;\nconst getTicksLimit = (ticksLength, maxTicksLimit)=>Math.min(maxTicksLimit || ticksLength, ticksLength);\n function sample(arr, numItems) {\n    const result = [];\n    const increment = arr.length / numItems;\n    const len = arr.length;\n    let i = 0;\n    for(; i < len; i += increment){\n        result.push(arr[Math.floor(i)]);\n    }\n    return result;\n}\n function getPixelForGridLine(scale, index, offsetGridLines) {\n    const length = scale.ticks.length;\n    const validIndex = Math.min(index, length - 1);\n    const start = scale._startPixel;\n    const end = scale._endPixel;\n    const epsilon = 1e-6;\n    let lineValue = scale.getPixelForTick(validIndex);\n    let offset;\n    if (offsetGridLines) {\n        if (length === 1) {\n            offset = Math.max(lineValue - start, end - lineValue);\n        } else if (index === 0) {\n            offset = (scale.getPixelForTick(1) - lineValue) / 2;\n        } else {\n            offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;\n        }\n        lineValue += validIndex < index ? offset : -offset;\n        if (lineValue < start - epsilon || lineValue > end + epsilon) {\n            return;\n        }\n    }\n    return lineValue;\n}\n function garbageCollect(caches, length) {\n    each(caches, (cache)=>{\n        const gc = cache.gc;\n        const gcLen = gc.length / 2;\n        let i;\n        if (gcLen > length) {\n            for(i = 0; i < gcLen; ++i){\n                delete cache.data[gc[i]];\n            }\n            gc.splice(0, gcLen);\n        }\n    });\n}\n function getTickMarkLength(options) {\n    return options.drawTicks ? options.tickLength : 0;\n}\n function getTitleHeight(options, fallback) {\n    if (!options.display) {\n        return 0;\n    }\n    const font = toFont(options.font, fallback);\n    const padding = toPadding(options.padding);\n    const lines = isArray(options.text) ? options.text.length : 1;\n    return lines * font.lineHeight + padding.height;\n}\nfunction createScaleContext(parent, scale) {\n    return createContext(parent, {\n        scale,\n        type: 'scale'\n    });\n}\nfunction createTickContext(parent, index, tick) {\n    return createContext(parent, {\n        tick,\n        index,\n        type: 'tick'\n    });\n}\nfunction titleAlign(align, position, reverse) {\n     let ret = _toLeftRightCenter(align);\n    if (reverse && position !== 'right' || !reverse && position === 'right') {\n        ret = reverseAlign(ret);\n    }\n    return ret;\n}\nfunction titleArgs(scale, offset, position, align) {\n    const { top , left , bottom , right , chart  } = scale;\n    const { chartArea , scales  } = chart;\n    let rotation = 0;\n    let maxWidth, titleX, titleY;\n    const height = bottom - top;\n    const width = right - left;\n    if (scale.isHorizontal()) {\n        titleX = _alignStartEnd(align, left, right);\n        if (isObject(position)) {\n            const positionAxisID = Object.keys(position)[0];\n            const value = position[positionAxisID];\n            titleY = scales[positionAxisID].getPixelForValue(value) + height - offset;\n        } else if (position === 'center') {\n            titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset;\n        } else {\n            titleY = offsetFromEdge(scale, position, offset);\n        }\n        maxWidth = right - left;\n    } else {\n        if (isObject(position)) {\n            const positionAxisID = Object.keys(position)[0];\n            const value = position[positionAxisID];\n            titleX = scales[positionAxisID].getPixelForValue(value) - width + offset;\n        } else if (position === 'center') {\n            titleX = (chartArea.left + chartArea.right) / 2 - width + offset;\n        } else {\n            titleX = offsetFromEdge(scale, position, offset);\n        }\n        titleY = _alignStartEnd(align, bottom, top);\n        rotation = position === 'left' ? -HALF_PI : HALF_PI;\n    }\n    return {\n        titleX,\n        titleY,\n        maxWidth,\n        rotation\n    };\n}\nclass Scale extends Element {\n    constructor(cfg){\n        super();\n         this.id = cfg.id;\n         this.type = cfg.type;\n         this.options = undefined;\n         this.ctx = cfg.ctx;\n         this.chart = cfg.chart;\n         this.top = undefined;\n         this.bottom = undefined;\n         this.left = undefined;\n         this.right = undefined;\n         this.width = undefined;\n         this.height = undefined;\n        this._margins = {\n            left: 0,\n            right: 0,\n            top: 0,\n            bottom: 0\n        };\n         this.maxWidth = undefined;\n         this.maxHeight = undefined;\n         this.paddingTop = undefined;\n         this.paddingBottom = undefined;\n         this.paddingLeft = undefined;\n         this.paddingRight = undefined;\n         this.axis = undefined;\n         this.labelRotation = undefined;\n        this.min = undefined;\n        this.max = undefined;\n        this._range = undefined;\n         this.ticks = [];\n         this._gridLineItems = null;\n         this._labelItems = null;\n         this._labelSizes = null;\n        this._length = 0;\n        this._maxLength = 0;\n        this._longestTextCache = {};\n         this._startPixel = undefined;\n         this._endPixel = undefined;\n        this._reversePixels = false;\n        this._userMax = undefined;\n        this._userMin = undefined;\n        this._suggestedMax = undefined;\n        this._suggestedMin = undefined;\n        this._ticksLength = 0;\n        this._borderValue = 0;\n        this._cache = {};\n        this._dataLimitsCached = false;\n        this.$context = undefined;\n    }\n init(options) {\n        this.options = options.setContext(this.getContext());\n        this.axis = options.axis;\n        this._userMin = this.parse(options.min);\n        this._userMax = this.parse(options.max);\n        this._suggestedMin = this.parse(options.suggestedMin);\n        this._suggestedMax = this.parse(options.suggestedMax);\n    }\n parse(raw, index) {\n        return raw;\n    }\n getUserBounds() {\n        let { _userMin , _userMax , _suggestedMin , _suggestedMax  } = this;\n        _userMin = finiteOrDefault(_userMin, Number.POSITIVE_INFINITY);\n        _userMax = finiteOrDefault(_userMax, Number.NEGATIVE_INFINITY);\n        _suggestedMin = finiteOrDefault(_suggestedMin, Number.POSITIVE_INFINITY);\n        _suggestedMax = finiteOrDefault(_suggestedMax, Number.NEGATIVE_INFINITY);\n        return {\n            min: finiteOrDefault(_userMin, _suggestedMin),\n            max: finiteOrDefault(_userMax, _suggestedMax),\n            minDefined: isNumberFinite(_userMin),\n            maxDefined: isNumberFinite(_userMax)\n        };\n    }\n getMinMax(canStack) {\n        let { min , max , minDefined , maxDefined  } = this.getUserBounds();\n        let range;\n        if (minDefined && maxDefined) {\n            return {\n                min,\n                max\n            };\n        }\n        const metas = this.getMatchingVisibleMetas();\n        for(let i = 0, ilen = metas.length; i < ilen; ++i){\n            range = metas[i].controller.getMinMax(this, canStack);\n            if (!minDefined) {\n                min = Math.min(min, range.min);\n            }\n            if (!maxDefined) {\n                max = Math.max(max, range.max);\n            }\n        }\n        min = maxDefined && min > max ? max : min;\n        max = minDefined && min > max ? min : max;\n        return {\n            min: finiteOrDefault(min, finiteOrDefault(max, min)),\n            max: finiteOrDefault(max, finiteOrDefault(min, max))\n        };\n    }\n getPadding() {\n        return {\n            left: this.paddingLeft || 0,\n            top: this.paddingTop || 0,\n            right: this.paddingRight || 0,\n            bottom: this.paddingBottom || 0\n        };\n    }\n getTicks() {\n        return this.ticks;\n    }\n getLabels() {\n        const data = this.chart.data;\n        return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];\n    }\n getLabelItems(chartArea = this.chart.chartArea) {\n        const items = this._labelItems || (this._labelItems = this._computeLabelItems(chartArea));\n        return items;\n    }\n    beforeLayout() {\n        this._cache = {};\n        this._dataLimitsCached = false;\n    }\n    beforeUpdate() {\n        callback(this.options.beforeUpdate, [\n            this\n        ]);\n    }\n update(maxWidth, maxHeight, margins) {\n        const { beginAtZero , grace , ticks: tickOpts  } = this.options;\n        const sampleSize = tickOpts.sampleSize;\n        this.beforeUpdate();\n        this.maxWidth = maxWidth;\n        this.maxHeight = maxHeight;\n        this._margins = margins = Object.assign({\n            left: 0,\n            right: 0,\n            top: 0,\n            bottom: 0\n        }, margins);\n        this.ticks = null;\n        this._labelSizes = null;\n        this._gridLineItems = null;\n        this._labelItems = null;\n        this.beforeSetDimensions();\n        this.setDimensions();\n        this.afterSetDimensions();\n        this._maxLength = this.isHorizontal() ? this.width + margins.left + margins.right : this.height + margins.top + margins.bottom;\n        if (!this._dataLimitsCached) {\n            this.beforeDataLimits();\n            this.determineDataLimits();\n            this.afterDataLimits();\n            this._range = _addGrace(this, grace, beginAtZero);\n            this._dataLimitsCached = true;\n        }\n        this.beforeBuildTicks();\n        this.ticks = this.buildTicks() || [];\n        this.afterBuildTicks();\n        const samplingEnabled = sampleSize < this.ticks.length;\n        this._convertTicksToLabels(samplingEnabled ? sample(this.ticks, sampleSize) : this.ticks);\n        this.configure();\n        this.beforeCalculateLabelRotation();\n        this.calculateLabelRotation();\n        this.afterCalculateLabelRotation();\n        if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto')) {\n            this.ticks = autoSkip(this, this.ticks);\n            this._labelSizes = null;\n            this.afterAutoSkip();\n        }\n        if (samplingEnabled) {\n            this._convertTicksToLabels(this.ticks);\n        }\n        this.beforeFit();\n        this.fit();\n        this.afterFit();\n        this.afterUpdate();\n    }\n configure() {\n        let reversePixels = this.options.reverse;\n        let startPixel, endPixel;\n        if (this.isHorizontal()) {\n            startPixel = this.left;\n            endPixel = this.right;\n        } else {\n            startPixel = this.top;\n            endPixel = this.bottom;\n            reversePixels = !reversePixels;\n        }\n        this._startPixel = startPixel;\n        this._endPixel = endPixel;\n        this._reversePixels = reversePixels;\n        this._length = endPixel - startPixel;\n        this._alignToPixels = this.options.alignToPixels;\n    }\n    afterUpdate() {\n        callback(this.options.afterUpdate, [\n            this\n        ]);\n    }\n    beforeSetDimensions() {\n        callback(this.options.beforeSetDimensions, [\n            this\n        ]);\n    }\n    setDimensions() {\n        if (this.isHorizontal()) {\n            this.width = this.maxWidth;\n            this.left = 0;\n            this.right = this.width;\n        } else {\n            this.height = this.maxHeight;\n            this.top = 0;\n            this.bottom = this.height;\n        }\n        this.paddingLeft = 0;\n        this.paddingTop = 0;\n        this.paddingRight = 0;\n        this.paddingBottom = 0;\n    }\n    afterSetDimensions() {\n        callback(this.options.afterSetDimensions, [\n            this\n        ]);\n    }\n    _callHooks(name) {\n        this.chart.notifyPlugins(name, this.getContext());\n        callback(this.options[name], [\n            this\n        ]);\n    }\n    beforeDataLimits() {\n        this._callHooks('beforeDataLimits');\n    }\n    determineDataLimits() {}\n    afterDataLimits() {\n        this._callHooks('afterDataLimits');\n    }\n    beforeBuildTicks() {\n        this._callHooks('beforeBuildTicks');\n    }\n buildTicks() {\n        return [];\n    }\n    afterBuildTicks() {\n        this._callHooks('afterBuildTicks');\n    }\n    beforeTickToLabelConversion() {\n        callback(this.options.beforeTickToLabelConversion, [\n            this\n        ]);\n    }\n generateTickLabels(ticks) {\n        const tickOpts = this.options.ticks;\n        let i, ilen, tick;\n        for(i = 0, ilen = ticks.length; i < ilen; i++){\n            tick = ticks[i];\n            tick.label = callback(tickOpts.callback, [\n                tick.value,\n                i,\n                ticks\n            ], this);\n        }\n    }\n    afterTickToLabelConversion() {\n        callback(this.options.afterTickToLabelConversion, [\n            this\n        ]);\n    }\n    beforeCalculateLabelRotation() {\n        callback(this.options.beforeCalculateLabelRotation, [\n            this\n        ]);\n    }\n    calculateLabelRotation() {\n        const options = this.options;\n        const tickOpts = options.ticks;\n        const numTicks = getTicksLimit(this.ticks.length, options.ticks.maxTicksLimit);\n        const minRotation = tickOpts.minRotation || 0;\n        const maxRotation = tickOpts.maxRotation;\n        let labelRotation = minRotation;\n        let tickWidth, maxHeight, maxLabelDiagonal;\n        if (!this._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !this.isHorizontal()) {\n            this.labelRotation = minRotation;\n            return;\n        }\n        const labelSizes = this._getLabelSizes();\n        const maxLabelWidth = labelSizes.widest.width;\n        const maxLabelHeight = labelSizes.highest.height;\n        const maxWidth = _limitValue(this.chart.width - maxLabelWidth, 0, this.maxWidth);\n        tickWidth = options.offset ? this.maxWidth / numTicks : maxWidth / (numTicks - 1);\n        if (maxLabelWidth + 6 > tickWidth) {\n            tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));\n            maxHeight = this.maxHeight - getTickMarkLength(options.grid) - tickOpts.padding - getTitleHeight(options.title, this.chart.options.font);\n            maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);\n            labelRotation = toDegrees(Math.min(Math.asin(_limitValue((labelSizes.highest.height + 6) / tickWidth, -1, 1)), Math.asin(_limitValue(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin(_limitValue(maxLabelHeight / maxLabelDiagonal, -1, 1))));\n            labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));\n        }\n        this.labelRotation = labelRotation;\n    }\n    afterCalculateLabelRotation() {\n        callback(this.options.afterCalculateLabelRotation, [\n            this\n        ]);\n    }\n    afterAutoSkip() {}\n    beforeFit() {\n        callback(this.options.beforeFit, [\n            this\n        ]);\n    }\n    fit() {\n        const minSize = {\n            width: 0,\n            height: 0\n        };\n        const { chart , options: { ticks: tickOpts , title: titleOpts , grid: gridOpts  }  } = this;\n        const display = this._isVisible();\n        const isHorizontal = this.isHorizontal();\n        if (display) {\n            const titleHeight = getTitleHeight(titleOpts, chart.options.font);\n            if (isHorizontal) {\n                minSize.width = this.maxWidth;\n                minSize.height = getTickMarkLength(gridOpts) + titleHeight;\n            } else {\n                minSize.height = this.maxHeight;\n                minSize.width = getTickMarkLength(gridOpts) + titleHeight;\n            }\n            if (tickOpts.display && this.ticks.length) {\n                const { first , last , widest , highest  } = this._getLabelSizes();\n                const tickPadding = tickOpts.padding * 2;\n                const angleRadians = toRadians(this.labelRotation);\n                const cos = Math.cos(angleRadians);\n                const sin = Math.sin(angleRadians);\n                if (isHorizontal) {\n                    const labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;\n                    minSize.height = Math.min(this.maxHeight, minSize.height + labelHeight + tickPadding);\n                } else {\n                    const labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;\n                    minSize.width = Math.min(this.maxWidth, minSize.width + labelWidth + tickPadding);\n                }\n                this._calculatePadding(first, last, sin, cos);\n            }\n        }\n        this._handleMargins();\n        if (isHorizontal) {\n            this.width = this._length = chart.width - this._margins.left - this._margins.right;\n            this.height = minSize.height;\n        } else {\n            this.width = minSize.width;\n            this.height = this._length = chart.height - this._margins.top - this._margins.bottom;\n        }\n    }\n    _calculatePadding(first, last, sin, cos) {\n        const { ticks: { align , padding  } , position  } = this.options;\n        const isRotated = this.labelRotation !== 0;\n        const labelsBelowTicks = position !== 'top' && this.axis === 'x';\n        if (this.isHorizontal()) {\n            const offsetLeft = this.getPixelForTick(0) - this.left;\n            const offsetRight = this.right - this.getPixelForTick(this.ticks.length - 1);\n            let paddingLeft = 0;\n            let paddingRight = 0;\n            if (isRotated) {\n                if (labelsBelowTicks) {\n                    paddingLeft = cos * first.width;\n                    paddingRight = sin * last.height;\n                } else {\n                    paddingLeft = sin * first.height;\n                    paddingRight = cos * last.width;\n                }\n            } else if (align === 'start') {\n                paddingRight = last.width;\n            } else if (align === 'end') {\n                paddingLeft = first.width;\n            } else if (align !== 'inner') {\n                paddingLeft = first.width / 2;\n                paddingRight = last.width / 2;\n            }\n            this.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * this.width / (this.width - offsetLeft), 0);\n            this.paddingRight = Math.max((paddingRight - offsetRight + padding) * this.width / (this.width - offsetRight), 0);\n        } else {\n            let paddingTop = last.height / 2;\n            let paddingBottom = first.height / 2;\n            if (align === 'start') {\n                paddingTop = 0;\n                paddingBottom = first.height;\n            } else if (align === 'end') {\n                paddingTop = last.height;\n                paddingBottom = 0;\n            }\n            this.paddingTop = paddingTop + padding;\n            this.paddingBottom = paddingBottom + padding;\n        }\n    }\n _handleMargins() {\n        if (this._margins) {\n            this._margins.left = Math.max(this.paddingLeft, this._margins.left);\n            this._margins.top = Math.max(this.paddingTop, this._margins.top);\n            this._margins.right = Math.max(this.paddingRight, this._margins.right);\n            this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom);\n        }\n    }\n    afterFit() {\n        callback(this.options.afterFit, [\n            this\n        ]);\n    }\n isHorizontal() {\n        const { axis , position  } = this.options;\n        return position === 'top' || position === 'bottom' || axis === 'x';\n    }\n isFullSize() {\n        return this.options.fullSize;\n    }\n _convertTicksToLabels(ticks) {\n        this.beforeTickToLabelConversion();\n        this.generateTickLabels(ticks);\n        let i, ilen;\n        for(i = 0, ilen = ticks.length; i < ilen; i++){\n            if (isNullOrUndef(ticks[i].label)) {\n                ticks.splice(i, 1);\n                ilen--;\n                i--;\n            }\n        }\n        this.afterTickToLabelConversion();\n    }\n _getLabelSizes() {\n        let labelSizes = this._labelSizes;\n        if (!labelSizes) {\n            const sampleSize = this.options.ticks.sampleSize;\n            let ticks = this.ticks;\n            if (sampleSize < ticks.length) {\n                ticks = sample(ticks, sampleSize);\n            }\n            this._labelSizes = labelSizes = this._computeLabelSizes(ticks, ticks.length, this.options.ticks.maxTicksLimit);\n        }\n        return labelSizes;\n    }\n _computeLabelSizes(ticks, length, maxTicksLimit) {\n        const { ctx , _longestTextCache: caches  } = this;\n        const widths = [];\n        const heights = [];\n        const increment = Math.floor(length / getTicksLimit(length, maxTicksLimit));\n        let widestLabelSize = 0;\n        let highestLabelSize = 0;\n        let i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;\n        for(i = 0; i < length; i += increment){\n            label = ticks[i].label;\n            tickFont = this._resolveTickFontOptions(i);\n            ctx.font = fontString = tickFont.string;\n            cache = caches[fontString] = caches[fontString] || {\n                data: {},\n                gc: []\n            };\n            lineHeight = tickFont.lineHeight;\n            width = height = 0;\n            if (!isNullOrUndef(label) && !isArray(label)) {\n                width = _measureText(ctx, cache.data, cache.gc, width, label);\n                height = lineHeight;\n            } else if (isArray(label)) {\n                for(j = 0, jlen = label.length; j < jlen; ++j){\n                    nestedLabel =  label[j];\n                    if (!isNullOrUndef(nestedLabel) && !isArray(nestedLabel)) {\n                        width = _measureText(ctx, cache.data, cache.gc, width, nestedLabel);\n                        height += lineHeight;\n                    }\n                }\n            }\n            widths.push(width);\n            heights.push(height);\n            widestLabelSize = Math.max(width, widestLabelSize);\n            highestLabelSize = Math.max(height, highestLabelSize);\n        }\n        garbageCollect(caches, length);\n        const widest = widths.indexOf(widestLabelSize);\n        const highest = heights.indexOf(highestLabelSize);\n        const valueAt = (idx)=>({\n                width: widths[idx] || 0,\n                height: heights[idx] || 0\n            });\n        return {\n            first: valueAt(0),\n            last: valueAt(length - 1),\n            widest: valueAt(widest),\n            highest: valueAt(highest),\n            widths,\n            heights\n        };\n    }\n getLabelForValue(value) {\n        return value;\n    }\n getPixelForValue(value, index) {\n        return NaN;\n    }\n getValueForPixel(pixel) {}\n getPixelForTick(index) {\n        const ticks = this.ticks;\n        if (index < 0 || index > ticks.length - 1) {\n            return null;\n        }\n        return this.getPixelForValue(ticks[index].value);\n    }\n getPixelForDecimal(decimal) {\n        if (this._reversePixels) {\n            decimal = 1 - decimal;\n        }\n        const pixel = this._startPixel + decimal * this._length;\n        return _int16Range(this._alignToPixels ? _alignPixel(this.chart, pixel, 0) : pixel);\n    }\n getDecimalForPixel(pixel) {\n        const decimal = (pixel - this._startPixel) / this._length;\n        return this._reversePixels ? 1 - decimal : decimal;\n    }\n getBasePixel() {\n        return this.getPixelForValue(this.getBaseValue());\n    }\n getBaseValue() {\n        const { min , max  } = this;\n        return min < 0 && max < 0 ? max : min > 0 && max > 0 ? min : 0;\n    }\n getContext(index) {\n        const ticks = this.ticks || [];\n        if (index >= 0 && index < ticks.length) {\n            const tick = ticks[index];\n            return tick.$context || (tick.$context = createTickContext(this.getContext(), index, tick));\n        }\n        return this.$context || (this.$context = createScaleContext(this.chart.getContext(), this));\n    }\n _tickSize() {\n        const optionTicks = this.options.ticks;\n        const rot = toRadians(this.labelRotation);\n        const cos = Math.abs(Math.cos(rot));\n        const sin = Math.abs(Math.sin(rot));\n        const labelSizes = this._getLabelSizes();\n        const padding = optionTicks.autoSkipPadding || 0;\n        const w = labelSizes ? labelSizes.widest.width + padding : 0;\n        const h = labelSizes ? labelSizes.highest.height + padding : 0;\n        return this.isHorizontal() ? h * cos > w * sin ? w / cos : h / sin : h * sin < w * cos ? h / cos : w / sin;\n    }\n _isVisible() {\n        const display = this.options.display;\n        if (display !== 'auto') {\n            return !!display;\n        }\n        return this.getMatchingVisibleMetas().length > 0;\n    }\n _computeGridLineItems(chartArea) {\n        const axis = this.axis;\n        const chart = this.chart;\n        const options = this.options;\n        const { grid , position , border  } = options;\n        const offset = grid.offset;\n        const isHorizontal = this.isHorizontal();\n        const ticks = this.ticks;\n        const ticksLength = ticks.length + (offset ? 1 : 0);\n        const tl = getTickMarkLength(grid);\n        const items = [];\n        const borderOpts = border.setContext(this.getContext());\n        const axisWidth = borderOpts.display ? borderOpts.width : 0;\n        const axisHalfWidth = axisWidth / 2;\n        const alignBorderValue = function(pixel) {\n            return _alignPixel(chart, pixel, axisWidth);\n        };\n        let borderValue, i, lineValue, alignedLineValue;\n        let tx1, ty1, tx2, ty2, x1, y1, x2, y2;\n        if (position === 'top') {\n            borderValue = alignBorderValue(this.bottom);\n            ty1 = this.bottom - tl;\n            ty2 = borderValue - axisHalfWidth;\n            y1 = alignBorderValue(chartArea.top) + axisHalfWidth;\n            y2 = chartArea.bottom;\n        } else if (position === 'bottom') {\n            borderValue = alignBorderValue(this.top);\n            y1 = chartArea.top;\n            y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;\n            ty1 = borderValue + axisHalfWidth;\n            ty2 = this.top + tl;\n        } else if (position === 'left') {\n            borderValue = alignBorderValue(this.right);\n            tx1 = this.right - tl;\n            tx2 = borderValue - axisHalfWidth;\n            x1 = alignBorderValue(chartArea.left) + axisHalfWidth;\n            x2 = chartArea.right;\n        } else if (position === 'right') {\n            borderValue = alignBorderValue(this.left);\n            x1 = chartArea.left;\n            x2 = alignBorderValue(chartArea.right) - axisHalfWidth;\n            tx1 = borderValue + axisHalfWidth;\n            tx2 = this.left + tl;\n        } else if (axis === 'x') {\n            if (position === 'center') {\n                borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);\n            } else if (isObject(position)) {\n                const positionAxisID = Object.keys(position)[0];\n                const value = position[positionAxisID];\n                borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n            }\n            y1 = chartArea.top;\n            y2 = chartArea.bottom;\n            ty1 = borderValue + axisHalfWidth;\n            ty2 = ty1 + tl;\n        } else if (axis === 'y') {\n            if (position === 'center') {\n                borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);\n            } else if (isObject(position)) {\n                const positionAxisID = Object.keys(position)[0];\n                const value = position[positionAxisID];\n                borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n            }\n            tx1 = borderValue - axisHalfWidth;\n            tx2 = tx1 - tl;\n            x1 = chartArea.left;\n            x2 = chartArea.right;\n        }\n        const limit = valueOrDefault(options.ticks.maxTicksLimit, ticksLength);\n        const step = Math.max(1, Math.ceil(ticksLength / limit));\n        for(i = 0; i < ticksLength; i += step){\n            const context = this.getContext(i);\n            const optsAtIndex = grid.setContext(context);\n            const optsAtIndexBorder = border.setContext(context);\n            const lineWidth = optsAtIndex.lineWidth;\n            const lineColor = optsAtIndex.color;\n            const borderDash = optsAtIndexBorder.dash || [];\n            const borderDashOffset = optsAtIndexBorder.dashOffset;\n            const tickWidth = optsAtIndex.tickWidth;\n            const tickColor = optsAtIndex.tickColor;\n            const tickBorderDash = optsAtIndex.tickBorderDash || [];\n            const tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;\n            lineValue = getPixelForGridLine(this, i, offset);\n            if (lineValue === undefined) {\n                continue;\n            }\n            alignedLineValue = _alignPixel(chart, lineValue, lineWidth);\n            if (isHorizontal) {\n                tx1 = tx2 = x1 = x2 = alignedLineValue;\n            } else {\n                ty1 = ty2 = y1 = y2 = alignedLineValue;\n            }\n            items.push({\n                tx1,\n                ty1,\n                tx2,\n                ty2,\n                x1,\n                y1,\n                x2,\n                y2,\n                width: lineWidth,\n                color: lineColor,\n                borderDash,\n                borderDashOffset,\n                tickWidth,\n                tickColor,\n                tickBorderDash,\n                tickBorderDashOffset\n            });\n        }\n        this._ticksLength = ticksLength;\n        this._borderValue = borderValue;\n        return items;\n    }\n _computeLabelItems(chartArea) {\n        const axis = this.axis;\n        const options = this.options;\n        const { position , ticks: optionTicks  } = options;\n        const isHorizontal = this.isHorizontal();\n        const ticks = this.ticks;\n        const { align , crossAlign , padding , mirror  } = optionTicks;\n        const tl = getTickMarkLength(options.grid);\n        const tickAndPadding = tl + padding;\n        const hTickAndPadding = mirror ? -padding : tickAndPadding;\n        const rotation = -toRadians(this.labelRotation);\n        const items = [];\n        let i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;\n        let textBaseline = 'middle';\n        if (position === 'top') {\n            y = this.bottom - hTickAndPadding;\n            textAlign = this._getXAxisLabelAlignment();\n        } else if (position === 'bottom') {\n            y = this.top + hTickAndPadding;\n            textAlign = this._getXAxisLabelAlignment();\n        } else if (position === 'left') {\n            const ret = this._getYAxisLabelAlignment(tl);\n            textAlign = ret.textAlign;\n            x = ret.x;\n        } else if (position === 'right') {\n            const ret = this._getYAxisLabelAlignment(tl);\n            textAlign = ret.textAlign;\n            x = ret.x;\n        } else if (axis === 'x') {\n            if (position === 'center') {\n                y = (chartArea.top + chartArea.bottom) / 2 + tickAndPadding;\n            } else if (isObject(position)) {\n                const positionAxisID = Object.keys(position)[0];\n                const value = position[positionAxisID];\n                y = this.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;\n            }\n            textAlign = this._getXAxisLabelAlignment();\n        } else if (axis === 'y') {\n            if (position === 'center') {\n                x = (chartArea.left + chartArea.right) / 2 - tickAndPadding;\n            } else if (isObject(position)) {\n                const positionAxisID = Object.keys(position)[0];\n                const value = position[positionAxisID];\n                x = this.chart.scales[positionAxisID].getPixelForValue(value);\n            }\n            textAlign = this._getYAxisLabelAlignment(tl).textAlign;\n        }\n        if (axis === 'y') {\n            if (align === 'start') {\n                textBaseline = 'top';\n            } else if (align === 'end') {\n                textBaseline = 'bottom';\n            }\n        }\n        const labelSizes = this._getLabelSizes();\n        for(i = 0, ilen = ticks.length; i < ilen; ++i){\n            tick = ticks[i];\n            label = tick.label;\n            const optsAtIndex = optionTicks.setContext(this.getContext(i));\n            pixel = this.getPixelForTick(i) + optionTicks.labelOffset;\n            font = this._resolveTickFontOptions(i);\n            lineHeight = font.lineHeight;\n            lineCount = isArray(label) ? label.length : 1;\n            const halfCount = lineCount / 2;\n            const color = optsAtIndex.color;\n            const strokeColor = optsAtIndex.textStrokeColor;\n            const strokeWidth = optsAtIndex.textStrokeWidth;\n            let tickTextAlign = textAlign;\n            if (isHorizontal) {\n                x = pixel;\n                if (textAlign === 'inner') {\n                    if (i === ilen - 1) {\n                        tickTextAlign = !this.options.reverse ? 'right' : 'left';\n                    } else if (i === 0) {\n                        tickTextAlign = !this.options.reverse ? 'left' : 'right';\n                    } else {\n                        tickTextAlign = 'center';\n                    }\n                }\n                if (position === 'top') {\n                    if (crossAlign === 'near' || rotation !== 0) {\n                        textOffset = -lineCount * lineHeight + lineHeight / 2;\n                    } else if (crossAlign === 'center') {\n                        textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;\n                    } else {\n                        textOffset = -labelSizes.highest.height + lineHeight / 2;\n                    }\n                } else {\n                    if (crossAlign === 'near' || rotation !== 0) {\n                        textOffset = lineHeight / 2;\n                    } else if (crossAlign === 'center') {\n                        textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;\n                    } else {\n                        textOffset = labelSizes.highest.height - lineCount * lineHeight;\n                    }\n                }\n                if (mirror) {\n                    textOffset *= -1;\n                }\n                if (rotation !== 0 && !optsAtIndex.showLabelBackdrop) {\n                    x += lineHeight / 2 * Math.sin(rotation);\n                }\n            } else {\n                y = pixel;\n                textOffset = (1 - lineCount) * lineHeight / 2;\n            }\n            let backdrop;\n            if (optsAtIndex.showLabelBackdrop) {\n                const labelPadding = toPadding(optsAtIndex.backdropPadding);\n                const height = labelSizes.heights[i];\n                const width = labelSizes.widths[i];\n                let top = textOffset - labelPadding.top;\n                let left = 0 - labelPadding.left;\n                switch(textBaseline){\n                    case 'middle':\n                        top -= height / 2;\n                        break;\n                    case 'bottom':\n                        top -= height;\n                        break;\n                }\n                switch(textAlign){\n                    case 'center':\n                        left -= width / 2;\n                        break;\n                    case 'right':\n                        left -= width;\n                        break;\n                    case 'inner':\n                        if (i === ilen - 1) {\n                            left -= width;\n                        } else if (i > 0) {\n                            left -= width / 2;\n                        }\n                        break;\n                }\n                backdrop = {\n                    left,\n                    top,\n                    width: width + labelPadding.width,\n                    height: height + labelPadding.height,\n                    color: optsAtIndex.backdropColor\n                };\n            }\n            items.push({\n                label,\n                font,\n                textOffset,\n                options: {\n                    rotation,\n                    color,\n                    strokeColor,\n                    strokeWidth,\n                    textAlign: tickTextAlign,\n                    textBaseline,\n                    translation: [\n                        x,\n                        y\n                    ],\n                    backdrop\n                }\n            });\n        }\n        return items;\n    }\n    _getXAxisLabelAlignment() {\n        const { position , ticks  } = this.options;\n        const rotation = -toRadians(this.labelRotation);\n        if (rotation) {\n            return position === 'top' ? 'left' : 'right';\n        }\n        let align = 'center';\n        if (ticks.align === 'start') {\n            align = 'left';\n        } else if (ticks.align === 'end') {\n            align = 'right';\n        } else if (ticks.align === 'inner') {\n            align = 'inner';\n        }\n        return align;\n    }\n    _getYAxisLabelAlignment(tl) {\n        const { position , ticks: { crossAlign , mirror , padding  }  } = this.options;\n        const labelSizes = this._getLabelSizes();\n        const tickAndPadding = tl + padding;\n        const widest = labelSizes.widest.width;\n        let textAlign;\n        let x;\n        if (position === 'left') {\n            if (mirror) {\n                x = this.right + padding;\n                if (crossAlign === 'near') {\n                    textAlign = 'left';\n                } else if (crossAlign === 'center') {\n                    textAlign = 'center';\n                    x += widest / 2;\n                } else {\n                    textAlign = 'right';\n                    x += widest;\n                }\n            } else {\n                x = this.right - tickAndPadding;\n                if (crossAlign === 'near') {\n                    textAlign = 'right';\n                } else if (crossAlign === 'center') {\n                    textAlign = 'center';\n                    x -= widest / 2;\n                } else {\n                    textAlign = 'left';\n                    x = this.left;\n                }\n            }\n        } else if (position === 'right') {\n            if (mirror) {\n                x = this.left + padding;\n                if (crossAlign === 'near') {\n                    textAlign = 'right';\n                } else if (crossAlign === 'center') {\n                    textAlign = 'center';\n                    x -= widest / 2;\n                } else {\n                    textAlign = 'left';\n                    x -= widest;\n                }\n            } else {\n                x = this.left + tickAndPadding;\n                if (crossAlign === 'near') {\n                    textAlign = 'left';\n                } else if (crossAlign === 'center') {\n                    textAlign = 'center';\n                    x += widest / 2;\n                } else {\n                    textAlign = 'right';\n                    x = this.right;\n                }\n            }\n        } else {\n            textAlign = 'right';\n        }\n        return {\n            textAlign,\n            x\n        };\n    }\n _computeLabelArea() {\n        if (this.options.ticks.mirror) {\n            return;\n        }\n        const chart = this.chart;\n        const position = this.options.position;\n        if (position === 'left' || position === 'right') {\n            return {\n                top: 0,\n                left: this.left,\n                bottom: chart.height,\n                right: this.right\n            };\n        }\n        if (position === 'top' || position === 'bottom') {\n            return {\n                top: this.top,\n                left: 0,\n                bottom: this.bottom,\n                right: chart.width\n            };\n        }\n    }\n drawBackground() {\n        const { ctx , options: { backgroundColor  } , left , top , width , height  } = this;\n        if (backgroundColor) {\n            ctx.save();\n            ctx.fillStyle = backgroundColor;\n            ctx.fillRect(left, top, width, height);\n            ctx.restore();\n        }\n    }\n    getLineWidthForValue(value) {\n        const grid = this.options.grid;\n        if (!this._isVisible() || !grid.display) {\n            return 0;\n        }\n        const ticks = this.ticks;\n        const index = ticks.findIndex((t)=>t.value === value);\n        if (index >= 0) {\n            const opts = grid.setContext(this.getContext(index));\n            return opts.lineWidth;\n        }\n        return 0;\n    }\n drawGrid(chartArea) {\n        const grid = this.options.grid;\n        const ctx = this.ctx;\n        const items = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(chartArea));\n        let i, ilen;\n        const drawLine = (p1, p2, style)=>{\n            if (!style.width || !style.color) {\n                return;\n            }\n            ctx.save();\n            ctx.lineWidth = style.width;\n            ctx.strokeStyle = style.color;\n            ctx.setLineDash(style.borderDash || []);\n            ctx.lineDashOffset = style.borderDashOffset;\n            ctx.beginPath();\n            ctx.moveTo(p1.x, p1.y);\n            ctx.lineTo(p2.x, p2.y);\n            ctx.stroke();\n            ctx.restore();\n        };\n        if (grid.display) {\n            for(i = 0, ilen = items.length; i < ilen; ++i){\n                const item = items[i];\n                if (grid.drawOnChartArea) {\n                    drawLine({\n                        x: item.x1,\n                        y: item.y1\n                    }, {\n                        x: item.x2,\n                        y: item.y2\n                    }, item);\n                }\n                if (grid.drawTicks) {\n                    drawLine({\n                        x: item.tx1,\n                        y: item.ty1\n                    }, {\n                        x: item.tx2,\n                        y: item.ty2\n                    }, {\n                        color: item.tickColor,\n                        width: item.tickWidth,\n                        borderDash: item.tickBorderDash,\n                        borderDashOffset: item.tickBorderDashOffset\n                    });\n                }\n            }\n        }\n    }\n drawBorder() {\n        const { chart , ctx , options: { border , grid  }  } = this;\n        const borderOpts = border.setContext(this.getContext());\n        const axisWidth = border.display ? borderOpts.width : 0;\n        if (!axisWidth) {\n            return;\n        }\n        const lastLineWidth = grid.setContext(this.getContext(0)).lineWidth;\n        const borderValue = this._borderValue;\n        let x1, x2, y1, y2;\n        if (this.isHorizontal()) {\n            x1 = _alignPixel(chart, this.left, axisWidth) - axisWidth / 2;\n            x2 = _alignPixel(chart, this.right, lastLineWidth) + lastLineWidth / 2;\n            y1 = y2 = borderValue;\n        } else {\n            y1 = _alignPixel(chart, this.top, axisWidth) - axisWidth / 2;\n            y2 = _alignPixel(chart, this.bottom, lastLineWidth) + lastLineWidth / 2;\n            x1 = x2 = borderValue;\n        }\n        ctx.save();\n        ctx.lineWidth = borderOpts.width;\n        ctx.strokeStyle = borderOpts.color;\n        ctx.beginPath();\n        ctx.moveTo(x1, y1);\n        ctx.lineTo(x2, y2);\n        ctx.stroke();\n        ctx.restore();\n    }\n drawLabels(chartArea) {\n        const optionTicks = this.options.ticks;\n        if (!optionTicks.display) {\n            return;\n        }\n        const ctx = this.ctx;\n        const area = this._computeLabelArea();\n        if (area) {\n            clipArea(ctx, area);\n        }\n        const items = this.getLabelItems(chartArea);\n        for (const item of items){\n            const renderTextOptions = item.options;\n            const tickFont = item.font;\n            const label = item.label;\n            const y = item.textOffset;\n            renderText(ctx, label, 0, y, tickFont, renderTextOptions);\n        }\n        if (area) {\n            unclipArea(ctx);\n        }\n    }\n drawTitle() {\n        const { ctx , options: { position , title , reverse  }  } = this;\n        if (!title.display) {\n            return;\n        }\n        const font = toFont(title.font);\n        const padding = toPadding(title.padding);\n        const align = title.align;\n        let offset = font.lineHeight / 2;\n        if (position === 'bottom' || position === 'center' || isObject(position)) {\n            offset += padding.bottom;\n            if (isArray(title.text)) {\n                offset += font.lineHeight * (title.text.length - 1);\n            }\n        } else {\n            offset += padding.top;\n        }\n        const { titleX , titleY , maxWidth , rotation  } = titleArgs(this, offset, position, align);\n        renderText(ctx, title.text, 0, 0, font, {\n            color: title.color,\n            maxWidth,\n            rotation,\n            textAlign: titleAlign(align, position, reverse),\n            textBaseline: 'middle',\n            translation: [\n                titleX,\n                titleY\n            ]\n        });\n    }\n    draw(chartArea) {\n        if (!this._isVisible()) {\n            return;\n        }\n        this.drawBackground();\n        this.drawGrid(chartArea);\n        this.drawBorder();\n        this.drawTitle();\n        this.drawLabels(chartArea);\n    }\n _layers() {\n        const opts = this.options;\n        const tz = opts.ticks && opts.ticks.z || 0;\n        const gz = valueOrDefault(opts.grid && opts.grid.z, -1);\n        const bz = valueOrDefault(opts.border && opts.border.z, 0);\n        if (!this._isVisible() || this.draw !== Scale.prototype.draw) {\n            return [\n                {\n                    z: tz,\n                    draw: (chartArea)=>{\n                        this.draw(chartArea);\n                    }\n                }\n            ];\n        }\n        return [\n            {\n                z: gz,\n                draw: (chartArea)=>{\n                    this.drawBackground();\n                    this.drawGrid(chartArea);\n                    this.drawTitle();\n                }\n            },\n            {\n                z: bz,\n                draw: ()=>{\n                    this.drawBorder();\n                }\n            },\n            {\n                z: tz,\n                draw: (chartArea)=>{\n                    this.drawLabels(chartArea);\n                }\n            }\n        ];\n    }\n getMatchingVisibleMetas(type) {\n        const metas = this.chart.getSortedVisibleDatasetMetas();\n        const axisID = this.axis + 'AxisID';\n        const result = [];\n        let i, ilen;\n        for(i = 0, ilen = metas.length; i < ilen; ++i){\n            const meta = metas[i];\n            if (meta[axisID] === this.id && (!type || meta.type === type)) {\n                result.push(meta);\n            }\n        }\n        return result;\n    }\n _resolveTickFontOptions(index) {\n        const opts = this.options.ticks.setContext(this.getContext(index));\n        return toFont(opts.font);\n    }\n _maxDigits() {\n        const fontSize = this._resolveTickFontOptions(0).lineHeight;\n        return (this.isHorizontal() ? this.width : this.height) / fontSize;\n    }\n}\n\nclass TypedRegistry {\n    constructor(type, scope, override){\n        this.type = type;\n        this.scope = scope;\n        this.override = override;\n        this.items = Object.create(null);\n    }\n    isForType(type) {\n        return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);\n    }\n register(item) {\n        const proto = Object.getPrototypeOf(item);\n        let parentScope;\n        if (isIChartComponent(proto)) {\n            parentScope = this.register(proto);\n        }\n        const items = this.items;\n        const id = item.id;\n        const scope = this.scope + '.' + id;\n        if (!id) {\n            throw new Error('class does not have id: ' + item);\n        }\n        if (id in items) {\n            return scope;\n        }\n        items[id] = item;\n        registerDefaults(item, scope, parentScope);\n        if (this.override) {\n            defaults.override(item.id, item.overrides);\n        }\n        return scope;\n    }\n get(id) {\n        return this.items[id];\n    }\n unregister(item) {\n        const items = this.items;\n        const id = item.id;\n        const scope = this.scope;\n        if (id in items) {\n            delete items[id];\n        }\n        if (scope && id in defaults[scope]) {\n            delete defaults[scope][id];\n            if (this.override) {\n                delete overrides[id];\n            }\n        }\n    }\n}\nfunction registerDefaults(item, scope, parentScope) {\n    const itemDefaults = merge(Object.create(null), [\n        parentScope ? defaults.get(parentScope) : {},\n        defaults.get(scope),\n        item.defaults\n    ]);\n    defaults.set(scope, itemDefaults);\n    if (item.defaultRoutes) {\n        routeDefaults(scope, item.defaultRoutes);\n    }\n    if (item.descriptors) {\n        defaults.describe(scope, item.descriptors);\n    }\n}\nfunction routeDefaults(scope, routes) {\n    Object.keys(routes).forEach((property)=>{\n        const propertyParts = property.split('.');\n        const sourceName = propertyParts.pop();\n        const sourceScope = [\n            scope\n        ].concat(propertyParts).join('.');\n        const parts = routes[property].split('.');\n        const targetName = parts.pop();\n        const targetScope = parts.join('.');\n        defaults.route(sourceScope, sourceName, targetScope, targetName);\n    });\n}\nfunction isIChartComponent(proto) {\n    return 'id' in proto && 'defaults' in proto;\n}\n\nclass Registry {\n    constructor(){\n        this.controllers = new TypedRegistry(DatasetController, 'datasets', true);\n        this.elements = new TypedRegistry(Element, 'elements');\n        this.plugins = new TypedRegistry(Object, 'plugins');\n        this.scales = new TypedRegistry(Scale, 'scales');\n        this._typedRegistries = [\n            this.controllers,\n            this.scales,\n            this.elements\n        ];\n    }\n add(...args) {\n        this._each('register', args);\n    }\n    remove(...args) {\n        this._each('unregister', args);\n    }\n addControllers(...args) {\n        this._each('register', args, this.controllers);\n    }\n addElements(...args) {\n        this._each('register', args, this.elements);\n    }\n addPlugins(...args) {\n        this._each('register', args, this.plugins);\n    }\n addScales(...args) {\n        this._each('register', args, this.scales);\n    }\n getController(id) {\n        return this._get(id, this.controllers, 'controller');\n    }\n getElement(id) {\n        return this._get(id, this.elements, 'element');\n    }\n getPlugin(id) {\n        return this._get(id, this.plugins, 'plugin');\n    }\n getScale(id) {\n        return this._get(id, this.scales, 'scale');\n    }\n removeControllers(...args) {\n        this._each('unregister', args, this.controllers);\n    }\n removeElements(...args) {\n        this._each('unregister', args, this.elements);\n    }\n removePlugins(...args) {\n        this._each('unregister', args, this.plugins);\n    }\n removeScales(...args) {\n        this._each('unregister', args, this.scales);\n    }\n _each(method, args, typedRegistry) {\n        [\n            ...args\n        ].forEach((arg)=>{\n            const reg = typedRegistry || this._getRegistryForType(arg);\n            if (typedRegistry || reg.isForType(arg) || reg === this.plugins && arg.id) {\n                this._exec(method, reg, arg);\n            } else {\n                each(arg, (item)=>{\n                    const itemReg = typedRegistry || this._getRegistryForType(item);\n                    this._exec(method, itemReg, item);\n                });\n            }\n        });\n    }\n _exec(method, registry, component) {\n        const camelMethod = _capitalize(method);\n        callback(component['before' + camelMethod], [], component);\n        registry[method](component);\n        callback(component['after' + camelMethod], [], component);\n    }\n _getRegistryForType(type) {\n        for(let i = 0; i < this._typedRegistries.length; i++){\n            const reg = this._typedRegistries[i];\n            if (reg.isForType(type)) {\n                return reg;\n            }\n        }\n        return this.plugins;\n    }\n _get(id, typedRegistry, type) {\n        const item = typedRegistry.get(id);\n        if (item === undefined) {\n            throw new Error('\"' + id + '\" is not a registered ' + type + '.');\n        }\n        return item;\n    }\n}\nvar registry = /* #__PURE__ */ new Registry();\n\nclass PluginService {\n    constructor(){\n        this._init = [];\n    }\n notify(chart, hook, args, filter) {\n        if (hook === 'beforeInit') {\n            this._init = this._createDescriptors(chart, true);\n            this._notify(this._init, chart, 'install');\n        }\n        const descriptors = filter ? this._descriptors(chart).filter(filter) : this._descriptors(chart);\n        const result = this._notify(descriptors, chart, hook, args);\n        if (hook === 'afterDestroy') {\n            this._notify(descriptors, chart, 'stop');\n            this._notify(this._init, chart, 'uninstall');\n        }\n        return result;\n    }\n _notify(descriptors, chart, hook, args) {\n        args = args || {};\n        for (const descriptor of descriptors){\n            const plugin = descriptor.plugin;\n            const method = plugin[hook];\n            const params = [\n                chart,\n                args,\n                descriptor.options\n            ];\n            if (callback(method, params, plugin) === false && args.cancelable) {\n                return false;\n            }\n        }\n        return true;\n    }\n    invalidate() {\n        if (!isNullOrUndef(this._cache)) {\n            this._oldCache = this._cache;\n            this._cache = undefined;\n        }\n    }\n _descriptors(chart) {\n        if (this._cache) {\n            return this._cache;\n        }\n        const descriptors = this._cache = this._createDescriptors(chart);\n        this._notifyStateChanges(chart);\n        return descriptors;\n    }\n    _createDescriptors(chart, all) {\n        const config = chart && chart.config;\n        const options = valueOrDefault(config.options && config.options.plugins, {});\n        const plugins = allPlugins(config);\n        return options === false && !all ? [] : createDescriptors(chart, plugins, options, all);\n    }\n _notifyStateChanges(chart) {\n        const previousDescriptors = this._oldCache || [];\n        const descriptors = this._cache;\n        const diff = (a, b)=>a.filter((x)=>!b.some((y)=>x.plugin.id === y.plugin.id));\n        this._notify(diff(previousDescriptors, descriptors), chart, 'stop');\n        this._notify(diff(descriptors, previousDescriptors), chart, 'start');\n    }\n}\n function allPlugins(config) {\n    const localIds = {};\n    const plugins = [];\n    const keys = Object.keys(registry.plugins.items);\n    for(let i = 0; i < keys.length; i++){\n        plugins.push(registry.getPlugin(keys[i]));\n    }\n    const local = config.plugins || [];\n    for(let i = 0; i < local.length; i++){\n        const plugin = local[i];\n        if (plugins.indexOf(plugin) === -1) {\n            plugins.push(plugin);\n            localIds[plugin.id] = true;\n        }\n    }\n    return {\n        plugins,\n        localIds\n    };\n}\nfunction getOpts(options, all) {\n    if (!all && options === false) {\n        return null;\n    }\n    if (options === true) {\n        return {};\n    }\n    return options;\n}\nfunction createDescriptors(chart, { plugins , localIds  }, options, all) {\n    const result = [];\n    const context = chart.getContext();\n    for (const plugin of plugins){\n        const id = plugin.id;\n        const opts = getOpts(options[id], all);\n        if (opts === null) {\n            continue;\n        }\n        result.push({\n            plugin,\n            options: pluginOpts(chart.config, {\n                plugin,\n                local: localIds[id]\n            }, opts, context)\n        });\n    }\n    return result;\n}\nfunction pluginOpts(config, { plugin , local  }, opts, context) {\n    const keys = config.pluginScopeKeys(plugin);\n    const scopes = config.getOptionScopes(opts, keys);\n    if (local && plugin.defaults) {\n        scopes.push(plugin.defaults);\n    }\n    return config.createResolver(scopes, context, [\n        ''\n    ], {\n        scriptable: false,\n        indexable: false,\n        allKeys: true\n    });\n}\n\nfunction getIndexAxis(type, options) {\n    const datasetDefaults = defaults.datasets[type] || {};\n    const datasetOptions = (options.datasets || {})[type] || {};\n    return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || 'x';\n}\nfunction getAxisFromDefaultScaleID(id, indexAxis) {\n    let axis = id;\n    if (id === '_index_') {\n        axis = indexAxis;\n    } else if (id === '_value_') {\n        axis = indexAxis === 'x' ? 'y' : 'x';\n    }\n    return axis;\n}\nfunction getDefaultScaleIDFromAxis(axis, indexAxis) {\n    return axis === indexAxis ? '_index_' : '_value_';\n}\nfunction idMatchesAxis(id) {\n    if (id === 'x' || id === 'y' || id === 'r') {\n        return id;\n    }\n}\nfunction axisFromPosition(position) {\n    if (position === 'top' || position === 'bottom') {\n        return 'x';\n    }\n    if (position === 'left' || position === 'right') {\n        return 'y';\n    }\n}\nfunction determineAxis(id, ...scaleOptions) {\n    if (idMatchesAxis(id)) {\n        return id;\n    }\n    for (const opts of scaleOptions){\n        const axis = opts.axis || axisFromPosition(opts.position) || id.length > 1 && idMatchesAxis(id[0].toLowerCase());\n        if (axis) {\n            return axis;\n        }\n    }\n    throw new Error(`Cannot determine type of '${id}' axis. Please provide 'axis' or 'position' option.`);\n}\nfunction getAxisFromDataset(id, axis, dataset) {\n    if (dataset[axis + 'AxisID'] === id) {\n        return {\n            axis\n        };\n    }\n}\nfunction retrieveAxisFromDatasets(id, config) {\n    if (config.data && config.data.datasets) {\n        const boundDs = config.data.datasets.filter((d)=>d.xAxisID === id || d.yAxisID === id);\n        if (boundDs.length) {\n            return getAxisFromDataset(id, 'x', boundDs[0]) || getAxisFromDataset(id, 'y', boundDs[0]);\n        }\n    }\n    return {};\n}\nfunction mergeScaleConfig(config, options) {\n    const chartDefaults = overrides[config.type] || {\n        scales: {}\n    };\n    const configScales = options.scales || {};\n    const chartIndexAxis = getIndexAxis(config.type, options);\n    const scales = Object.create(null);\n    Object.keys(configScales).forEach((id)=>{\n        const scaleConf = configScales[id];\n        if (!isObject(scaleConf)) {\n            return console.error(`Invalid scale configuration for scale: ${id}`);\n        }\n        if (scaleConf._proxy) {\n            return console.warn(`Ignoring resolver passed as options for scale: ${id}`);\n        }\n        const axis = determineAxis(id, scaleConf, retrieveAxisFromDatasets(id, config), defaults.scales[scaleConf.type]);\n        const defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);\n        const defaultScaleOptions = chartDefaults.scales || {};\n        scales[id] = mergeIf(Object.create(null), [\n            {\n                axis\n            },\n            scaleConf,\n            defaultScaleOptions[axis],\n            defaultScaleOptions[defaultId]\n        ]);\n    });\n    config.data.datasets.forEach((dataset)=>{\n        const type = dataset.type || config.type;\n        const indexAxis = dataset.indexAxis || getIndexAxis(type, options);\n        const datasetDefaults = overrides[type] || {};\n        const defaultScaleOptions = datasetDefaults.scales || {};\n        Object.keys(defaultScaleOptions).forEach((defaultID)=>{\n            const axis = getAxisFromDefaultScaleID(defaultID, indexAxis);\n            const id = dataset[axis + 'AxisID'] || axis;\n            scales[id] = scales[id] || Object.create(null);\n            mergeIf(scales[id], [\n                {\n                    axis\n                },\n                configScales[id],\n                defaultScaleOptions[defaultID]\n            ]);\n        });\n    });\n    Object.keys(scales).forEach((key)=>{\n        const scale = scales[key];\n        mergeIf(scale, [\n            defaults.scales[scale.type],\n            defaults.scale\n        ]);\n    });\n    return scales;\n}\nfunction initOptions(config) {\n    const options = config.options || (config.options = {});\n    options.plugins = valueOrDefault(options.plugins, {});\n    options.scales = mergeScaleConfig(config, options);\n}\nfunction initData(data) {\n    data = data || {};\n    data.datasets = data.datasets || [];\n    data.labels = data.labels || [];\n    return data;\n}\nfunction initConfig(config) {\n    config = config || {};\n    config.data = initData(config.data);\n    initOptions(config);\n    return config;\n}\nconst keyCache = new Map();\nconst keysCached = new Set();\nfunction cachedKeys(cacheKey, generate) {\n    let keys = keyCache.get(cacheKey);\n    if (!keys) {\n        keys = generate();\n        keyCache.set(cacheKey, keys);\n        keysCached.add(keys);\n    }\n    return keys;\n}\nconst addIfFound = (set, obj, key)=>{\n    const opts = resolveObjectKey(obj, key);\n    if (opts !== undefined) {\n        set.add(opts);\n    }\n};\nclass Config {\n    constructor(config){\n        this._config = initConfig(config);\n        this._scopeCache = new Map();\n        this._resolverCache = new Map();\n    }\n    get platform() {\n        return this._config.platform;\n    }\n    get type() {\n        return this._config.type;\n    }\n    set type(type) {\n        this._config.type = type;\n    }\n    get data() {\n        return this._config.data;\n    }\n    set data(data) {\n        this._config.data = initData(data);\n    }\n    get options() {\n        return this._config.options;\n    }\n    set options(options) {\n        this._config.options = options;\n    }\n    get plugins() {\n        return this._config.plugins;\n    }\n    update() {\n        const config = this._config;\n        this.clearCache();\n        initOptions(config);\n    }\n    clearCache() {\n        this._scopeCache.clear();\n        this._resolverCache.clear();\n    }\n datasetScopeKeys(datasetType) {\n        return cachedKeys(datasetType, ()=>[\n                [\n                    `datasets.${datasetType}`,\n                    ''\n                ]\n            ]);\n    }\n datasetAnimationScopeKeys(datasetType, transition) {\n        return cachedKeys(`${datasetType}.transition.${transition}`, ()=>[\n                [\n                    `datasets.${datasetType}.transitions.${transition}`,\n                    `transitions.${transition}`\n                ],\n                [\n                    `datasets.${datasetType}`,\n                    ''\n                ]\n            ]);\n    }\n datasetElementScopeKeys(datasetType, elementType) {\n        return cachedKeys(`${datasetType}-${elementType}`, ()=>[\n                [\n                    `datasets.${datasetType}.elements.${elementType}`,\n                    `datasets.${datasetType}`,\n                    `elements.${elementType}`,\n                    ''\n                ]\n            ]);\n    }\n pluginScopeKeys(plugin) {\n        const id = plugin.id;\n        const type = this.type;\n        return cachedKeys(`${type}-plugin-${id}`, ()=>[\n                [\n                    `plugins.${id}`,\n                    ...plugin.additionalOptionScopes || []\n                ]\n            ]);\n    }\n _cachedScopes(mainScope, resetCache) {\n        const _scopeCache = this._scopeCache;\n        let cache = _scopeCache.get(mainScope);\n        if (!cache || resetCache) {\n            cache = new Map();\n            _scopeCache.set(mainScope, cache);\n        }\n        return cache;\n    }\n getOptionScopes(mainScope, keyLists, resetCache) {\n        const { options , type  } = this;\n        const cache = this._cachedScopes(mainScope, resetCache);\n        const cached = cache.get(keyLists);\n        if (cached) {\n            return cached;\n        }\n        const scopes = new Set();\n        keyLists.forEach((keys)=>{\n            if (mainScope) {\n                scopes.add(mainScope);\n                keys.forEach((key)=>addIfFound(scopes, mainScope, key));\n            }\n            keys.forEach((key)=>addIfFound(scopes, options, key));\n            keys.forEach((key)=>addIfFound(scopes, overrides[type] || {}, key));\n            keys.forEach((key)=>addIfFound(scopes, defaults, key));\n            keys.forEach((key)=>addIfFound(scopes, descriptors, key));\n        });\n        const array = Array.from(scopes);\n        if (array.length === 0) {\n            array.push(Object.create(null));\n        }\n        if (keysCached.has(keyLists)) {\n            cache.set(keyLists, array);\n        }\n        return array;\n    }\n chartOptionScopes() {\n        const { options , type  } = this;\n        return [\n            options,\n            overrides[type] || {},\n            defaults.datasets[type] || {},\n            {\n                type\n            },\n            defaults,\n            descriptors\n        ];\n    }\n resolveNamedOptions(scopes, names, context, prefixes = [\n        ''\n    ]) {\n        const result = {\n            $shared: true\n        };\n        const { resolver , subPrefixes  } = getResolver(this._resolverCache, scopes, prefixes);\n        let options = resolver;\n        if (needContext(resolver, names)) {\n            result.$shared = false;\n            context = isFunction(context) ? context() : context;\n            const subResolver = this.createResolver(scopes, context, subPrefixes);\n            options = _attachContext(resolver, context, subResolver);\n        }\n        for (const prop of names){\n            result[prop] = options[prop];\n        }\n        return result;\n    }\n createResolver(scopes, context, prefixes = [\n        ''\n    ], descriptorDefaults) {\n        const { resolver  } = getResolver(this._resolverCache, scopes, prefixes);\n        return isObject(context) ? _attachContext(resolver, context, undefined, descriptorDefaults) : resolver;\n    }\n}\nfunction getResolver(resolverCache, scopes, prefixes) {\n    let cache = resolverCache.get(scopes);\n    if (!cache) {\n        cache = new Map();\n        resolverCache.set(scopes, cache);\n    }\n    const cacheKey = prefixes.join();\n    let cached = cache.get(cacheKey);\n    if (!cached) {\n        const resolver = _createResolver(scopes, prefixes);\n        cached = {\n            resolver,\n            subPrefixes: prefixes.filter((p)=>!p.toLowerCase().includes('hover'))\n        };\n        cache.set(cacheKey, cached);\n    }\n    return cached;\n}\nconst hasFunction = (value)=>isObject(value) && Object.getOwnPropertyNames(value).some((key)=>isFunction(value[key]));\nfunction needContext(proxy, names) {\n    const { isScriptable , isIndexable  } = _descriptors(proxy);\n    for (const prop of names){\n        const scriptable = isScriptable(prop);\n        const indexable = isIndexable(prop);\n        const value = (indexable || scriptable) && proxy[prop];\n        if (scriptable && (isFunction(value) || hasFunction(value)) || indexable && isArray(value)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nvar version = \"4.4.2\";\n\nconst KNOWN_POSITIONS = [\n    'top',\n    'bottom',\n    'left',\n    'right',\n    'chartArea'\n];\nfunction positionIsHorizontal(position, axis) {\n    return position === 'top' || position === 'bottom' || KNOWN_POSITIONS.indexOf(position) === -1 && axis === 'x';\n}\nfunction compare2Level(l1, l2) {\n    return function(a, b) {\n        return a[l1] === b[l1] ? a[l2] - b[l2] : a[l1] - b[l1];\n    };\n}\nfunction onAnimationsComplete(context) {\n    const chart = context.chart;\n    const animationOptions = chart.options.animation;\n    chart.notifyPlugins('afterRender');\n    callback(animationOptions && animationOptions.onComplete, [\n        context\n    ], chart);\n}\nfunction onAnimationProgress(context) {\n    const chart = context.chart;\n    const animationOptions = chart.options.animation;\n    callback(animationOptions && animationOptions.onProgress, [\n        context\n    ], chart);\n}\n function getCanvas(item) {\n    if (_isDomSupported() && typeof item === 'string') {\n        item = document.getElementById(item);\n    } else if (item && item.length) {\n        item = item[0];\n    }\n    if (item && item.canvas) {\n        item = item.canvas;\n    }\n    return item;\n}\nconst instances = {};\nconst getChart = (key)=>{\n    const canvas = getCanvas(key);\n    return Object.values(instances).filter((c)=>c.canvas === canvas).pop();\n};\nfunction moveNumericKeys(obj, start, move) {\n    const keys = Object.keys(obj);\n    for (const key of keys){\n        const intKey = +key;\n        if (intKey >= start) {\n            const value = obj[key];\n            delete obj[key];\n            if (move > 0 || intKey > start) {\n                obj[intKey + move] = value;\n            }\n        }\n    }\n}\n function determineLastEvent(e, lastEvent, inChartArea, isClick) {\n    if (!inChartArea || e.type === 'mouseout') {\n        return null;\n    }\n    if (isClick) {\n        return lastEvent;\n    }\n    return e;\n}\nfunction getSizeForArea(scale, chartArea, field) {\n    return scale.options.clip ? scale[field] : chartArea[field];\n}\nfunction getDatasetArea(meta, chartArea) {\n    const { xScale , yScale  } = meta;\n    if (xScale && yScale) {\n        return {\n            left: getSizeForArea(xScale, chartArea, 'left'),\n            right: getSizeForArea(xScale, chartArea, 'right'),\n            top: getSizeForArea(yScale, chartArea, 'top'),\n            bottom: getSizeForArea(yScale, chartArea, 'bottom')\n        };\n    }\n    return chartArea;\n}\nclass Chart {\n    static defaults = defaults;\n    static instances = instances;\n    static overrides = overrides;\n    static registry = registry;\n    static version = version;\n    static getChart = getChart;\n    static register(...items) {\n        registry.add(...items);\n        invalidatePlugins();\n    }\n    static unregister(...items) {\n        registry.remove(...items);\n        invalidatePlugins();\n    }\n    constructor(item, userConfig){\n        const config = this.config = new Config(userConfig);\n        const initialCanvas = getCanvas(item);\n        const existingChart = getChart(initialCanvas);\n        if (existingChart) {\n            throw new Error('Canvas is already in use. Chart with ID \\'' + existingChart.id + '\\'' + ' must be destroyed before the canvas with ID \\'' + existingChart.canvas.id + '\\' can be reused.');\n        }\n        const options = config.createResolver(config.chartOptionScopes(), this.getContext());\n        this.platform = new (config.platform || _detectPlatform(initialCanvas))();\n        this.platform.updateConfig(config);\n        const context = this.platform.acquireContext(initialCanvas, options.aspectRatio);\n        const canvas = context && context.canvas;\n        const height = canvas && canvas.height;\n        const width = canvas && canvas.width;\n        this.id = uid();\n        this.ctx = context;\n        this.canvas = canvas;\n        this.width = width;\n        this.height = height;\n        this._options = options;\n        this._aspectRatio = this.aspectRatio;\n        this._layers = [];\n        this._metasets = [];\n        this._stacks = undefined;\n        this.boxes = [];\n        this.currentDevicePixelRatio = undefined;\n        this.chartArea = undefined;\n        this._active = [];\n        this._lastEvent = undefined;\n        this._listeners = {};\n         this._responsiveListeners = undefined;\n        this._sortedMetasets = [];\n        this.scales = {};\n        this._plugins = new PluginService();\n        this.$proxies = {};\n        this._hiddenIndices = {};\n        this.attached = false;\n        this._animationsDisabled = undefined;\n        this.$context = undefined;\n        this._doResize = debounce((mode)=>this.update(mode), options.resizeDelay || 0);\n        this._dataChanges = [];\n        instances[this.id] = this;\n        if (!context || !canvas) {\n            console.error(\"Failed to create chart: can't acquire context from the given item\");\n            return;\n        }\n        animator.listen(this, 'complete', onAnimationsComplete);\n        animator.listen(this, 'progress', onAnimationProgress);\n        this._initialize();\n        if (this.attached) {\n            this.update();\n        }\n    }\n    get aspectRatio() {\n        const { options: { aspectRatio , maintainAspectRatio  } , width , height , _aspectRatio  } = this;\n        if (!isNullOrUndef(aspectRatio)) {\n            return aspectRatio;\n        }\n        if (maintainAspectRatio && _aspectRatio) {\n            return _aspectRatio;\n        }\n        return height ? width / height : null;\n    }\n    get data() {\n        return this.config.data;\n    }\n    set data(data) {\n        this.config.data = data;\n    }\n    get options() {\n        return this._options;\n    }\n    set options(options) {\n        this.config.options = options;\n    }\n    get registry() {\n        return registry;\n    }\n _initialize() {\n        this.notifyPlugins('beforeInit');\n        if (this.options.responsive) {\n            this.resize();\n        } else {\n            retinaScale(this, this.options.devicePixelRatio);\n        }\n        this.bindEvents();\n        this.notifyPlugins('afterInit');\n        return this;\n    }\n    clear() {\n        clearCanvas(this.canvas, this.ctx);\n        return this;\n    }\n    stop() {\n        animator.stop(this);\n        return this;\n    }\n resize(width, height) {\n        if (!animator.running(this)) {\n            this._resize(width, height);\n        } else {\n            this._resizeBeforeDraw = {\n                width,\n                height\n            };\n        }\n    }\n    _resize(width, height) {\n        const options = this.options;\n        const canvas = this.canvas;\n        const aspectRatio = options.maintainAspectRatio && this.aspectRatio;\n        const newSize = this.platform.getMaximumSize(canvas, width, height, aspectRatio);\n        const newRatio = options.devicePixelRatio || this.platform.getDevicePixelRatio();\n        const mode = this.width ? 'resize' : 'attach';\n        this.width = newSize.width;\n        this.height = newSize.height;\n        this._aspectRatio = this.aspectRatio;\n        if (!retinaScale(this, newRatio, true)) {\n            return;\n        }\n        this.notifyPlugins('resize', {\n            size: newSize\n        });\n        callback(options.onResize, [\n            this,\n            newSize\n        ], this);\n        if (this.attached) {\n            if (this._doResize(mode)) {\n                this.render();\n            }\n        }\n    }\n    ensureScalesHaveIDs() {\n        const options = this.options;\n        const scalesOptions = options.scales || {};\n        each(scalesOptions, (axisOptions, axisID)=>{\n            axisOptions.id = axisID;\n        });\n    }\n buildOrUpdateScales() {\n        const options = this.options;\n        const scaleOpts = options.scales;\n        const scales = this.scales;\n        const updated = Object.keys(scales).reduce((obj, id)=>{\n            obj[id] = false;\n            return obj;\n        }, {});\n        let items = [];\n        if (scaleOpts) {\n            items = items.concat(Object.keys(scaleOpts).map((id)=>{\n                const scaleOptions = scaleOpts[id];\n                const axis = determineAxis(id, scaleOptions);\n                const isRadial = axis === 'r';\n                const isHorizontal = axis === 'x';\n                return {\n                    options: scaleOptions,\n                    dposition: isRadial ? 'chartArea' : isHorizontal ? 'bottom' : 'left',\n                    dtype: isRadial ? 'radialLinear' : isHorizontal ? 'category' : 'linear'\n                };\n            }));\n        }\n        each(items, (item)=>{\n            const scaleOptions = item.options;\n            const id = scaleOptions.id;\n            const axis = determineAxis(id, scaleOptions);\n            const scaleType = valueOrDefault(scaleOptions.type, item.dtype);\n            if (scaleOptions.position === undefined || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item.dposition)) {\n                scaleOptions.position = item.dposition;\n            }\n            updated[id] = true;\n            let scale = null;\n            if (id in scales && scales[id].type === scaleType) {\n                scale = scales[id];\n            } else {\n                const scaleClass = registry.getScale(scaleType);\n                scale = new scaleClass({\n                    id,\n                    type: scaleType,\n                    ctx: this.ctx,\n                    chart: this\n                });\n                scales[scale.id] = scale;\n            }\n            scale.init(scaleOptions, options);\n        });\n        each(updated, (hasUpdated, id)=>{\n            if (!hasUpdated) {\n                delete scales[id];\n            }\n        });\n        each(scales, (scale)=>{\n            layouts.configure(this, scale, scale.options);\n            layouts.addBox(this, scale);\n        });\n    }\n _updateMetasets() {\n        const metasets = this._metasets;\n        const numData = this.data.datasets.length;\n        const numMeta = metasets.length;\n        metasets.sort((a, b)=>a.index - b.index);\n        if (numMeta > numData) {\n            for(let i = numData; i < numMeta; ++i){\n                this._destroyDatasetMeta(i);\n            }\n            metasets.splice(numData, numMeta - numData);\n        }\n        this._sortedMetasets = metasets.slice(0).sort(compare2Level('order', 'index'));\n    }\n _removeUnreferencedMetasets() {\n        const { _metasets: metasets , data: { datasets  }  } = this;\n        if (metasets.length > datasets.length) {\n            delete this._stacks;\n        }\n        metasets.forEach((meta, index)=>{\n            if (datasets.filter((x)=>x === meta._dataset).length === 0) {\n                this._destroyDatasetMeta(index);\n            }\n        });\n    }\n    buildOrUpdateControllers() {\n        const newControllers = [];\n        const datasets = this.data.datasets;\n        let i, ilen;\n        this._removeUnreferencedMetasets();\n        for(i = 0, ilen = datasets.length; i < ilen; i++){\n            const dataset = datasets[i];\n            let meta = this.getDatasetMeta(i);\n            const type = dataset.type || this.config.type;\n            if (meta.type && meta.type !== type) {\n                this._destroyDatasetMeta(i);\n                meta = this.getDatasetMeta(i);\n            }\n            meta.type = type;\n            meta.indexAxis = dataset.indexAxis || getIndexAxis(type, this.options);\n            meta.order = dataset.order || 0;\n            meta.index = i;\n            meta.label = '' + dataset.label;\n            meta.visible = this.isDatasetVisible(i);\n            if (meta.controller) {\n                meta.controller.updateIndex(i);\n                meta.controller.linkScales();\n            } else {\n                const ControllerClass = registry.getController(type);\n                const { datasetElementType , dataElementType  } = defaults.datasets[type];\n                Object.assign(ControllerClass, {\n                    dataElementType: registry.getElement(dataElementType),\n                    datasetElementType: datasetElementType && registry.getElement(datasetElementType)\n                });\n                meta.controller = new ControllerClass(this, i);\n                newControllers.push(meta.controller);\n            }\n        }\n        this._updateMetasets();\n        return newControllers;\n    }\n _resetElements() {\n        each(this.data.datasets, (dataset, datasetIndex)=>{\n            this.getDatasetMeta(datasetIndex).controller.reset();\n        }, this);\n    }\n reset() {\n        this._resetElements();\n        this.notifyPlugins('reset');\n    }\n    update(mode) {\n        const config = this.config;\n        config.update();\n        const options = this._options = config.createResolver(config.chartOptionScopes(), this.getContext());\n        const animsDisabled = this._animationsDisabled = !options.animation;\n        this._updateScales();\n        this._checkEventBindings();\n        this._updateHiddenIndices();\n        this._plugins.invalidate();\n        if (this.notifyPlugins('beforeUpdate', {\n            mode,\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        const newControllers = this.buildOrUpdateControllers();\n        this.notifyPlugins('beforeElementsUpdate');\n        let minPadding = 0;\n        for(let i = 0, ilen = this.data.datasets.length; i < ilen; i++){\n            const { controller  } = this.getDatasetMeta(i);\n            const reset = !animsDisabled && newControllers.indexOf(controller) === -1;\n            controller.buildOrUpdateElements(reset);\n            minPadding = Math.max(+controller.getMaxOverflow(), minPadding);\n        }\n        minPadding = this._minPadding = options.layout.autoPadding ? minPadding : 0;\n        this._updateLayout(minPadding);\n        if (!animsDisabled) {\n            each(newControllers, (controller)=>{\n                controller.reset();\n            });\n        }\n        this._updateDatasets(mode);\n        this.notifyPlugins('afterUpdate', {\n            mode\n        });\n        this._layers.sort(compare2Level('z', '_idx'));\n        const { _active , _lastEvent  } = this;\n        if (_lastEvent) {\n            this._eventHandler(_lastEvent, true);\n        } else if (_active.length) {\n            this._updateHoverStyles(_active, _active, true);\n        }\n        this.render();\n    }\n _updateScales() {\n        each(this.scales, (scale)=>{\n            layouts.removeBox(this, scale);\n        });\n        this.ensureScalesHaveIDs();\n        this.buildOrUpdateScales();\n    }\n _checkEventBindings() {\n        const options = this.options;\n        const existingEvents = new Set(Object.keys(this._listeners));\n        const newEvents = new Set(options.events);\n        if (!setsEqual(existingEvents, newEvents) || !!this._responsiveListeners !== options.responsive) {\n            this.unbindEvents();\n            this.bindEvents();\n        }\n    }\n _updateHiddenIndices() {\n        const { _hiddenIndices  } = this;\n        const changes = this._getUniformDataChanges() || [];\n        for (const { method , start , count  } of changes){\n            const move = method === '_removeElements' ? -count : count;\n            moveNumericKeys(_hiddenIndices, start, move);\n        }\n    }\n _getUniformDataChanges() {\n        const _dataChanges = this._dataChanges;\n        if (!_dataChanges || !_dataChanges.length) {\n            return;\n        }\n        this._dataChanges = [];\n        const datasetCount = this.data.datasets.length;\n        const makeSet = (idx)=>new Set(_dataChanges.filter((c)=>c[0] === idx).map((c, i)=>i + ',' + c.splice(1).join(',')));\n        const changeSet = makeSet(0);\n        for(let i = 1; i < datasetCount; i++){\n            if (!setsEqual(changeSet, makeSet(i))) {\n                return;\n            }\n        }\n        return Array.from(changeSet).map((c)=>c.split(',')).map((a)=>({\n                method: a[1],\n                start: +a[2],\n                count: +a[3]\n            }));\n    }\n _updateLayout(minPadding) {\n        if (this.notifyPlugins('beforeLayout', {\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        layouts.update(this, this.width, this.height, minPadding);\n        const area = this.chartArea;\n        const noArea = area.width <= 0 || area.height <= 0;\n        this._layers = [];\n        each(this.boxes, (box)=>{\n            if (noArea && box.position === 'chartArea') {\n                return;\n            }\n            if (box.configure) {\n                box.configure();\n            }\n            this._layers.push(...box._layers());\n        }, this);\n        this._layers.forEach((item, index)=>{\n            item._idx = index;\n        });\n        this.notifyPlugins('afterLayout');\n    }\n _updateDatasets(mode) {\n        if (this.notifyPlugins('beforeDatasetsUpdate', {\n            mode,\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        for(let i = 0, ilen = this.data.datasets.length; i < ilen; ++i){\n            this.getDatasetMeta(i).controller.configure();\n        }\n        for(let i = 0, ilen = this.data.datasets.length; i < ilen; ++i){\n            this._updateDataset(i, isFunction(mode) ? mode({\n                datasetIndex: i\n            }) : mode);\n        }\n        this.notifyPlugins('afterDatasetsUpdate', {\n            mode\n        });\n    }\n _updateDataset(index, mode) {\n        const meta = this.getDatasetMeta(index);\n        const args = {\n            meta,\n            index,\n            mode,\n            cancelable: true\n        };\n        if (this.notifyPlugins('beforeDatasetUpdate', args) === false) {\n            return;\n        }\n        meta.controller._update(mode);\n        args.cancelable = false;\n        this.notifyPlugins('afterDatasetUpdate', args);\n    }\n    render() {\n        if (this.notifyPlugins('beforeRender', {\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        if (animator.has(this)) {\n            if (this.attached && !animator.running(this)) {\n                animator.start(this);\n            }\n        } else {\n            this.draw();\n            onAnimationsComplete({\n                chart: this\n            });\n        }\n    }\n    draw() {\n        let i;\n        if (this._resizeBeforeDraw) {\n            const { width , height  } = this._resizeBeforeDraw;\n            this._resize(width, height);\n            this._resizeBeforeDraw = null;\n        }\n        this.clear();\n        if (this.width <= 0 || this.height <= 0) {\n            return;\n        }\n        if (this.notifyPlugins('beforeDraw', {\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        const layers = this._layers;\n        for(i = 0; i < layers.length && layers[i].z <= 0; ++i){\n            layers[i].draw(this.chartArea);\n        }\n        this._drawDatasets();\n        for(; i < layers.length; ++i){\n            layers[i].draw(this.chartArea);\n        }\n        this.notifyPlugins('afterDraw');\n    }\n _getSortedDatasetMetas(filterVisible) {\n        const metasets = this._sortedMetasets;\n        const result = [];\n        let i, ilen;\n        for(i = 0, ilen = metasets.length; i < ilen; ++i){\n            const meta = metasets[i];\n            if (!filterVisible || meta.visible) {\n                result.push(meta);\n            }\n        }\n        return result;\n    }\n getSortedVisibleDatasetMetas() {\n        return this._getSortedDatasetMetas(true);\n    }\n _drawDatasets() {\n        if (this.notifyPlugins('beforeDatasetsDraw', {\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        const metasets = this.getSortedVisibleDatasetMetas();\n        for(let i = metasets.length - 1; i >= 0; --i){\n            this._drawDataset(metasets[i]);\n        }\n        this.notifyPlugins('afterDatasetsDraw');\n    }\n _drawDataset(meta) {\n        const ctx = this.ctx;\n        const clip = meta._clip;\n        const useClip = !clip.disabled;\n        const area = getDatasetArea(meta, this.chartArea);\n        const args = {\n            meta,\n            index: meta.index,\n            cancelable: true\n        };\n        if (this.notifyPlugins('beforeDatasetDraw', args) === false) {\n            return;\n        }\n        if (useClip) {\n            clipArea(ctx, {\n                left: clip.left === false ? 0 : area.left - clip.left,\n                right: clip.right === false ? this.width : area.right + clip.right,\n                top: clip.top === false ? 0 : area.top - clip.top,\n                bottom: clip.bottom === false ? this.height : area.bottom + clip.bottom\n            });\n        }\n        meta.controller.draw();\n        if (useClip) {\n            unclipArea(ctx);\n        }\n        args.cancelable = false;\n        this.notifyPlugins('afterDatasetDraw', args);\n    }\n isPointInArea(point) {\n        return _isPointInArea(point, this.chartArea, this._minPadding);\n    }\n    getElementsAtEventForMode(e, mode, options, useFinalPosition) {\n        const method = Interaction.modes[mode];\n        if (typeof method === 'function') {\n            return method(this, e, options, useFinalPosition);\n        }\n        return [];\n    }\n    getDatasetMeta(datasetIndex) {\n        const dataset = this.data.datasets[datasetIndex];\n        const metasets = this._metasets;\n        let meta = metasets.filter((x)=>x && x._dataset === dataset).pop();\n        if (!meta) {\n            meta = {\n                type: null,\n                data: [],\n                dataset: null,\n                controller: null,\n                hidden: null,\n                xAxisID: null,\n                yAxisID: null,\n                order: dataset && dataset.order || 0,\n                index: datasetIndex,\n                _dataset: dataset,\n                _parsed: [],\n                _sorted: false\n            };\n            metasets.push(meta);\n        }\n        return meta;\n    }\n    getContext() {\n        return this.$context || (this.$context = createContext(null, {\n            chart: this,\n            type: 'chart'\n        }));\n    }\n    getVisibleDatasetCount() {\n        return this.getSortedVisibleDatasetMetas().length;\n    }\n    isDatasetVisible(datasetIndex) {\n        const dataset = this.data.datasets[datasetIndex];\n        if (!dataset) {\n            return false;\n        }\n        const meta = this.getDatasetMeta(datasetIndex);\n        return typeof meta.hidden === 'boolean' ? !meta.hidden : !dataset.hidden;\n    }\n    setDatasetVisibility(datasetIndex, visible) {\n        const meta = this.getDatasetMeta(datasetIndex);\n        meta.hidden = !visible;\n    }\n    toggleDataVisibility(index) {\n        this._hiddenIndices[index] = !this._hiddenIndices[index];\n    }\n    getDataVisibility(index) {\n        return !this._hiddenIndices[index];\n    }\n _updateVisibility(datasetIndex, dataIndex, visible) {\n        const mode = visible ? 'show' : 'hide';\n        const meta = this.getDatasetMeta(datasetIndex);\n        const anims = meta.controller._resolveAnimations(undefined, mode);\n        if (defined(dataIndex)) {\n            meta.data[dataIndex].hidden = !visible;\n            this.update();\n        } else {\n            this.setDatasetVisibility(datasetIndex, visible);\n            anims.update(meta, {\n                visible\n            });\n            this.update((ctx)=>ctx.datasetIndex === datasetIndex ? mode : undefined);\n        }\n    }\n    hide(datasetIndex, dataIndex) {\n        this._updateVisibility(datasetIndex, dataIndex, false);\n    }\n    show(datasetIndex, dataIndex) {\n        this._updateVisibility(datasetIndex, dataIndex, true);\n    }\n _destroyDatasetMeta(datasetIndex) {\n        const meta = this._metasets[datasetIndex];\n        if (meta && meta.controller) {\n            meta.controller._destroy();\n        }\n        delete this._metasets[datasetIndex];\n    }\n    _stop() {\n        let i, ilen;\n        this.stop();\n        animator.remove(this);\n        for(i = 0, ilen = this.data.datasets.length; i < ilen; ++i){\n            this._destroyDatasetMeta(i);\n        }\n    }\n    destroy() {\n        this.notifyPlugins('beforeDestroy');\n        const { canvas , ctx  } = this;\n        this._stop();\n        this.config.clearCache();\n        if (canvas) {\n            this.unbindEvents();\n            clearCanvas(canvas, ctx);\n            this.platform.releaseContext(ctx);\n            this.canvas = null;\n            this.ctx = null;\n        }\n        delete instances[this.id];\n        this.notifyPlugins('afterDestroy');\n    }\n    toBase64Image(...args) {\n        return this.canvas.toDataURL(...args);\n    }\n bindEvents() {\n        this.bindUserEvents();\n        if (this.options.responsive) {\n            this.bindResponsiveEvents();\n        } else {\n            this.attached = true;\n        }\n    }\n bindUserEvents() {\n        const listeners = this._listeners;\n        const platform = this.platform;\n        const _add = (type, listener)=>{\n            platform.addEventListener(this, type, listener);\n            listeners[type] = listener;\n        };\n        const listener = (e, x, y)=>{\n            e.offsetX = x;\n            e.offsetY = y;\n            this._eventHandler(e);\n        };\n        each(this.options.events, (type)=>_add(type, listener));\n    }\n bindResponsiveEvents() {\n        if (!this._responsiveListeners) {\n            this._responsiveListeners = {};\n        }\n        const listeners = this._responsiveListeners;\n        const platform = this.platform;\n        const _add = (type, listener)=>{\n            platform.addEventListener(this, type, listener);\n            listeners[type] = listener;\n        };\n        const _remove = (type, listener)=>{\n            if (listeners[type]) {\n                platform.removeEventListener(this, type, listener);\n                delete listeners[type];\n            }\n        };\n        const listener = (width, height)=>{\n            if (this.canvas) {\n                this.resize(width, height);\n            }\n        };\n        let detached;\n        const attached = ()=>{\n            _remove('attach', attached);\n            this.attached = true;\n            this.resize();\n            _add('resize', listener);\n            _add('detach', detached);\n        };\n        detached = ()=>{\n            this.attached = false;\n            _remove('resize', listener);\n            this._stop();\n            this._resize(0, 0);\n            _add('attach', attached);\n        };\n        if (platform.isAttached(this.canvas)) {\n            attached();\n        } else {\n            detached();\n        }\n    }\n unbindEvents() {\n        each(this._listeners, (listener, type)=>{\n            this.platform.removeEventListener(this, type, listener);\n        });\n        this._listeners = {};\n        each(this._responsiveListeners, (listener, type)=>{\n            this.platform.removeEventListener(this, type, listener);\n        });\n        this._responsiveListeners = undefined;\n    }\n    updateHoverStyle(items, mode, enabled) {\n        const prefix = enabled ? 'set' : 'remove';\n        let meta, item, i, ilen;\n        if (mode === 'dataset') {\n            meta = this.getDatasetMeta(items[0].datasetIndex);\n            meta.controller['_' + prefix + 'DatasetHoverStyle']();\n        }\n        for(i = 0, ilen = items.length; i < ilen; ++i){\n            item = items[i];\n            const controller = item && this.getDatasetMeta(item.datasetIndex).controller;\n            if (controller) {\n                controller[prefix + 'HoverStyle'](item.element, item.datasetIndex, item.index);\n            }\n        }\n    }\n getActiveElements() {\n        return this._active || [];\n    }\n setActiveElements(activeElements) {\n        const lastActive = this._active || [];\n        const active = activeElements.map(({ datasetIndex , index  })=>{\n            const meta = this.getDatasetMeta(datasetIndex);\n            if (!meta) {\n                throw new Error('No dataset found at index ' + datasetIndex);\n            }\n            return {\n                datasetIndex,\n                element: meta.data[index],\n                index\n            };\n        });\n        const changed = !_elementsEqual(active, lastActive);\n        if (changed) {\n            this._active = active;\n            this._lastEvent = null;\n            this._updateHoverStyles(active, lastActive);\n        }\n    }\n notifyPlugins(hook, args, filter) {\n        return this._plugins.notify(this, hook, args, filter);\n    }\n isPluginEnabled(pluginId) {\n        return this._plugins._cache.filter((p)=>p.plugin.id === pluginId).length === 1;\n    }\n _updateHoverStyles(active, lastActive, replay) {\n        const hoverOptions = this.options.hover;\n        const diff = (a, b)=>a.filter((x)=>!b.some((y)=>x.datasetIndex === y.datasetIndex && x.index === y.index));\n        const deactivated = diff(lastActive, active);\n        const activated = replay ? active : diff(active, lastActive);\n        if (deactivated.length) {\n            this.updateHoverStyle(deactivated, hoverOptions.mode, false);\n        }\n        if (activated.length && hoverOptions.mode) {\n            this.updateHoverStyle(activated, hoverOptions.mode, true);\n        }\n    }\n _eventHandler(e, replay) {\n        const args = {\n            event: e,\n            replay,\n            cancelable: true,\n            inChartArea: this.isPointInArea(e)\n        };\n        const eventFilter = (plugin)=>(plugin.options.events || this.options.events).includes(e.native.type);\n        if (this.notifyPlugins('beforeEvent', args, eventFilter) === false) {\n            return;\n        }\n        const changed = this._handleEvent(e, replay, args.inChartArea);\n        args.cancelable = false;\n        this.notifyPlugins('afterEvent', args, eventFilter);\n        if (changed || args.changed) {\n            this.render();\n        }\n        return this;\n    }\n _handleEvent(e, replay, inChartArea) {\n        const { _active: lastActive = [] , options  } = this;\n        const useFinalPosition = replay;\n        const active = this._getActiveElements(e, lastActive, inChartArea, useFinalPosition);\n        const isClick = _isClickEvent(e);\n        const lastEvent = determineLastEvent(e, this._lastEvent, inChartArea, isClick);\n        if (inChartArea) {\n            this._lastEvent = null;\n            callback(options.onHover, [\n                e,\n                active,\n                this\n            ], this);\n            if (isClick) {\n                callback(options.onClick, [\n                    e,\n                    active,\n                    this\n                ], this);\n            }\n        }\n        const changed = !_elementsEqual(active, lastActive);\n        if (changed || replay) {\n            this._active = active;\n            this._updateHoverStyles(active, lastActive, replay);\n        }\n        this._lastEvent = lastEvent;\n        return changed;\n    }\n _getActiveElements(e, lastActive, inChartArea, useFinalPosition) {\n        if (e.type === 'mouseout') {\n            return [];\n        }\n        if (!inChartArea) {\n            return lastActive;\n        }\n        const hoverOptions = this.options.hover;\n        return this.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions, useFinalPosition);\n    }\n}\nfunction invalidatePlugins() {\n    return each(Chart.instances, (chart)=>chart._plugins.invalidate());\n}\n\nfunction clipArc(ctx, element, endAngle) {\n    const { startAngle , pixelMargin , x , y , outerRadius , innerRadius  } = element;\n    let angleMargin = pixelMargin / outerRadius;\n    // Draw an inner border by clipping the arc and drawing a double-width border\n    // Enlarge the clipping arc by 0.33 pixels to eliminate glitches between borders\n    ctx.beginPath();\n    ctx.arc(x, y, outerRadius, startAngle - angleMargin, endAngle + angleMargin);\n    if (innerRadius > pixelMargin) {\n        angleMargin = pixelMargin / innerRadius;\n        ctx.arc(x, y, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);\n    } else {\n        ctx.arc(x, y, pixelMargin, endAngle + HALF_PI, startAngle - HALF_PI);\n    }\n    ctx.closePath();\n    ctx.clip();\n}\nfunction toRadiusCorners(value) {\n    return _readValueToProps(value, [\n        'outerStart',\n        'outerEnd',\n        'innerStart',\n        'innerEnd'\n    ]);\n}\n/**\n * Parse border radius from the provided options\n */ function parseBorderRadius$1(arc, innerRadius, outerRadius, angleDelta) {\n    const o = toRadiusCorners(arc.options.borderRadius);\n    const halfThickness = (outerRadius - innerRadius) / 2;\n    const innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2);\n    // Outer limits are complicated. We want to compute the available angular distance at\n    // a radius of outerRadius - borderRadius because for small angular distances, this term limits.\n    // We compute at r = outerRadius - borderRadius because this circle defines the center of the border corners.\n    //\n    // If the borderRadius is large, that value can become negative.\n    // This causes the outer borders to lose their radius entirely, which is rather unexpected. To solve that, if borderRadius > outerRadius\n    // we know that the thickness term will dominate and compute the limits at that point\n    const computeOuterLimit = (val)=>{\n        const outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;\n        return _limitValue(val, 0, Math.min(halfThickness, outerArcLimit));\n    };\n    return {\n        outerStart: computeOuterLimit(o.outerStart),\n        outerEnd: computeOuterLimit(o.outerEnd),\n        innerStart: _limitValue(o.innerStart, 0, innerLimit),\n        innerEnd: _limitValue(o.innerEnd, 0, innerLimit)\n    };\n}\n/**\n * Convert (r, 𝜃) to (x, y)\n */ function rThetaToXY(r, theta, x, y) {\n    return {\n        x: x + r * Math.cos(theta),\n        y: y + r * Math.sin(theta)\n    };\n}\n/**\n * Path the arc, respecting border radius by separating into left and right halves.\n *\n *   Start      End\n *\n *    1--->a--->2    Outer\n *   /           \\\n *   8           3\n *   |           |\n *   |           |\n *   7           4\n *   \\           /\n *    6<---b<---5    Inner\n */ function pathArc(ctx, element, offset, spacing, end, circular) {\n    const { x , y , startAngle: start , pixelMargin , innerRadius: innerR  } = element;\n    const outerRadius = Math.max(element.outerRadius + spacing + offset - pixelMargin, 0);\n    const innerRadius = innerR > 0 ? innerR + spacing + offset + pixelMargin : 0;\n    let spacingOffset = 0;\n    const alpha = end - start;\n    if (spacing) {\n        // When spacing is present, it is the same for all items\n        // So we adjust the start and end angle of the arc such that\n        // the distance is the same as it would be without the spacing\n        const noSpacingInnerRadius = innerR > 0 ? innerR - spacing : 0;\n        const noSpacingOuterRadius = outerRadius > 0 ? outerRadius - spacing : 0;\n        const avNogSpacingRadius = (noSpacingInnerRadius + noSpacingOuterRadius) / 2;\n        const adjustedAngle = avNogSpacingRadius !== 0 ? alpha * avNogSpacingRadius / (avNogSpacingRadius + spacing) : alpha;\n        spacingOffset = (alpha - adjustedAngle) / 2;\n    }\n    const beta = Math.max(0.001, alpha * outerRadius - offset / PI) / outerRadius;\n    const angleOffset = (alpha - beta) / 2;\n    const startAngle = start + angleOffset + spacingOffset;\n    const endAngle = end - angleOffset - spacingOffset;\n    const { outerStart , outerEnd , innerStart , innerEnd  } = parseBorderRadius$1(element, innerRadius, outerRadius, endAngle - startAngle);\n    const outerStartAdjustedRadius = outerRadius - outerStart;\n    const outerEndAdjustedRadius = outerRadius - outerEnd;\n    const outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;\n    const outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;\n    const innerStartAdjustedRadius = innerRadius + innerStart;\n    const innerEndAdjustedRadius = innerRadius + innerEnd;\n    const innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;\n    const innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;\n    ctx.beginPath();\n    if (circular) {\n        // The first arc segments from point 1 to point a to point 2\n        const outerMidAdjustedAngle = (outerStartAdjustedAngle + outerEndAdjustedAngle) / 2;\n        ctx.arc(x, y, outerRadius, outerStartAdjustedAngle, outerMidAdjustedAngle);\n        ctx.arc(x, y, outerRadius, outerMidAdjustedAngle, outerEndAdjustedAngle);\n        // The corner segment from point 2 to point 3\n        if (outerEnd > 0) {\n            const pCenter = rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x, y);\n            ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + HALF_PI);\n        }\n        // The line from point 3 to point 4\n        const p4 = rThetaToXY(innerEndAdjustedRadius, endAngle, x, y);\n        ctx.lineTo(p4.x, p4.y);\n        // The corner segment from point 4 to point 5\n        if (innerEnd > 0) {\n            const pCenter = rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x, y);\n            ctx.arc(pCenter.x, pCenter.y, innerEnd, endAngle + HALF_PI, innerEndAdjustedAngle + Math.PI);\n        }\n        // The inner arc from point 5 to point b to point 6\n        const innerMidAdjustedAngle = (endAngle - innerEnd / innerRadius + (startAngle + innerStart / innerRadius)) / 2;\n        ctx.arc(x, y, innerRadius, endAngle - innerEnd / innerRadius, innerMidAdjustedAngle, true);\n        ctx.arc(x, y, innerRadius, innerMidAdjustedAngle, startAngle + innerStart / innerRadius, true);\n        // The corner segment from point 6 to point 7\n        if (innerStart > 0) {\n            const pCenter = rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x, y);\n            ctx.arc(pCenter.x, pCenter.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - HALF_PI);\n        }\n        // The line from point 7 to point 8\n        const p8 = rThetaToXY(outerStartAdjustedRadius, startAngle, x, y);\n        ctx.lineTo(p8.x, p8.y);\n        // The corner segment from point 8 to point 1\n        if (outerStart > 0) {\n            const pCenter = rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x, y);\n            ctx.arc(pCenter.x, pCenter.y, outerStart, startAngle - HALF_PI, outerStartAdjustedAngle);\n        }\n    } else {\n        ctx.moveTo(x, y);\n        const outerStartX = Math.cos(outerStartAdjustedAngle) * outerRadius + x;\n        const outerStartY = Math.sin(outerStartAdjustedAngle) * outerRadius + y;\n        ctx.lineTo(outerStartX, outerStartY);\n        const outerEndX = Math.cos(outerEndAdjustedAngle) * outerRadius + x;\n        const outerEndY = Math.sin(outerEndAdjustedAngle) * outerRadius + y;\n        ctx.lineTo(outerEndX, outerEndY);\n    }\n    ctx.closePath();\n}\nfunction drawArc(ctx, element, offset, spacing, circular) {\n    const { fullCircles , startAngle , circumference  } = element;\n    let endAngle = element.endAngle;\n    if (fullCircles) {\n        pathArc(ctx, element, offset, spacing, endAngle, circular);\n        for(let i = 0; i < fullCircles; ++i){\n            ctx.fill();\n        }\n        if (!isNaN(circumference)) {\n            endAngle = startAngle + (circumference % TAU || TAU);\n        }\n    }\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    ctx.fill();\n    return endAngle;\n}\nfunction drawBorder(ctx, element, offset, spacing, circular) {\n    const { fullCircles , startAngle , circumference , options  } = element;\n    const { borderWidth , borderJoinStyle , borderDash , borderDashOffset  } = options;\n    const inner = options.borderAlign === 'inner';\n    if (!borderWidth) {\n        return;\n    }\n    ctx.setLineDash(borderDash || []);\n    ctx.lineDashOffset = borderDashOffset;\n    if (inner) {\n        ctx.lineWidth = borderWidth * 2;\n        ctx.lineJoin = borderJoinStyle || 'round';\n    } else {\n        ctx.lineWidth = borderWidth;\n        ctx.lineJoin = borderJoinStyle || 'bevel';\n    }\n    let endAngle = element.endAngle;\n    if (fullCircles) {\n        pathArc(ctx, element, offset, spacing, endAngle, circular);\n        for(let i = 0; i < fullCircles; ++i){\n            ctx.stroke();\n        }\n        if (!isNaN(circumference)) {\n            endAngle = startAngle + (circumference % TAU || TAU);\n        }\n    }\n    if (inner) {\n        clipArc(ctx, element, endAngle);\n    }\n    if (!fullCircles) {\n        pathArc(ctx, element, offset, spacing, endAngle, circular);\n        ctx.stroke();\n    }\n}\nclass ArcElement extends Element {\n    static id = 'arc';\n    static defaults = {\n        borderAlign: 'center',\n        borderColor: '#fff',\n        borderDash: [],\n        borderDashOffset: 0,\n        borderJoinStyle: undefined,\n        borderRadius: 0,\n        borderWidth: 2,\n        offset: 0,\n        spacing: 0,\n        angle: undefined,\n        circular: true\n    };\n    static defaultRoutes = {\n        backgroundColor: 'backgroundColor'\n    };\n    static descriptors = {\n        _scriptable: true,\n        _indexable: (name)=>name !== 'borderDash'\n    };\n    circumference;\n    endAngle;\n    fullCircles;\n    innerRadius;\n    outerRadius;\n    pixelMargin;\n    startAngle;\n    constructor(cfg){\n        super();\n        this.options = undefined;\n        this.circumference = undefined;\n        this.startAngle = undefined;\n        this.endAngle = undefined;\n        this.innerRadius = undefined;\n        this.outerRadius = undefined;\n        this.pixelMargin = 0;\n        this.fullCircles = 0;\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n    inRange(chartX, chartY, useFinalPosition) {\n        const point = this.getProps([\n            'x',\n            'y'\n        ], useFinalPosition);\n        const { angle , distance  } = getAngleFromPoint(point, {\n            x: chartX,\n            y: chartY\n        });\n        const { startAngle , endAngle , innerRadius , outerRadius , circumference  } = this.getProps([\n            'startAngle',\n            'endAngle',\n            'innerRadius',\n            'outerRadius',\n            'circumference'\n        ], useFinalPosition);\n        const rAdjust = (this.options.spacing + this.options.borderWidth) / 2;\n        const _circumference = valueOrDefault(circumference, endAngle - startAngle);\n        const betweenAngles = _circumference >= TAU || _angleBetween(angle, startAngle, endAngle);\n        const withinRadius = _isBetween(distance, innerRadius + rAdjust, outerRadius + rAdjust);\n        return betweenAngles && withinRadius;\n    }\n    getCenterPoint(useFinalPosition) {\n        const { x , y , startAngle , endAngle , innerRadius , outerRadius  } = this.getProps([\n            'x',\n            'y',\n            'startAngle',\n            'endAngle',\n            'innerRadius',\n            'outerRadius'\n        ], useFinalPosition);\n        const { offset , spacing  } = this.options;\n        const halfAngle = (startAngle + endAngle) / 2;\n        const halfRadius = (innerRadius + outerRadius + spacing + offset) / 2;\n        return {\n            x: x + Math.cos(halfAngle) * halfRadius,\n            y: y + Math.sin(halfAngle) * halfRadius\n        };\n    }\n    tooltipPosition(useFinalPosition) {\n        return this.getCenterPoint(useFinalPosition);\n    }\n    draw(ctx) {\n        const { options , circumference  } = this;\n        const offset = (options.offset || 0) / 4;\n        const spacing = (options.spacing || 0) / 2;\n        const circular = options.circular;\n        this.pixelMargin = options.borderAlign === 'inner' ? 0.33 : 0;\n        this.fullCircles = circumference > TAU ? Math.floor(circumference / TAU) : 0;\n        if (circumference === 0 || this.innerRadius < 0 || this.outerRadius < 0) {\n            return;\n        }\n        ctx.save();\n        const halfAngle = (this.startAngle + this.endAngle) / 2;\n        ctx.translate(Math.cos(halfAngle) * offset, Math.sin(halfAngle) * offset);\n        const fix = 1 - Math.sin(Math.min(PI, circumference || 0));\n        const radiusOffset = offset * fix;\n        ctx.fillStyle = options.backgroundColor;\n        ctx.strokeStyle = options.borderColor;\n        drawArc(ctx, this, radiusOffset, spacing, circular);\n        drawBorder(ctx, this, radiusOffset, spacing, circular);\n        ctx.restore();\n    }\n}\n\nfunction setStyle(ctx, options, style = options) {\n    ctx.lineCap = valueOrDefault(style.borderCapStyle, options.borderCapStyle);\n    ctx.setLineDash(valueOrDefault(style.borderDash, options.borderDash));\n    ctx.lineDashOffset = valueOrDefault(style.borderDashOffset, options.borderDashOffset);\n    ctx.lineJoin = valueOrDefault(style.borderJoinStyle, options.borderJoinStyle);\n    ctx.lineWidth = valueOrDefault(style.borderWidth, options.borderWidth);\n    ctx.strokeStyle = valueOrDefault(style.borderColor, options.borderColor);\n}\nfunction lineTo(ctx, previous, target) {\n    ctx.lineTo(target.x, target.y);\n}\n function getLineMethod(options) {\n    if (options.stepped) {\n        return _steppedLineTo;\n    }\n    if (options.tension || options.cubicInterpolationMode === 'monotone') {\n        return _bezierCurveTo;\n    }\n    return lineTo;\n}\nfunction pathVars(points, segment, params = {}) {\n    const count = points.length;\n    const { start: paramsStart = 0 , end: paramsEnd = count - 1  } = params;\n    const { start: segmentStart , end: segmentEnd  } = segment;\n    const start = Math.max(paramsStart, segmentStart);\n    const end = Math.min(paramsEnd, segmentEnd);\n    const outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;\n    return {\n        count,\n        start,\n        loop: segment.loop,\n        ilen: end < start && !outside ? count + end - start : end - start\n    };\n}\n function pathSegment(ctx, line, segment, params) {\n    const { points , options  } = line;\n    const { count , start , loop , ilen  } = pathVars(points, segment, params);\n    const lineMethod = getLineMethod(options);\n    let { move =true , reverse  } = params || {};\n    let i, point, prev;\n    for(i = 0; i <= ilen; ++i){\n        point = points[(start + (reverse ? ilen - i : i)) % count];\n        if (point.skip) {\n            continue;\n        } else if (move) {\n            ctx.moveTo(point.x, point.y);\n            move = false;\n        } else {\n            lineMethod(ctx, prev, point, reverse, options.stepped);\n        }\n        prev = point;\n    }\n    if (loop) {\n        point = points[(start + (reverse ? ilen : 0)) % count];\n        lineMethod(ctx, prev, point, reverse, options.stepped);\n    }\n    return !!loop;\n}\n function fastPathSegment(ctx, line, segment, params) {\n    const points = line.points;\n    const { count , start , ilen  } = pathVars(points, segment, params);\n    const { move =true , reverse  } = params || {};\n    let avgX = 0;\n    let countX = 0;\n    let i, point, prevX, minY, maxY, lastY;\n    const pointIndex = (index)=>(start + (reverse ? ilen - index : index)) % count;\n    const drawX = ()=>{\n        if (minY !== maxY) {\n            ctx.lineTo(avgX, maxY);\n            ctx.lineTo(avgX, minY);\n            ctx.lineTo(avgX, lastY);\n        }\n    };\n    if (move) {\n        point = points[pointIndex(0)];\n        ctx.moveTo(point.x, point.y);\n    }\n    for(i = 0; i <= ilen; ++i){\n        point = points[pointIndex(i)];\n        if (point.skip) {\n            continue;\n        }\n        const x = point.x;\n        const y = point.y;\n        const truncX = x | 0;\n        if (truncX === prevX) {\n            if (y < minY) {\n                minY = y;\n            } else if (y > maxY) {\n                maxY = y;\n            }\n            avgX = (countX * avgX + x) / ++countX;\n        } else {\n            drawX();\n            ctx.lineTo(x, y);\n            prevX = truncX;\n            countX = 0;\n            minY = maxY = y;\n        }\n        lastY = y;\n    }\n    drawX();\n}\n function _getSegmentMethod(line) {\n    const opts = line.options;\n    const borderDash = opts.borderDash && opts.borderDash.length;\n    const useFastPath = !line._decimated && !line._loop && !opts.tension && opts.cubicInterpolationMode !== 'monotone' && !opts.stepped && !borderDash;\n    return useFastPath ? fastPathSegment : pathSegment;\n}\n function _getInterpolationMethod(options) {\n    if (options.stepped) {\n        return _steppedInterpolation;\n    }\n    if (options.tension || options.cubicInterpolationMode === 'monotone') {\n        return _bezierInterpolation;\n    }\n    return _pointInLine;\n}\nfunction strokePathWithCache(ctx, line, start, count) {\n    let path = line._path;\n    if (!path) {\n        path = line._path = new Path2D();\n        if (line.path(path, start, count)) {\n            path.closePath();\n        }\n    }\n    setStyle(ctx, line.options);\n    ctx.stroke(path);\n}\nfunction strokePathDirect(ctx, line, start, count) {\n    const { segments , options  } = line;\n    const segmentMethod = _getSegmentMethod(line);\n    for (const segment of segments){\n        setStyle(ctx, options, segment.style);\n        ctx.beginPath();\n        if (segmentMethod(ctx, line, segment, {\n            start,\n            end: start + count - 1\n        })) {\n            ctx.closePath();\n        }\n        ctx.stroke();\n    }\n}\nconst usePath2D = typeof Path2D === 'function';\nfunction draw(ctx, line, start, count) {\n    if (usePath2D && !line.options.segment) {\n        strokePathWithCache(ctx, line, start, count);\n    } else {\n        strokePathDirect(ctx, line, start, count);\n    }\n}\nclass LineElement extends Element {\n    static id = 'line';\n static defaults = {\n        borderCapStyle: 'butt',\n        borderDash: [],\n        borderDashOffset: 0,\n        borderJoinStyle: 'miter',\n        borderWidth: 3,\n        capBezierPoints: true,\n        cubicInterpolationMode: 'default',\n        fill: false,\n        spanGaps: false,\n        stepped: false,\n        tension: 0\n    };\n static defaultRoutes = {\n        backgroundColor: 'backgroundColor',\n        borderColor: 'borderColor'\n    };\n    static descriptors = {\n        _scriptable: true,\n        _indexable: (name)=>name !== 'borderDash' && name !== 'fill'\n    };\n    constructor(cfg){\n        super();\n        this.animated = true;\n        this.options = undefined;\n        this._chart = undefined;\n        this._loop = undefined;\n        this._fullLoop = undefined;\n        this._path = undefined;\n        this._points = undefined;\n        this._segments = undefined;\n        this._decimated = false;\n        this._pointsUpdated = false;\n        this._datasetIndex = undefined;\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n    updateControlPoints(chartArea, indexAxis) {\n        const options = this.options;\n        if ((options.tension || options.cubicInterpolationMode === 'monotone') && !options.stepped && !this._pointsUpdated) {\n            const loop = options.spanGaps ? this._loop : this._fullLoop;\n            _updateBezierControlPoints(this._points, options, chartArea, loop, indexAxis);\n            this._pointsUpdated = true;\n        }\n    }\n    set points(points) {\n        this._points = points;\n        delete this._segments;\n        delete this._path;\n        this._pointsUpdated = false;\n    }\n    get points() {\n        return this._points;\n    }\n    get segments() {\n        return this._segments || (this._segments = _computeSegments(this, this.options.segment));\n    }\n first() {\n        const segments = this.segments;\n        const points = this.points;\n        return segments.length && points[segments[0].start];\n    }\n last() {\n        const segments = this.segments;\n        const points = this.points;\n        const count = segments.length;\n        return count && points[segments[count - 1].end];\n    }\n interpolate(point, property) {\n        const options = this.options;\n        const value = point[property];\n        const points = this.points;\n        const segments = _boundSegments(this, {\n            property,\n            start: value,\n            end: value\n        });\n        if (!segments.length) {\n            return;\n        }\n        const result = [];\n        const _interpolate = _getInterpolationMethod(options);\n        let i, ilen;\n        for(i = 0, ilen = segments.length; i < ilen; ++i){\n            const { start , end  } = segments[i];\n            const p1 = points[start];\n            const p2 = points[end];\n            if (p1 === p2) {\n                result.push(p1);\n                continue;\n            }\n            const t = Math.abs((value - p1[property]) / (p2[property] - p1[property]));\n            const interpolated = _interpolate(p1, p2, t, options.stepped);\n            interpolated[property] = point[property];\n            result.push(interpolated);\n        }\n        return result.length === 1 ? result[0] : result;\n    }\n pathSegment(ctx, segment, params) {\n        const segmentMethod = _getSegmentMethod(this);\n        return segmentMethod(ctx, this, segment, params);\n    }\n path(ctx, start, count) {\n        const segments = this.segments;\n        const segmentMethod = _getSegmentMethod(this);\n        let loop = this._loop;\n        start = start || 0;\n        count = count || this.points.length - start;\n        for (const segment of segments){\n            loop &= segmentMethod(ctx, this, segment, {\n                start,\n                end: start + count - 1\n            });\n        }\n        return !!loop;\n    }\n draw(ctx, chartArea, start, count) {\n        const options = this.options || {};\n        const points = this.points || [];\n        if (points.length && options.borderWidth) {\n            ctx.save();\n            draw(ctx, this, start, count);\n            ctx.restore();\n        }\n        if (this.animated) {\n            this._pointsUpdated = false;\n            this._path = undefined;\n        }\n    }\n}\n\nfunction inRange$1(el, pos, axis, useFinalPosition) {\n    const options = el.options;\n    const { [axis]: value  } = el.getProps([\n        axis\n    ], useFinalPosition);\n    return Math.abs(pos - value) < options.radius + options.hitRadius;\n}\nclass PointElement extends Element {\n    static id = 'point';\n    parsed;\n    skip;\n    stop;\n    /**\n   * @type {any}\n   */ static defaults = {\n        borderWidth: 1,\n        hitRadius: 1,\n        hoverBorderWidth: 1,\n        hoverRadius: 4,\n        pointStyle: 'circle',\n        radius: 3,\n        rotation: 0\n    };\n    /**\n   * @type {any}\n   */ static defaultRoutes = {\n        backgroundColor: 'backgroundColor',\n        borderColor: 'borderColor'\n    };\n    constructor(cfg){\n        super();\n        this.options = undefined;\n        this.parsed = undefined;\n        this.skip = undefined;\n        this.stop = undefined;\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n    inRange(mouseX, mouseY, useFinalPosition) {\n        const options = this.options;\n        const { x , y  } = this.getProps([\n            'x',\n            'y'\n        ], useFinalPosition);\n        return Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2) < Math.pow(options.hitRadius + options.radius, 2);\n    }\n    inXRange(mouseX, useFinalPosition) {\n        return inRange$1(this, mouseX, 'x', useFinalPosition);\n    }\n    inYRange(mouseY, useFinalPosition) {\n        return inRange$1(this, mouseY, 'y', useFinalPosition);\n    }\n    getCenterPoint(useFinalPosition) {\n        const { x , y  } = this.getProps([\n            'x',\n            'y'\n        ], useFinalPosition);\n        return {\n            x,\n            y\n        };\n    }\n    size(options) {\n        options = options || this.options || {};\n        let radius = options.radius || 0;\n        radius = Math.max(radius, radius && options.hoverRadius || 0);\n        const borderWidth = radius && options.borderWidth || 0;\n        return (radius + borderWidth) * 2;\n    }\n    draw(ctx, area) {\n        const options = this.options;\n        if (this.skip || options.radius < 0.1 || !_isPointInArea(this, area, this.size(options) / 2)) {\n            return;\n        }\n        ctx.strokeStyle = options.borderColor;\n        ctx.lineWidth = options.borderWidth;\n        ctx.fillStyle = options.backgroundColor;\n        drawPoint(ctx, options, this.x, this.y);\n    }\n    getRange() {\n        const options = this.options || {};\n        // @ts-expect-error Fallbacks should never be hit in practice\n        return options.radius + options.hitRadius;\n    }\n}\n\nfunction getBarBounds(bar, useFinalPosition) {\n    const { x , y , base , width , height  } =  bar.getProps([\n        'x',\n        'y',\n        'base',\n        'width',\n        'height'\n    ], useFinalPosition);\n    let left, right, top, bottom, half;\n    if (bar.horizontal) {\n        half = height / 2;\n        left = Math.min(x, base);\n        right = Math.max(x, base);\n        top = y - half;\n        bottom = y + half;\n    } else {\n        half = width / 2;\n        left = x - half;\n        right = x + half;\n        top = Math.min(y, base);\n        bottom = Math.max(y, base);\n    }\n    return {\n        left,\n        top,\n        right,\n        bottom\n    };\n}\nfunction skipOrLimit(skip, value, min, max) {\n    return skip ? 0 : _limitValue(value, min, max);\n}\nfunction parseBorderWidth(bar, maxW, maxH) {\n    const value = bar.options.borderWidth;\n    const skip = bar.borderSkipped;\n    const o = toTRBL(value);\n    return {\n        t: skipOrLimit(skip.top, o.top, 0, maxH),\n        r: skipOrLimit(skip.right, o.right, 0, maxW),\n        b: skipOrLimit(skip.bottom, o.bottom, 0, maxH),\n        l: skipOrLimit(skip.left, o.left, 0, maxW)\n    };\n}\nfunction parseBorderRadius(bar, maxW, maxH) {\n    const { enableBorderRadius  } = bar.getProps([\n        'enableBorderRadius'\n    ]);\n    const value = bar.options.borderRadius;\n    const o = toTRBLCorners(value);\n    const maxR = Math.min(maxW, maxH);\n    const skip = bar.borderSkipped;\n    const enableBorder = enableBorderRadius || isObject(value);\n    return {\n        topLeft: skipOrLimit(!enableBorder || skip.top || skip.left, o.topLeft, 0, maxR),\n        topRight: skipOrLimit(!enableBorder || skip.top || skip.right, o.topRight, 0, maxR),\n        bottomLeft: skipOrLimit(!enableBorder || skip.bottom || skip.left, o.bottomLeft, 0, maxR),\n        bottomRight: skipOrLimit(!enableBorder || skip.bottom || skip.right, o.bottomRight, 0, maxR)\n    };\n}\nfunction boundingRects(bar) {\n    const bounds = getBarBounds(bar);\n    const width = bounds.right - bounds.left;\n    const height = bounds.bottom - bounds.top;\n    const border = parseBorderWidth(bar, width / 2, height / 2);\n    const radius = parseBorderRadius(bar, width / 2, height / 2);\n    return {\n        outer: {\n            x: bounds.left,\n            y: bounds.top,\n            w: width,\n            h: height,\n            radius\n        },\n        inner: {\n            x: bounds.left + border.l,\n            y: bounds.top + border.t,\n            w: width - border.l - border.r,\n            h: height - border.t - border.b,\n            radius: {\n                topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),\n                topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),\n                bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),\n                bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r))\n            }\n        }\n    };\n}\nfunction inRange(bar, x, y, useFinalPosition) {\n    const skipX = x === null;\n    const skipY = y === null;\n    const skipBoth = skipX && skipY;\n    const bounds = bar && !skipBoth && getBarBounds(bar, useFinalPosition);\n    return bounds && (skipX || _isBetween(x, bounds.left, bounds.right)) && (skipY || _isBetween(y, bounds.top, bounds.bottom));\n}\nfunction hasRadius(radius) {\n    return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;\n}\n function addNormalRectPath(ctx, rect) {\n    ctx.rect(rect.x, rect.y, rect.w, rect.h);\n}\nfunction inflateRect(rect, amount, refRect = {}) {\n    const x = rect.x !== refRect.x ? -amount : 0;\n    const y = rect.y !== refRect.y ? -amount : 0;\n    const w = (rect.x + rect.w !== refRect.x + refRect.w ? amount : 0) - x;\n    const h = (rect.y + rect.h !== refRect.y + refRect.h ? amount : 0) - y;\n    return {\n        x: rect.x + x,\n        y: rect.y + y,\n        w: rect.w + w,\n        h: rect.h + h,\n        radius: rect.radius\n    };\n}\nclass BarElement extends Element {\n    static id = 'bar';\n static defaults = {\n        borderSkipped: 'start',\n        borderWidth: 0,\n        borderRadius: 0,\n        inflateAmount: 'auto',\n        pointStyle: undefined\n    };\n static defaultRoutes = {\n        backgroundColor: 'backgroundColor',\n        borderColor: 'borderColor'\n    };\n    constructor(cfg){\n        super();\n        this.options = undefined;\n        this.horizontal = undefined;\n        this.base = undefined;\n        this.width = undefined;\n        this.height = undefined;\n        this.inflateAmount = undefined;\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n    draw(ctx) {\n        const { inflateAmount , options: { borderColor , backgroundColor  }  } = this;\n        const { inner , outer  } = boundingRects(this);\n        const addRectPath = hasRadius(outer.radius) ? addRoundedRectPath : addNormalRectPath;\n        ctx.save();\n        if (outer.w !== inner.w || outer.h !== inner.h) {\n            ctx.beginPath();\n            addRectPath(ctx, inflateRect(outer, inflateAmount, inner));\n            ctx.clip();\n            addRectPath(ctx, inflateRect(inner, -inflateAmount, outer));\n            ctx.fillStyle = borderColor;\n            ctx.fill('evenodd');\n        }\n        ctx.beginPath();\n        addRectPath(ctx, inflateRect(inner, inflateAmount));\n        ctx.fillStyle = backgroundColor;\n        ctx.fill();\n        ctx.restore();\n    }\n    inRange(mouseX, mouseY, useFinalPosition) {\n        return inRange(this, mouseX, mouseY, useFinalPosition);\n    }\n    inXRange(mouseX, useFinalPosition) {\n        return inRange(this, mouseX, null, useFinalPosition);\n    }\n    inYRange(mouseY, useFinalPosition) {\n        return inRange(this, null, mouseY, useFinalPosition);\n    }\n    getCenterPoint(useFinalPosition) {\n        const { x , y , base , horizontal  } =  this.getProps([\n            'x',\n            'y',\n            'base',\n            'horizontal'\n        ], useFinalPosition);\n        return {\n            x: horizontal ? (x + base) / 2 : x,\n            y: horizontal ? y : (y + base) / 2\n        };\n    }\n    getRange(axis) {\n        return axis === 'x' ? this.width / 2 : this.height / 2;\n    }\n}\n\nvar elements = /*#__PURE__*/Object.freeze({\n__proto__: null,\nArcElement: ArcElement,\nBarElement: BarElement,\nLineElement: LineElement,\nPointElement: PointElement\n});\n\nconst BORDER_COLORS = [\n    'rgb(54, 162, 235)',\n    'rgb(255, 99, 132)',\n    'rgb(255, 159, 64)',\n    'rgb(255, 205, 86)',\n    'rgb(75, 192, 192)',\n    'rgb(153, 102, 255)',\n    'rgb(201, 203, 207)' // grey\n];\n// Border colors with 50% transparency\nconst BACKGROUND_COLORS = /* #__PURE__ */ BORDER_COLORS.map((color)=>color.replace('rgb(', 'rgba(').replace(')', ', 0.5)'));\nfunction getBorderColor(i) {\n    return BORDER_COLORS[i % BORDER_COLORS.length];\n}\nfunction getBackgroundColor(i) {\n    return BACKGROUND_COLORS[i % BACKGROUND_COLORS.length];\n}\nfunction colorizeDefaultDataset(dataset, i) {\n    dataset.borderColor = getBorderColor(i);\n    dataset.backgroundColor = getBackgroundColor(i);\n    return ++i;\n}\nfunction colorizeDoughnutDataset(dataset, i) {\n    dataset.backgroundColor = dataset.data.map(()=>getBorderColor(i++));\n    return i;\n}\nfunction colorizePolarAreaDataset(dataset, i) {\n    dataset.backgroundColor = dataset.data.map(()=>getBackgroundColor(i++));\n    return i;\n}\nfunction getColorizer(chart) {\n    let i = 0;\n    return (dataset, datasetIndex)=>{\n        const controller = chart.getDatasetMeta(datasetIndex).controller;\n        if (controller instanceof DoughnutController) {\n            i = colorizeDoughnutDataset(dataset, i);\n        } else if (controller instanceof PolarAreaController) {\n            i = colorizePolarAreaDataset(dataset, i);\n        } else if (controller) {\n            i = colorizeDefaultDataset(dataset, i);\n        }\n    };\n}\nfunction containsColorsDefinitions(descriptors) {\n    let k;\n    for(k in descriptors){\n        if (descriptors[k].borderColor || descriptors[k].backgroundColor) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction containsColorsDefinition(descriptor) {\n    return descriptor && (descriptor.borderColor || descriptor.backgroundColor);\n}\nvar plugin_colors = {\n    id: 'colors',\n    defaults: {\n        enabled: true,\n        forceOverride: false\n    },\n    beforeLayout (chart, _args, options) {\n        if (!options.enabled) {\n            return;\n        }\n        const { data: { datasets  } , options: chartOptions  } = chart.config;\n        const { elements  } = chartOptions;\n        if (!options.forceOverride && (containsColorsDefinitions(datasets) || containsColorsDefinition(chartOptions) || elements && containsColorsDefinitions(elements))) {\n            return;\n        }\n        const colorizer = getColorizer(chart);\n        datasets.forEach(colorizer);\n    }\n};\n\nfunction lttbDecimation(data, start, count, availableWidth, options) {\n const samples = options.samples || availableWidth;\n    if (samples >= count) {\n        return data.slice(start, start + count);\n    }\n    const decimated = [];\n    const bucketWidth = (count - 2) / (samples - 2);\n    let sampledIndex = 0;\n    const endIndex = start + count - 1;\n    let a = start;\n    let i, maxAreaPoint, maxArea, area, nextA;\n    decimated[sampledIndex++] = data[a];\n    for(i = 0; i < samples - 2; i++){\n        let avgX = 0;\n        let avgY = 0;\n        let j;\n        const avgRangeStart = Math.floor((i + 1) * bucketWidth) + 1 + start;\n        const avgRangeEnd = Math.min(Math.floor((i + 2) * bucketWidth) + 1, count) + start;\n        const avgRangeLength = avgRangeEnd - avgRangeStart;\n        for(j = avgRangeStart; j < avgRangeEnd; j++){\n            avgX += data[j].x;\n            avgY += data[j].y;\n        }\n        avgX /= avgRangeLength;\n        avgY /= avgRangeLength;\n        const rangeOffs = Math.floor(i * bucketWidth) + 1 + start;\n        const rangeTo = Math.min(Math.floor((i + 1) * bucketWidth) + 1, count) + start;\n        const { x: pointAx , y: pointAy  } = data[a];\n        maxArea = area = -1;\n        for(j = rangeOffs; j < rangeTo; j++){\n            area = 0.5 * Math.abs((pointAx - avgX) * (data[j].y - pointAy) - (pointAx - data[j].x) * (avgY - pointAy));\n            if (area > maxArea) {\n                maxArea = area;\n                maxAreaPoint = data[j];\n                nextA = j;\n            }\n        }\n        decimated[sampledIndex++] = maxAreaPoint;\n        a = nextA;\n    }\n    decimated[sampledIndex++] = data[endIndex];\n    return decimated;\n}\nfunction minMaxDecimation(data, start, count, availableWidth) {\n    let avgX = 0;\n    let countX = 0;\n    let i, point, x, y, prevX, minIndex, maxIndex, startIndex, minY, maxY;\n    const decimated = [];\n    const endIndex = start + count - 1;\n    const xMin = data[start].x;\n    const xMax = data[endIndex].x;\n    const dx = xMax - xMin;\n    for(i = start; i < start + count; ++i){\n        point = data[i];\n        x = (point.x - xMin) / dx * availableWidth;\n        y = point.y;\n        const truncX = x | 0;\n        if (truncX === prevX) {\n            if (y < minY) {\n                minY = y;\n                minIndex = i;\n            } else if (y > maxY) {\n                maxY = y;\n                maxIndex = i;\n            }\n            avgX = (countX * avgX + point.x) / ++countX;\n        } else {\n            const lastIndex = i - 1;\n            if (!isNullOrUndef(minIndex) && !isNullOrUndef(maxIndex)) {\n                const intermediateIndex1 = Math.min(minIndex, maxIndex);\n                const intermediateIndex2 = Math.max(minIndex, maxIndex);\n                if (intermediateIndex1 !== startIndex && intermediateIndex1 !== lastIndex) {\n                    decimated.push({\n                        ...data[intermediateIndex1],\n                        x: avgX\n                    });\n                }\n                if (intermediateIndex2 !== startIndex && intermediateIndex2 !== lastIndex) {\n                    decimated.push({\n                        ...data[intermediateIndex2],\n                        x: avgX\n                    });\n                }\n            }\n            if (i > 0 && lastIndex !== startIndex) {\n                decimated.push(data[lastIndex]);\n            }\n            decimated.push(point);\n            prevX = truncX;\n            countX = 0;\n            minY = maxY = y;\n            minIndex = maxIndex = startIndex = i;\n        }\n    }\n    return decimated;\n}\nfunction cleanDecimatedDataset(dataset) {\n    if (dataset._decimated) {\n        const data = dataset._data;\n        delete dataset._decimated;\n        delete dataset._data;\n        Object.defineProperty(dataset, 'data', {\n            configurable: true,\n            enumerable: true,\n            writable: true,\n            value: data\n        });\n    }\n}\nfunction cleanDecimatedData(chart) {\n    chart.data.datasets.forEach((dataset)=>{\n        cleanDecimatedDataset(dataset);\n    });\n}\nfunction getStartAndCountOfVisiblePointsSimplified(meta, points) {\n    const pointCount = points.length;\n    let start = 0;\n    let count;\n    const { iScale  } = meta;\n    const { min , max , minDefined , maxDefined  } = iScale.getUserBounds();\n    if (minDefined) {\n        start = _limitValue(_lookupByKey(points, iScale.axis, min).lo, 0, pointCount - 1);\n    }\n    if (maxDefined) {\n        count = _limitValue(_lookupByKey(points, iScale.axis, max).hi + 1, start, pointCount) - start;\n    } else {\n        count = pointCount - start;\n    }\n    return {\n        start,\n        count\n    };\n}\nvar plugin_decimation = {\n    id: 'decimation',\n    defaults: {\n        algorithm: 'min-max',\n        enabled: false\n    },\n    beforeElementsUpdate: (chart, args, options)=>{\n        if (!options.enabled) {\n            cleanDecimatedData(chart);\n            return;\n        }\n        const availableWidth = chart.width;\n        chart.data.datasets.forEach((dataset, datasetIndex)=>{\n            const { _data , indexAxis  } = dataset;\n            const meta = chart.getDatasetMeta(datasetIndex);\n            const data = _data || dataset.data;\n            if (resolve([\n                indexAxis,\n                chart.options.indexAxis\n            ]) === 'y') {\n                return;\n            }\n            if (!meta.controller.supportsDecimation) {\n                return;\n            }\n            const xAxis = chart.scales[meta.xAxisID];\n            if (xAxis.type !== 'linear' && xAxis.type !== 'time') {\n                return;\n            }\n            if (chart.options.parsing) {\n                return;\n            }\n            let { start , count  } = getStartAndCountOfVisiblePointsSimplified(meta, data);\n            const threshold = options.threshold || 4 * availableWidth;\n            if (count <= threshold) {\n                cleanDecimatedDataset(dataset);\n                return;\n            }\n            if (isNullOrUndef(_data)) {\n                dataset._data = data;\n                delete dataset.data;\n                Object.defineProperty(dataset, 'data', {\n                    configurable: true,\n                    enumerable: true,\n                    get: function() {\n                        return this._decimated;\n                    },\n                    set: function(d) {\n                        this._data = d;\n                    }\n                });\n            }\n            let decimated;\n            switch(options.algorithm){\n                case 'lttb':\n                    decimated = lttbDecimation(data, start, count, availableWidth, options);\n                    break;\n                case 'min-max':\n                    decimated = minMaxDecimation(data, start, count, availableWidth);\n                    break;\n                default:\n                    throw new Error(`Unsupported decimation algorithm '${options.algorithm}'`);\n            }\n            dataset._decimated = decimated;\n        });\n    },\n    destroy (chart) {\n        cleanDecimatedData(chart);\n    }\n};\n\nfunction _segments(line, target, property) {\n    const segments = line.segments;\n    const points = line.points;\n    const tpoints = target.points;\n    const parts = [];\n    for (const segment of segments){\n        let { start , end  } = segment;\n        end = _findSegmentEnd(start, end, points);\n        const bounds = _getBounds(property, points[start], points[end], segment.loop);\n        if (!target.segments) {\n            parts.push({\n                source: segment,\n                target: bounds,\n                start: points[start],\n                end: points[end]\n            });\n            continue;\n        }\n        const targetSegments = _boundSegments(target, bounds);\n        for (const tgt of targetSegments){\n            const subBounds = _getBounds(property, tpoints[tgt.start], tpoints[tgt.end], tgt.loop);\n            const fillSources = _boundSegment(segment, points, subBounds);\n            for (const fillSource of fillSources){\n                parts.push({\n                    source: fillSource,\n                    target: tgt,\n                    start: {\n                        [property]: _getEdge(bounds, subBounds, 'start', Math.max)\n                    },\n                    end: {\n                        [property]: _getEdge(bounds, subBounds, 'end', Math.min)\n                    }\n                });\n            }\n        }\n    }\n    return parts;\n}\nfunction _getBounds(property, first, last, loop) {\n    if (loop) {\n        return;\n    }\n    let start = first[property];\n    let end = last[property];\n    if (property === 'angle') {\n        start = _normalizeAngle(start);\n        end = _normalizeAngle(end);\n    }\n    return {\n        property,\n        start,\n        end\n    };\n}\nfunction _pointsFromSegments(boundary, line) {\n    const { x =null , y =null  } = boundary || {};\n    const linePoints = line.points;\n    const points = [];\n    line.segments.forEach(({ start , end  })=>{\n        end = _findSegmentEnd(start, end, linePoints);\n        const first = linePoints[start];\n        const last = linePoints[end];\n        if (y !== null) {\n            points.push({\n                x: first.x,\n                y\n            });\n            points.push({\n                x: last.x,\n                y\n            });\n        } else if (x !== null) {\n            points.push({\n                x,\n                y: first.y\n            });\n            points.push({\n                x,\n                y: last.y\n            });\n        }\n    });\n    return points;\n}\nfunction _findSegmentEnd(start, end, points) {\n    for(; end > start; end--){\n        const point = points[end];\n        if (!isNaN(point.x) && !isNaN(point.y)) {\n            break;\n        }\n    }\n    return end;\n}\nfunction _getEdge(a, b, prop, fn) {\n    if (a && b) {\n        return fn(a[prop], b[prop]);\n    }\n    return a ? a[prop] : b ? b[prop] : 0;\n}\n\nfunction _createBoundaryLine(boundary, line) {\n    let points = [];\n    let _loop = false;\n    if (isArray(boundary)) {\n        _loop = true;\n        points = boundary;\n    } else {\n        points = _pointsFromSegments(boundary, line);\n    }\n    return points.length ? new LineElement({\n        points,\n        options: {\n            tension: 0\n        },\n        _loop,\n        _fullLoop: _loop\n    }) : null;\n}\nfunction _shouldApplyFill(source) {\n    return source && source.fill !== false;\n}\n\nfunction _resolveTarget(sources, index, propagate) {\n    const source = sources[index];\n    let fill = source.fill;\n    const visited = [\n        index\n    ];\n    let target;\n    if (!propagate) {\n        return fill;\n    }\n    while(fill !== false && visited.indexOf(fill) === -1){\n        if (!isNumberFinite(fill)) {\n            return fill;\n        }\n        target = sources[fill];\n        if (!target) {\n            return false;\n        }\n        if (target.visible) {\n            return fill;\n        }\n        visited.push(fill);\n        fill = target.fill;\n    }\n    return false;\n}\n function _decodeFill(line, index, count) {\n     const fill = parseFillOption(line);\n    if (isObject(fill)) {\n        return isNaN(fill.value) ? false : fill;\n    }\n    let target = parseFloat(fill);\n    if (isNumberFinite(target) && Math.floor(target) === target) {\n        return decodeTargetIndex(fill[0], index, target, count);\n    }\n    return [\n        'origin',\n        'start',\n        'end',\n        'stack',\n        'shape'\n    ].indexOf(fill) >= 0 && fill;\n}\nfunction decodeTargetIndex(firstCh, index, target, count) {\n    if (firstCh === '-' || firstCh === '+') {\n        target = index + target;\n    }\n    if (target === index || target < 0 || target >= count) {\n        return false;\n    }\n    return target;\n}\n function _getTargetPixel(fill, scale) {\n    let pixel = null;\n    if (fill === 'start') {\n        pixel = scale.bottom;\n    } else if (fill === 'end') {\n        pixel = scale.top;\n    } else if (isObject(fill)) {\n        pixel = scale.getPixelForValue(fill.value);\n    } else if (scale.getBasePixel) {\n        pixel = scale.getBasePixel();\n    }\n    return pixel;\n}\n function _getTargetValue(fill, scale, startValue) {\n    let value;\n    if (fill === 'start') {\n        value = startValue;\n    } else if (fill === 'end') {\n        value = scale.options.reverse ? scale.min : scale.max;\n    } else if (isObject(fill)) {\n        value = fill.value;\n    } else {\n        value = scale.getBaseValue();\n    }\n    return value;\n}\n function parseFillOption(line) {\n    const options = line.options;\n    const fillOption = options.fill;\n    let fill = valueOrDefault(fillOption && fillOption.target, fillOption);\n    if (fill === undefined) {\n        fill = !!options.backgroundColor;\n    }\n    if (fill === false || fill === null) {\n        return false;\n    }\n    if (fill === true) {\n        return 'origin';\n    }\n    return fill;\n}\n\nfunction _buildStackLine(source) {\n    const { scale , index , line  } = source;\n    const points = [];\n    const segments = line.segments;\n    const sourcePoints = line.points;\n    const linesBelow = getLinesBelow(scale, index);\n    linesBelow.push(_createBoundaryLine({\n        x: null,\n        y: scale.bottom\n    }, line));\n    for(let i = 0; i < segments.length; i++){\n        const segment = segments[i];\n        for(let j = segment.start; j <= segment.end; j++){\n            addPointsBelow(points, sourcePoints[j], linesBelow);\n        }\n    }\n    return new LineElement({\n        points,\n        options: {}\n    });\n}\n function getLinesBelow(scale, index) {\n    const below = [];\n    const metas = scale.getMatchingVisibleMetas('line');\n    for(let i = 0; i < metas.length; i++){\n        const meta = metas[i];\n        if (meta.index === index) {\n            break;\n        }\n        if (!meta.hidden) {\n            below.unshift(meta.dataset);\n        }\n    }\n    return below;\n}\n function addPointsBelow(points, sourcePoint, linesBelow) {\n    const postponed = [];\n    for(let j = 0; j < linesBelow.length; j++){\n        const line = linesBelow[j];\n        const { first , last , point  } = findPoint(line, sourcePoint, 'x');\n        if (!point || first && last) {\n            continue;\n        }\n        if (first) {\n            postponed.unshift(point);\n        } else {\n            points.push(point);\n            if (!last) {\n                break;\n            }\n        }\n    }\n    points.push(...postponed);\n}\n function findPoint(line, sourcePoint, property) {\n    const point = line.interpolate(sourcePoint, property);\n    if (!point) {\n        return {};\n    }\n    const pointValue = point[property];\n    const segments = line.segments;\n    const linePoints = line.points;\n    let first = false;\n    let last = false;\n    for(let i = 0; i < segments.length; i++){\n        const segment = segments[i];\n        const firstValue = linePoints[segment.start][property];\n        const lastValue = linePoints[segment.end][property];\n        if (_isBetween(pointValue, firstValue, lastValue)) {\n            first = pointValue === firstValue;\n            last = pointValue === lastValue;\n            break;\n        }\n    }\n    return {\n        first,\n        last,\n        point\n    };\n}\n\nclass simpleArc {\n    constructor(opts){\n        this.x = opts.x;\n        this.y = opts.y;\n        this.radius = opts.radius;\n    }\n    pathSegment(ctx, bounds, opts) {\n        const { x , y , radius  } = this;\n        bounds = bounds || {\n            start: 0,\n            end: TAU\n        };\n        ctx.arc(x, y, radius, bounds.end, bounds.start, true);\n        return !opts.bounds;\n    }\n    interpolate(point) {\n        const { x , y , radius  } = this;\n        const angle = point.angle;\n        return {\n            x: x + Math.cos(angle) * radius,\n            y: y + Math.sin(angle) * radius,\n            angle\n        };\n    }\n}\n\nfunction _getTarget(source) {\n    const { chart , fill , line  } = source;\n    if (isNumberFinite(fill)) {\n        return getLineByIndex(chart, fill);\n    }\n    if (fill === 'stack') {\n        return _buildStackLine(source);\n    }\n    if (fill === 'shape') {\n        return true;\n    }\n    const boundary = computeBoundary(source);\n    if (boundary instanceof simpleArc) {\n        return boundary;\n    }\n    return _createBoundaryLine(boundary, line);\n}\n function getLineByIndex(chart, index) {\n    const meta = chart.getDatasetMeta(index);\n    const visible = meta && chart.isDatasetVisible(index);\n    return visible ? meta.dataset : null;\n}\nfunction computeBoundary(source) {\n    const scale = source.scale || {};\n    if (scale.getPointPositionForValue) {\n        return computeCircularBoundary(source);\n    }\n    return computeLinearBoundary(source);\n}\nfunction computeLinearBoundary(source) {\n    const { scale ={} , fill  } = source;\n    const pixel = _getTargetPixel(fill, scale);\n    if (isNumberFinite(pixel)) {\n        const horizontal = scale.isHorizontal();\n        return {\n            x: horizontal ? pixel : null,\n            y: horizontal ? null : pixel\n        };\n    }\n    return null;\n}\nfunction computeCircularBoundary(source) {\n    const { scale , fill  } = source;\n    const options = scale.options;\n    const length = scale.getLabels().length;\n    const start = options.reverse ? scale.max : scale.min;\n    const value = _getTargetValue(fill, scale, start);\n    const target = [];\n    if (options.grid.circular) {\n        const center = scale.getPointPositionForValue(0, start);\n        return new simpleArc({\n            x: center.x,\n            y: center.y,\n            radius: scale.getDistanceFromCenterForValue(value)\n        });\n    }\n    for(let i = 0; i < length; ++i){\n        target.push(scale.getPointPositionForValue(i, value));\n    }\n    return target;\n}\n\nfunction _drawfill(ctx, source, area) {\n    const target = _getTarget(source);\n    const { line , scale , axis  } = source;\n    const lineOpts = line.options;\n    const fillOption = lineOpts.fill;\n    const color = lineOpts.backgroundColor;\n    const { above =color , below =color  } = fillOption || {};\n    if (target && line.points.length) {\n        clipArea(ctx, area);\n        doFill(ctx, {\n            line,\n            target,\n            above,\n            below,\n            area,\n            scale,\n            axis\n        });\n        unclipArea(ctx);\n    }\n}\nfunction doFill(ctx, cfg) {\n    const { line , target , above , below , area , scale  } = cfg;\n    const property = line._loop ? 'angle' : cfg.axis;\n    ctx.save();\n    if (property === 'x' && below !== above) {\n        clipVertical(ctx, target, area.top);\n        fill(ctx, {\n            line,\n            target,\n            color: above,\n            scale,\n            property\n        });\n        ctx.restore();\n        ctx.save();\n        clipVertical(ctx, target, area.bottom);\n    }\n    fill(ctx, {\n        line,\n        target,\n        color: below,\n        scale,\n        property\n    });\n    ctx.restore();\n}\nfunction clipVertical(ctx, target, clipY) {\n    const { segments , points  } = target;\n    let first = true;\n    let lineLoop = false;\n    ctx.beginPath();\n    for (const segment of segments){\n        const { start , end  } = segment;\n        const firstPoint = points[start];\n        const lastPoint = points[_findSegmentEnd(start, end, points)];\n        if (first) {\n            ctx.moveTo(firstPoint.x, firstPoint.y);\n            first = false;\n        } else {\n            ctx.lineTo(firstPoint.x, clipY);\n            ctx.lineTo(firstPoint.x, firstPoint.y);\n        }\n        lineLoop = !!target.pathSegment(ctx, segment, {\n            move: lineLoop\n        });\n        if (lineLoop) {\n            ctx.closePath();\n        } else {\n            ctx.lineTo(lastPoint.x, clipY);\n        }\n    }\n    ctx.lineTo(target.first().x, clipY);\n    ctx.closePath();\n    ctx.clip();\n}\nfunction fill(ctx, cfg) {\n    const { line , target , property , color , scale  } = cfg;\n    const segments = _segments(line, target, property);\n    for (const { source: src , target: tgt , start , end  } of segments){\n        const { style: { backgroundColor =color  } = {}  } = src;\n        const notShape = target !== true;\n        ctx.save();\n        ctx.fillStyle = backgroundColor;\n        clipBounds(ctx, scale, notShape && _getBounds(property, start, end));\n        ctx.beginPath();\n        const lineLoop = !!line.pathSegment(ctx, src);\n        let loop;\n        if (notShape) {\n            if (lineLoop) {\n                ctx.closePath();\n            } else {\n                interpolatedLineTo(ctx, target, end, property);\n            }\n            const targetLoop = !!target.pathSegment(ctx, tgt, {\n                move: lineLoop,\n                reverse: true\n            });\n            loop = lineLoop && targetLoop;\n            if (!loop) {\n                interpolatedLineTo(ctx, target, start, property);\n            }\n        }\n        ctx.closePath();\n        ctx.fill(loop ? 'evenodd' : 'nonzero');\n        ctx.restore();\n    }\n}\nfunction clipBounds(ctx, scale, bounds) {\n    const { top , bottom  } = scale.chart.chartArea;\n    const { property , start , end  } = bounds || {};\n    if (property === 'x') {\n        ctx.beginPath();\n        ctx.rect(start, top, end - start, bottom - top);\n        ctx.clip();\n    }\n}\nfunction interpolatedLineTo(ctx, target, point, property) {\n    const interpolatedPoint = target.interpolate(point, property);\n    if (interpolatedPoint) {\n        ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);\n    }\n}\n\nvar index = {\n    id: 'filler',\n    afterDatasetsUpdate (chart, _args, options) {\n        const count = (chart.data.datasets || []).length;\n        const sources = [];\n        let meta, i, line, source;\n        for(i = 0; i < count; ++i){\n            meta = chart.getDatasetMeta(i);\n            line = meta.dataset;\n            source = null;\n            if (line && line.options && line instanceof LineElement) {\n                source = {\n                    visible: chart.isDatasetVisible(i),\n                    index: i,\n                    fill: _decodeFill(line, i, count),\n                    chart,\n                    axis: meta.controller.options.indexAxis,\n                    scale: meta.vScale,\n                    line\n                };\n            }\n            meta.$filler = source;\n            sources.push(source);\n        }\n        for(i = 0; i < count; ++i){\n            source = sources[i];\n            if (!source || source.fill === false) {\n                continue;\n            }\n            source.fill = _resolveTarget(sources, i, options.propagate);\n        }\n    },\n    beforeDraw (chart, _args, options) {\n        const draw = options.drawTime === 'beforeDraw';\n        const metasets = chart.getSortedVisibleDatasetMetas();\n        const area = chart.chartArea;\n        for(let i = metasets.length - 1; i >= 0; --i){\n            const source = metasets[i].$filler;\n            if (!source) {\n                continue;\n            }\n            source.line.updateControlPoints(area, source.axis);\n            if (draw && source.fill) {\n                _drawfill(chart.ctx, source, area);\n            }\n        }\n    },\n    beforeDatasetsDraw (chart, _args, options) {\n        if (options.drawTime !== 'beforeDatasetsDraw') {\n            return;\n        }\n        const metasets = chart.getSortedVisibleDatasetMetas();\n        for(let i = metasets.length - 1; i >= 0; --i){\n            const source = metasets[i].$filler;\n            if (_shouldApplyFill(source)) {\n                _drawfill(chart.ctx, source, chart.chartArea);\n            }\n        }\n    },\n    beforeDatasetDraw (chart, args, options) {\n        const source = args.meta.$filler;\n        if (!_shouldApplyFill(source) || options.drawTime !== 'beforeDatasetDraw') {\n            return;\n        }\n        _drawfill(chart.ctx, source, chart.chartArea);\n    },\n    defaults: {\n        propagate: true,\n        drawTime: 'beforeDatasetDraw'\n    }\n};\n\nconst getBoxSize = (labelOpts, fontSize)=>{\n    let { boxHeight =fontSize , boxWidth =fontSize  } = labelOpts;\n    if (labelOpts.usePointStyle) {\n        boxHeight = Math.min(boxHeight, fontSize);\n        boxWidth = labelOpts.pointStyleWidth || Math.min(boxWidth, fontSize);\n    }\n    return {\n        boxWidth,\n        boxHeight,\n        itemHeight: Math.max(fontSize, boxHeight)\n    };\n};\nconst itemsEqual = (a, b)=>a !== null && b !== null && a.datasetIndex === b.datasetIndex && a.index === b.index;\nclass Legend extends Element {\n constructor(config){\n        super();\n        this._added = false;\n        this.legendHitBoxes = [];\n this._hoveredItem = null;\n        this.doughnutMode = false;\n        this.chart = config.chart;\n        this.options = config.options;\n        this.ctx = config.ctx;\n        this.legendItems = undefined;\n        this.columnSizes = undefined;\n        this.lineWidths = undefined;\n        this.maxHeight = undefined;\n        this.maxWidth = undefined;\n        this.top = undefined;\n        this.bottom = undefined;\n        this.left = undefined;\n        this.right = undefined;\n        this.height = undefined;\n        this.width = undefined;\n        this._margins = undefined;\n        this.position = undefined;\n        this.weight = undefined;\n        this.fullSize = undefined;\n    }\n    update(maxWidth, maxHeight, margins) {\n        this.maxWidth = maxWidth;\n        this.maxHeight = maxHeight;\n        this._margins = margins;\n        this.setDimensions();\n        this.buildLabels();\n        this.fit();\n    }\n    setDimensions() {\n        if (this.isHorizontal()) {\n            this.width = this.maxWidth;\n            this.left = this._margins.left;\n            this.right = this.width;\n        } else {\n            this.height = this.maxHeight;\n            this.top = this._margins.top;\n            this.bottom = this.height;\n        }\n    }\n    buildLabels() {\n        const labelOpts = this.options.labels || {};\n        let legendItems = callback(labelOpts.generateLabels, [\n            this.chart\n        ], this) || [];\n        if (labelOpts.filter) {\n            legendItems = legendItems.filter((item)=>labelOpts.filter(item, this.chart.data));\n        }\n        if (labelOpts.sort) {\n            legendItems = legendItems.sort((a, b)=>labelOpts.sort(a, b, this.chart.data));\n        }\n        if (this.options.reverse) {\n            legendItems.reverse();\n        }\n        this.legendItems = legendItems;\n    }\n    fit() {\n        const { options , ctx  } = this;\n        if (!options.display) {\n            this.width = this.height = 0;\n            return;\n        }\n        const labelOpts = options.labels;\n        const labelFont = toFont(labelOpts.font);\n        const fontSize = labelFont.size;\n        const titleHeight = this._computeTitleHeight();\n        const { boxWidth , itemHeight  } = getBoxSize(labelOpts, fontSize);\n        let width, height;\n        ctx.font = labelFont.string;\n        if (this.isHorizontal()) {\n            width = this.maxWidth;\n            height = this._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;\n        } else {\n            height = this.maxHeight;\n            width = this._fitCols(titleHeight, labelFont, boxWidth, itemHeight) + 10;\n        }\n        this.width = Math.min(width, options.maxWidth || this.maxWidth);\n        this.height = Math.min(height, options.maxHeight || this.maxHeight);\n    }\n _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {\n        const { ctx , maxWidth , options: { labels: { padding  }  }  } = this;\n        const hitboxes = this.legendHitBoxes = [];\n        const lineWidths = this.lineWidths = [\n            0\n        ];\n        const lineHeight = itemHeight + padding;\n        let totalHeight = titleHeight;\n        ctx.textAlign = 'left';\n        ctx.textBaseline = 'middle';\n        let row = -1;\n        let top = -lineHeight;\n        this.legendItems.forEach((legendItem, i)=>{\n            const itemWidth = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width;\n            if (i === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {\n                totalHeight += lineHeight;\n                lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;\n                top += lineHeight;\n                row++;\n            }\n            hitboxes[i] = {\n                left: 0,\n                top,\n                row,\n                width: itemWidth,\n                height: itemHeight\n            };\n            lineWidths[lineWidths.length - 1] += itemWidth + padding;\n        });\n        return totalHeight;\n    }\n    _fitCols(titleHeight, labelFont, boxWidth, _itemHeight) {\n        const { ctx , maxHeight , options: { labels: { padding  }  }  } = this;\n        const hitboxes = this.legendHitBoxes = [];\n        const columnSizes = this.columnSizes = [];\n        const heightLimit = maxHeight - titleHeight;\n        let totalWidth = padding;\n        let currentColWidth = 0;\n        let currentColHeight = 0;\n        let left = 0;\n        let col = 0;\n        this.legendItems.forEach((legendItem, i)=>{\n            const { itemWidth , itemHeight  } = calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight);\n            if (i > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {\n                totalWidth += currentColWidth + padding;\n                columnSizes.push({\n                    width: currentColWidth,\n                    height: currentColHeight\n                });\n                left += currentColWidth + padding;\n                col++;\n                currentColWidth = currentColHeight = 0;\n            }\n            hitboxes[i] = {\n                left,\n                top: currentColHeight,\n                col,\n                width: itemWidth,\n                height: itemHeight\n            };\n            currentColWidth = Math.max(currentColWidth, itemWidth);\n            currentColHeight += itemHeight + padding;\n        });\n        totalWidth += currentColWidth;\n        columnSizes.push({\n            width: currentColWidth,\n            height: currentColHeight\n        });\n        return totalWidth;\n    }\n    adjustHitBoxes() {\n        if (!this.options.display) {\n            return;\n        }\n        const titleHeight = this._computeTitleHeight();\n        const { legendHitBoxes: hitboxes , options: { align , labels: { padding  } , rtl  }  } = this;\n        const rtlHelper = getRtlAdapter(rtl, this.left, this.width);\n        if (this.isHorizontal()) {\n            let row = 0;\n            let left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n            for (const hitbox of hitboxes){\n                if (row !== hitbox.row) {\n                    row = hitbox.row;\n                    left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n                }\n                hitbox.top += this.top + titleHeight + padding;\n                hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);\n                left += hitbox.width + padding;\n            }\n        } else {\n            let col = 0;\n            let top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n            for (const hitbox of hitboxes){\n                if (hitbox.col !== col) {\n                    col = hitbox.col;\n                    top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n                }\n                hitbox.top = top;\n                hitbox.left += this.left + padding;\n                hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(hitbox.left), hitbox.width);\n                top += hitbox.height + padding;\n            }\n        }\n    }\n    isHorizontal() {\n        return this.options.position === 'top' || this.options.position === 'bottom';\n    }\n    draw() {\n        if (this.options.display) {\n            const ctx = this.ctx;\n            clipArea(ctx, this);\n            this._draw();\n            unclipArea(ctx);\n        }\n    }\n _draw() {\n        const { options: opts , columnSizes , lineWidths , ctx  } = this;\n        const { align , labels: labelOpts  } = opts;\n        const defaultColor = defaults.color;\n        const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n        const labelFont = toFont(labelOpts.font);\n        const { padding  } = labelOpts;\n        const fontSize = labelFont.size;\n        const halfFontSize = fontSize / 2;\n        let cursor;\n        this.drawTitle();\n        ctx.textAlign = rtlHelper.textAlign('left');\n        ctx.textBaseline = 'middle';\n        ctx.lineWidth = 0.5;\n        ctx.font = labelFont.string;\n        const { boxWidth , boxHeight , itemHeight  } = getBoxSize(labelOpts, fontSize);\n        const drawLegendBox = function(x, y, legendItem) {\n            if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) {\n                return;\n            }\n            ctx.save();\n            const lineWidth = valueOrDefault(legendItem.lineWidth, 1);\n            ctx.fillStyle = valueOrDefault(legendItem.fillStyle, defaultColor);\n            ctx.lineCap = valueOrDefault(legendItem.lineCap, 'butt');\n            ctx.lineDashOffset = valueOrDefault(legendItem.lineDashOffset, 0);\n            ctx.lineJoin = valueOrDefault(legendItem.lineJoin, 'miter');\n            ctx.lineWidth = lineWidth;\n            ctx.strokeStyle = valueOrDefault(legendItem.strokeStyle, defaultColor);\n            ctx.setLineDash(valueOrDefault(legendItem.lineDash, []));\n            if (labelOpts.usePointStyle) {\n                const drawOptions = {\n                    radius: boxHeight * Math.SQRT2 / 2,\n                    pointStyle: legendItem.pointStyle,\n                    rotation: legendItem.rotation,\n                    borderWidth: lineWidth\n                };\n                const centerX = rtlHelper.xPlus(x, boxWidth / 2);\n                const centerY = y + halfFontSize;\n                drawPointLegend(ctx, drawOptions, centerX, centerY, labelOpts.pointStyleWidth && boxWidth);\n            } else {\n                const yBoxTop = y + Math.max((fontSize - boxHeight) / 2, 0);\n                const xBoxLeft = rtlHelper.leftForLtr(x, boxWidth);\n                const borderRadius = toTRBLCorners(legendItem.borderRadius);\n                ctx.beginPath();\n                if (Object.values(borderRadius).some((v)=>v !== 0)) {\n                    addRoundedRectPath(ctx, {\n                        x: xBoxLeft,\n                        y: yBoxTop,\n                        w: boxWidth,\n                        h: boxHeight,\n                        radius: borderRadius\n                    });\n                } else {\n                    ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);\n                }\n                ctx.fill();\n                if (lineWidth !== 0) {\n                    ctx.stroke();\n                }\n            }\n            ctx.restore();\n        };\n        const fillText = function(x, y, legendItem) {\n            renderText(ctx, legendItem.text, x, y + itemHeight / 2, labelFont, {\n                strikethrough: legendItem.hidden,\n                textAlign: rtlHelper.textAlign(legendItem.textAlign)\n            });\n        };\n        const isHorizontal = this.isHorizontal();\n        const titleHeight = this._computeTitleHeight();\n        if (isHorizontal) {\n            cursor = {\n                x: _alignStartEnd(align, this.left + padding, this.right - lineWidths[0]),\n                y: this.top + padding + titleHeight,\n                line: 0\n            };\n        } else {\n            cursor = {\n                x: this.left + padding,\n                y: _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[0].height),\n                line: 0\n            };\n        }\n        overrideTextDirection(this.ctx, opts.textDirection);\n        const lineHeight = itemHeight + padding;\n        this.legendItems.forEach((legendItem, i)=>{\n            ctx.strokeStyle = legendItem.fontColor;\n            ctx.fillStyle = legendItem.fontColor;\n            const textWidth = ctx.measureText(legendItem.text).width;\n            const textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));\n            const width = boxWidth + halfFontSize + textWidth;\n            let x = cursor.x;\n            let y = cursor.y;\n            rtlHelper.setWidth(this.width);\n            if (isHorizontal) {\n                if (i > 0 && x + width + padding > this.right) {\n                    y = cursor.y += lineHeight;\n                    cursor.line++;\n                    x = cursor.x = _alignStartEnd(align, this.left + padding, this.right - lineWidths[cursor.line]);\n                }\n            } else if (i > 0 && y + lineHeight > this.bottom) {\n                x = cursor.x = x + columnSizes[cursor.line].width + padding;\n                cursor.line++;\n                y = cursor.y = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[cursor.line].height);\n            }\n            const realX = rtlHelper.x(x);\n            drawLegendBox(realX, y, legendItem);\n            x = _textX(textAlign, x + boxWidth + halfFontSize, isHorizontal ? x + width : this.right, opts.rtl);\n            fillText(rtlHelper.x(x), y, legendItem);\n            if (isHorizontal) {\n                cursor.x += width + padding;\n            } else if (typeof legendItem.text !== 'string') {\n                const fontLineHeight = labelFont.lineHeight;\n                cursor.y += calculateLegendItemHeight(legendItem, fontLineHeight) + padding;\n            } else {\n                cursor.y += lineHeight;\n            }\n        });\n        restoreTextDirection(this.ctx, opts.textDirection);\n    }\n drawTitle() {\n        const opts = this.options;\n        const titleOpts = opts.title;\n        const titleFont = toFont(titleOpts.font);\n        const titlePadding = toPadding(titleOpts.padding);\n        if (!titleOpts.display) {\n            return;\n        }\n        const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n        const ctx = this.ctx;\n        const position = titleOpts.position;\n        const halfFontSize = titleFont.size / 2;\n        const topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;\n        let y;\n        let left = this.left;\n        let maxWidth = this.width;\n        if (this.isHorizontal()) {\n            maxWidth = Math.max(...this.lineWidths);\n            y = this.top + topPaddingPlusHalfFontSize;\n            left = _alignStartEnd(opts.align, left, this.right - maxWidth);\n        } else {\n            const maxHeight = this.columnSizes.reduce((acc, size)=>Math.max(acc, size.height), 0);\n            y = topPaddingPlusHalfFontSize + _alignStartEnd(opts.align, this.top, this.bottom - maxHeight - opts.labels.padding - this._computeTitleHeight());\n        }\n        const x = _alignStartEnd(position, left, left + maxWidth);\n        ctx.textAlign = rtlHelper.textAlign(_toLeftRightCenter(position));\n        ctx.textBaseline = 'middle';\n        ctx.strokeStyle = titleOpts.color;\n        ctx.fillStyle = titleOpts.color;\n        ctx.font = titleFont.string;\n        renderText(ctx, titleOpts.text, x, y, titleFont);\n    }\n _computeTitleHeight() {\n        const titleOpts = this.options.title;\n        const titleFont = toFont(titleOpts.font);\n        const titlePadding = toPadding(titleOpts.padding);\n        return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;\n    }\n _getLegendItemAt(x, y) {\n        let i, hitBox, lh;\n        if (_isBetween(x, this.left, this.right) && _isBetween(y, this.top, this.bottom)) {\n            lh = this.legendHitBoxes;\n            for(i = 0; i < lh.length; ++i){\n                hitBox = lh[i];\n                if (_isBetween(x, hitBox.left, hitBox.left + hitBox.width) && _isBetween(y, hitBox.top, hitBox.top + hitBox.height)) {\n                    return this.legendItems[i];\n                }\n            }\n        }\n        return null;\n    }\n handleEvent(e) {\n        const opts = this.options;\n        if (!isListened(e.type, opts)) {\n            return;\n        }\n        const hoveredItem = this._getLegendItemAt(e.x, e.y);\n        if (e.type === 'mousemove' || e.type === 'mouseout') {\n            const previous = this._hoveredItem;\n            const sameItem = itemsEqual(previous, hoveredItem);\n            if (previous && !sameItem) {\n                callback(opts.onLeave, [\n                    e,\n                    previous,\n                    this\n                ], this);\n            }\n            this._hoveredItem = hoveredItem;\n            if (hoveredItem && !sameItem) {\n                callback(opts.onHover, [\n                    e,\n                    hoveredItem,\n                    this\n                ], this);\n            }\n        } else if (hoveredItem) {\n            callback(opts.onClick, [\n                e,\n                hoveredItem,\n                this\n            ], this);\n        }\n    }\n}\nfunction calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight) {\n    const itemWidth = calculateItemWidth(legendItem, boxWidth, labelFont, ctx);\n    const itemHeight = calculateItemHeight(_itemHeight, legendItem, labelFont.lineHeight);\n    return {\n        itemWidth,\n        itemHeight\n    };\n}\nfunction calculateItemWidth(legendItem, boxWidth, labelFont, ctx) {\n    let legendItemText = legendItem.text;\n    if (legendItemText && typeof legendItemText !== 'string') {\n        legendItemText = legendItemText.reduce((a, b)=>a.length > b.length ? a : b);\n    }\n    return boxWidth + labelFont.size / 2 + ctx.measureText(legendItemText).width;\n}\nfunction calculateItemHeight(_itemHeight, legendItem, fontLineHeight) {\n    let itemHeight = _itemHeight;\n    if (typeof legendItem.text !== 'string') {\n        itemHeight = calculateLegendItemHeight(legendItem, fontLineHeight);\n    }\n    return itemHeight;\n}\nfunction calculateLegendItemHeight(legendItem, fontLineHeight) {\n    const labelHeight = legendItem.text ? legendItem.text.length : 0;\n    return fontLineHeight * labelHeight;\n}\nfunction isListened(type, opts) {\n    if ((type === 'mousemove' || type === 'mouseout') && (opts.onHover || opts.onLeave)) {\n        return true;\n    }\n    if (opts.onClick && (type === 'click' || type === 'mouseup')) {\n        return true;\n    }\n    return false;\n}\nvar plugin_legend = {\n    id: 'legend',\n _element: Legend,\n    start (chart, _args, options) {\n        const legend = chart.legend = new Legend({\n            ctx: chart.ctx,\n            options,\n            chart\n        });\n        layouts.configure(chart, legend, options);\n        layouts.addBox(chart, legend);\n    },\n    stop (chart) {\n        layouts.removeBox(chart, chart.legend);\n        delete chart.legend;\n    },\n    beforeUpdate (chart, _args, options) {\n        const legend = chart.legend;\n        layouts.configure(chart, legend, options);\n        legend.options = options;\n    },\n    afterUpdate (chart) {\n        const legend = chart.legend;\n        legend.buildLabels();\n        legend.adjustHitBoxes();\n    },\n    afterEvent (chart, args) {\n        if (!args.replay) {\n            chart.legend.handleEvent(args.event);\n        }\n    },\n    defaults: {\n        display: true,\n        position: 'top',\n        align: 'center',\n        fullSize: true,\n        reverse: false,\n        weight: 1000,\n        onClick (e, legendItem, legend) {\n            const index = legendItem.datasetIndex;\n            const ci = legend.chart;\n            if (ci.isDatasetVisible(index)) {\n                ci.hide(index);\n                legendItem.hidden = true;\n            } else {\n                ci.show(index);\n                legendItem.hidden = false;\n            }\n        },\n        onHover: null,\n        onLeave: null,\n        labels: {\n            color: (ctx)=>ctx.chart.options.color,\n            boxWidth: 40,\n            padding: 10,\n            generateLabels (chart) {\n                const datasets = chart.data.datasets;\n                const { labels: { usePointStyle , pointStyle , textAlign , color , useBorderRadius , borderRadius  }  } = chart.legend.options;\n                return chart._getSortedDatasetMetas().map((meta)=>{\n                    const style = meta.controller.getStyle(usePointStyle ? 0 : undefined);\n                    const borderWidth = toPadding(style.borderWidth);\n                    return {\n                        text: datasets[meta.index].label,\n                        fillStyle: style.backgroundColor,\n                        fontColor: color,\n                        hidden: !meta.visible,\n                        lineCap: style.borderCapStyle,\n                        lineDash: style.borderDash,\n                        lineDashOffset: style.borderDashOffset,\n                        lineJoin: style.borderJoinStyle,\n                        lineWidth: (borderWidth.width + borderWidth.height) / 4,\n                        strokeStyle: style.borderColor,\n                        pointStyle: pointStyle || style.pointStyle,\n                        rotation: style.rotation,\n                        textAlign: textAlign || style.textAlign,\n                        borderRadius: useBorderRadius && (borderRadius || style.borderRadius),\n                        datasetIndex: meta.index\n                    };\n                }, this);\n            }\n        },\n        title: {\n            color: (ctx)=>ctx.chart.options.color,\n            display: false,\n            position: 'center',\n            text: ''\n        }\n    },\n    descriptors: {\n        _scriptable: (name)=>!name.startsWith('on'),\n        labels: {\n            _scriptable: (name)=>![\n                    'generateLabels',\n                    'filter',\n                    'sort'\n                ].includes(name)\n        }\n    }\n};\n\nclass Title extends Element {\n constructor(config){\n        super();\n        this.chart = config.chart;\n        this.options = config.options;\n        this.ctx = config.ctx;\n        this._padding = undefined;\n        this.top = undefined;\n        this.bottom = undefined;\n        this.left = undefined;\n        this.right = undefined;\n        this.width = undefined;\n        this.height = undefined;\n        this.position = undefined;\n        this.weight = undefined;\n        this.fullSize = undefined;\n    }\n    update(maxWidth, maxHeight) {\n        const opts = this.options;\n        this.left = 0;\n        this.top = 0;\n        if (!opts.display) {\n            this.width = this.height = this.right = this.bottom = 0;\n            return;\n        }\n        this.width = this.right = maxWidth;\n        this.height = this.bottom = maxHeight;\n        const lineCount = isArray(opts.text) ? opts.text.length : 1;\n        this._padding = toPadding(opts.padding);\n        const textSize = lineCount * toFont(opts.font).lineHeight + this._padding.height;\n        if (this.isHorizontal()) {\n            this.height = textSize;\n        } else {\n            this.width = textSize;\n        }\n    }\n    isHorizontal() {\n        const pos = this.options.position;\n        return pos === 'top' || pos === 'bottom';\n    }\n    _drawArgs(offset) {\n        const { top , left , bottom , right , options  } = this;\n        const align = options.align;\n        let rotation = 0;\n        let maxWidth, titleX, titleY;\n        if (this.isHorizontal()) {\n            titleX = _alignStartEnd(align, left, right);\n            titleY = top + offset;\n            maxWidth = right - left;\n        } else {\n            if (options.position === 'left') {\n                titleX = left + offset;\n                titleY = _alignStartEnd(align, bottom, top);\n                rotation = PI * -0.5;\n            } else {\n                titleX = right - offset;\n                titleY = _alignStartEnd(align, top, bottom);\n                rotation = PI * 0.5;\n            }\n            maxWidth = bottom - top;\n        }\n        return {\n            titleX,\n            titleY,\n            maxWidth,\n            rotation\n        };\n    }\n    draw() {\n        const ctx = this.ctx;\n        const opts = this.options;\n        if (!opts.display) {\n            return;\n        }\n        const fontOpts = toFont(opts.font);\n        const lineHeight = fontOpts.lineHeight;\n        const offset = lineHeight / 2 + this._padding.top;\n        const { titleX , titleY , maxWidth , rotation  } = this._drawArgs(offset);\n        renderText(ctx, opts.text, 0, 0, fontOpts, {\n            color: opts.color,\n            maxWidth,\n            rotation,\n            textAlign: _toLeftRightCenter(opts.align),\n            textBaseline: 'middle',\n            translation: [\n                titleX,\n                titleY\n            ]\n        });\n    }\n}\nfunction createTitle(chart, titleOpts) {\n    const title = new Title({\n        ctx: chart.ctx,\n        options: titleOpts,\n        chart\n    });\n    layouts.configure(chart, title, titleOpts);\n    layouts.addBox(chart, title);\n    chart.titleBlock = title;\n}\nvar plugin_title = {\n    id: 'title',\n _element: Title,\n    start (chart, _args, options) {\n        createTitle(chart, options);\n    },\n    stop (chart) {\n        const titleBlock = chart.titleBlock;\n        layouts.removeBox(chart, titleBlock);\n        delete chart.titleBlock;\n    },\n    beforeUpdate (chart, _args, options) {\n        const title = chart.titleBlock;\n        layouts.configure(chart, title, options);\n        title.options = options;\n    },\n    defaults: {\n        align: 'center',\n        display: false,\n        font: {\n            weight: 'bold'\n        },\n        fullSize: true,\n        padding: 10,\n        position: 'top',\n        text: '',\n        weight: 2000\n    },\n    defaultRoutes: {\n        color: 'color'\n    },\n    descriptors: {\n        _scriptable: true,\n        _indexable: false\n    }\n};\n\nconst map = new WeakMap();\nvar plugin_subtitle = {\n    id: 'subtitle',\n    start (chart, _args, options) {\n        const title = new Title({\n            ctx: chart.ctx,\n            options,\n            chart\n        });\n        layouts.configure(chart, title, options);\n        layouts.addBox(chart, title);\n        map.set(chart, title);\n    },\n    stop (chart) {\n        layouts.removeBox(chart, map.get(chart));\n        map.delete(chart);\n    },\n    beforeUpdate (chart, _args, options) {\n        const title = map.get(chart);\n        layouts.configure(chart, title, options);\n        title.options = options;\n    },\n    defaults: {\n        align: 'center',\n        display: false,\n        font: {\n            weight: 'normal'\n        },\n        fullSize: true,\n        padding: 0,\n        position: 'top',\n        text: '',\n        weight: 1500\n    },\n    defaultRoutes: {\n        color: 'color'\n    },\n    descriptors: {\n        _scriptable: true,\n        _indexable: false\n    }\n};\n\nconst positioners = {\n average (items) {\n        if (!items.length) {\n            return false;\n        }\n        let i, len;\n        let xSet = new Set();\n        let y = 0;\n        let count = 0;\n        for(i = 0, len = items.length; i < len; ++i){\n            const el = items[i].element;\n            if (el && el.hasValue()) {\n                const pos = el.tooltipPosition();\n                xSet.add(pos.x);\n                y += pos.y;\n                ++count;\n            }\n        }\n        const xAverage = [\n            ...xSet\n        ].reduce((a, b)=>a + b) / xSet.size;\n        return {\n            x: xAverage,\n            y: y / count\n        };\n    },\n nearest (items, eventPosition) {\n        if (!items.length) {\n            return false;\n        }\n        let x = eventPosition.x;\n        let y = eventPosition.y;\n        let minDistance = Number.POSITIVE_INFINITY;\n        let i, len, nearestElement;\n        for(i = 0, len = items.length; i < len; ++i){\n            const el = items[i].element;\n            if (el && el.hasValue()) {\n                const center = el.getCenterPoint();\n                const d = distanceBetweenPoints(eventPosition, center);\n                if (d < minDistance) {\n                    minDistance = d;\n                    nearestElement = el;\n                }\n            }\n        }\n        if (nearestElement) {\n            const tp = nearestElement.tooltipPosition();\n            x = tp.x;\n            y = tp.y;\n        }\n        return {\n            x,\n            y\n        };\n    }\n};\nfunction pushOrConcat(base, toPush) {\n    if (toPush) {\n        if (isArray(toPush)) {\n            Array.prototype.push.apply(base, toPush);\n        } else {\n            base.push(toPush);\n        }\n    }\n    return base;\n}\n function splitNewlines(str) {\n    if ((typeof str === 'string' || str instanceof String) && str.indexOf('\\n') > -1) {\n        return str.split('\\n');\n    }\n    return str;\n}\n function createTooltipItem(chart, item) {\n    const { element , datasetIndex , index  } = item;\n    const controller = chart.getDatasetMeta(datasetIndex).controller;\n    const { label , value  } = controller.getLabelAndValue(index);\n    return {\n        chart,\n        label,\n        parsed: controller.getParsed(index),\n        raw: chart.data.datasets[datasetIndex].data[index],\n        formattedValue: value,\n        dataset: controller.getDataset(),\n        dataIndex: index,\n        datasetIndex,\n        element\n    };\n}\n function getTooltipSize(tooltip, options) {\n    const ctx = tooltip.chart.ctx;\n    const { body , footer , title  } = tooltip;\n    const { boxWidth , boxHeight  } = options;\n    const bodyFont = toFont(options.bodyFont);\n    const titleFont = toFont(options.titleFont);\n    const footerFont = toFont(options.footerFont);\n    const titleLineCount = title.length;\n    const footerLineCount = footer.length;\n    const bodyLineItemCount = body.length;\n    const padding = toPadding(options.padding);\n    let height = padding.height;\n    let width = 0;\n    let combinedBodyLength = body.reduce((count, bodyItem)=>count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length, 0);\n    combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;\n    if (titleLineCount) {\n        height += titleLineCount * titleFont.lineHeight + (titleLineCount - 1) * options.titleSpacing + options.titleMarginBottom;\n    }\n    if (combinedBodyLength) {\n        const bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;\n        height += bodyLineItemCount * bodyLineHeight + (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight + (combinedBodyLength - 1) * options.bodySpacing;\n    }\n    if (footerLineCount) {\n        height += options.footerMarginTop + footerLineCount * footerFont.lineHeight + (footerLineCount - 1) * options.footerSpacing;\n    }\n    let widthPadding = 0;\n    const maxLineWidth = function(line) {\n        width = Math.max(width, ctx.measureText(line).width + widthPadding);\n    };\n    ctx.save();\n    ctx.font = titleFont.string;\n    each(tooltip.title, maxLineWidth);\n    ctx.font = bodyFont.string;\n    each(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);\n    widthPadding = options.displayColors ? boxWidth + 2 + options.boxPadding : 0;\n    each(body, (bodyItem)=>{\n        each(bodyItem.before, maxLineWidth);\n        each(bodyItem.lines, maxLineWidth);\n        each(bodyItem.after, maxLineWidth);\n    });\n    widthPadding = 0;\n    ctx.font = footerFont.string;\n    each(tooltip.footer, maxLineWidth);\n    ctx.restore();\n    width += padding.width;\n    return {\n        width,\n        height\n    };\n}\nfunction determineYAlign(chart, size) {\n    const { y , height  } = size;\n    if (y < height / 2) {\n        return 'top';\n    } else if (y > chart.height - height / 2) {\n        return 'bottom';\n    }\n    return 'center';\n}\nfunction doesNotFitWithAlign(xAlign, chart, options, size) {\n    const { x , width  } = size;\n    const caret = options.caretSize + options.caretPadding;\n    if (xAlign === 'left' && x + width + caret > chart.width) {\n        return true;\n    }\n    if (xAlign === 'right' && x - width - caret < 0) {\n        return true;\n    }\n}\nfunction determineXAlign(chart, options, size, yAlign) {\n    const { x , width  } = size;\n    const { width: chartWidth , chartArea: { left , right  }  } = chart;\n    let xAlign = 'center';\n    if (yAlign === 'center') {\n        xAlign = x <= (left + right) / 2 ? 'left' : 'right';\n    } else if (x <= width / 2) {\n        xAlign = 'left';\n    } else if (x >= chartWidth - width / 2) {\n        xAlign = 'right';\n    }\n    if (doesNotFitWithAlign(xAlign, chart, options, size)) {\n        xAlign = 'center';\n    }\n    return xAlign;\n}\n function determineAlignment(chart, options, size) {\n    const yAlign = size.yAlign || options.yAlign || determineYAlign(chart, size);\n    return {\n        xAlign: size.xAlign || options.xAlign || determineXAlign(chart, options, size, yAlign),\n        yAlign\n    };\n}\nfunction alignX(size, xAlign) {\n    let { x , width  } = size;\n    if (xAlign === 'right') {\n        x -= width;\n    } else if (xAlign === 'center') {\n        x -= width / 2;\n    }\n    return x;\n}\nfunction alignY(size, yAlign, paddingAndSize) {\n    let { y , height  } = size;\n    if (yAlign === 'top') {\n        y += paddingAndSize;\n    } else if (yAlign === 'bottom') {\n        y -= height + paddingAndSize;\n    } else {\n        y -= height / 2;\n    }\n    return y;\n}\n function getBackgroundPoint(options, size, alignment, chart) {\n    const { caretSize , caretPadding , cornerRadius  } = options;\n    const { xAlign , yAlign  } = alignment;\n    const paddingAndSize = caretSize + caretPadding;\n    const { topLeft , topRight , bottomLeft , bottomRight  } = toTRBLCorners(cornerRadius);\n    let x = alignX(size, xAlign);\n    const y = alignY(size, yAlign, paddingAndSize);\n    if (yAlign === 'center') {\n        if (xAlign === 'left') {\n            x += paddingAndSize;\n        } else if (xAlign === 'right') {\n            x -= paddingAndSize;\n        }\n    } else if (xAlign === 'left') {\n        x -= Math.max(topLeft, bottomLeft) + caretSize;\n    } else if (xAlign === 'right') {\n        x += Math.max(topRight, bottomRight) + caretSize;\n    }\n    return {\n        x: _limitValue(x, 0, chart.width - size.width),\n        y: _limitValue(y, 0, chart.height - size.height)\n    };\n}\nfunction getAlignedX(tooltip, align, options) {\n    const padding = toPadding(options.padding);\n    return align === 'center' ? tooltip.x + tooltip.width / 2 : align === 'right' ? tooltip.x + tooltip.width - padding.right : tooltip.x + padding.left;\n}\n function getBeforeAfterBodyLines(callback) {\n    return pushOrConcat([], splitNewlines(callback));\n}\nfunction createTooltipContext(parent, tooltip, tooltipItems) {\n    return createContext(parent, {\n        tooltip,\n        tooltipItems,\n        type: 'tooltip'\n    });\n}\nfunction overrideCallbacks(callbacks, context) {\n    const override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;\n    return override ? callbacks.override(override) : callbacks;\n}\nconst defaultCallbacks = {\n    beforeTitle: noop,\n    title (tooltipItems) {\n        if (tooltipItems.length > 0) {\n            const item = tooltipItems[0];\n            const labels = item.chart.data.labels;\n            const labelCount = labels ? labels.length : 0;\n            if (this && this.options && this.options.mode === 'dataset') {\n                return item.dataset.label || '';\n            } else if (item.label) {\n                return item.label;\n            } else if (labelCount > 0 && item.dataIndex < labelCount) {\n                return labels[item.dataIndex];\n            }\n        }\n        return '';\n    },\n    afterTitle: noop,\n    beforeBody: noop,\n    beforeLabel: noop,\n    label (tooltipItem) {\n        if (this && this.options && this.options.mode === 'dataset') {\n            return tooltipItem.label + ': ' + tooltipItem.formattedValue || tooltipItem.formattedValue;\n        }\n        let label = tooltipItem.dataset.label || '';\n        if (label) {\n            label += ': ';\n        }\n        const value = tooltipItem.formattedValue;\n        if (!isNullOrUndef(value)) {\n            label += value;\n        }\n        return label;\n    },\n    labelColor (tooltipItem) {\n        const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n        const options = meta.controller.getStyle(tooltipItem.dataIndex);\n        return {\n            borderColor: options.borderColor,\n            backgroundColor: options.backgroundColor,\n            borderWidth: options.borderWidth,\n            borderDash: options.borderDash,\n            borderDashOffset: options.borderDashOffset,\n            borderRadius: 0\n        };\n    },\n    labelTextColor () {\n        return this.options.bodyColor;\n    },\n    labelPointStyle (tooltipItem) {\n        const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n        const options = meta.controller.getStyle(tooltipItem.dataIndex);\n        return {\n            pointStyle: options.pointStyle,\n            rotation: options.rotation\n        };\n    },\n    afterLabel: noop,\n    afterBody: noop,\n    beforeFooter: noop,\n    footer: noop,\n    afterFooter: noop\n};\n function invokeCallbackWithFallback(callbacks, name, ctx, arg) {\n    const result = callbacks[name].call(ctx, arg);\n    if (typeof result === 'undefined') {\n        return defaultCallbacks[name].call(ctx, arg);\n    }\n    return result;\n}\nclass Tooltip extends Element {\n static positioners = positioners;\n    constructor(config){\n        super();\n        this.opacity = 0;\n        this._active = [];\n        this._eventPosition = undefined;\n        this._size = undefined;\n        this._cachedAnimations = undefined;\n        this._tooltipItems = [];\n        this.$animations = undefined;\n        this.$context = undefined;\n        this.chart = config.chart;\n        this.options = config.options;\n        this.dataPoints = undefined;\n        this.title = undefined;\n        this.beforeBody = undefined;\n        this.body = undefined;\n        this.afterBody = undefined;\n        this.footer = undefined;\n        this.xAlign = undefined;\n        this.yAlign = undefined;\n        this.x = undefined;\n        this.y = undefined;\n        this.height = undefined;\n        this.width = undefined;\n        this.caretX = undefined;\n        this.caretY = undefined;\n        this.labelColors = undefined;\n        this.labelPointStyles = undefined;\n        this.labelTextColors = undefined;\n    }\n    initialize(options) {\n        this.options = options;\n        this._cachedAnimations = undefined;\n        this.$context = undefined;\n    }\n _resolveAnimations() {\n        const cached = this._cachedAnimations;\n        if (cached) {\n            return cached;\n        }\n        const chart = this.chart;\n        const options = this.options.setContext(this.getContext());\n        const opts = options.enabled && chart.options.animation && options.animations;\n        const animations = new Animations(this.chart, opts);\n        if (opts._cacheable) {\n            this._cachedAnimations = Object.freeze(animations);\n        }\n        return animations;\n    }\n getContext() {\n        return this.$context || (this.$context = createTooltipContext(this.chart.getContext(), this, this._tooltipItems));\n    }\n    getTitle(context, options) {\n        const { callbacks  } = options;\n        const beforeTitle = invokeCallbackWithFallback(callbacks, 'beforeTitle', this, context);\n        const title = invokeCallbackWithFallback(callbacks, 'title', this, context);\n        const afterTitle = invokeCallbackWithFallback(callbacks, 'afterTitle', this, context);\n        let lines = [];\n        lines = pushOrConcat(lines, splitNewlines(beforeTitle));\n        lines = pushOrConcat(lines, splitNewlines(title));\n        lines = pushOrConcat(lines, splitNewlines(afterTitle));\n        return lines;\n    }\n    getBeforeBody(tooltipItems, options) {\n        return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'beforeBody', this, tooltipItems));\n    }\n    getBody(tooltipItems, options) {\n        const { callbacks  } = options;\n        const bodyItems = [];\n        each(tooltipItems, (context)=>{\n            const bodyItem = {\n                before: [],\n                lines: [],\n                after: []\n            };\n            const scoped = overrideCallbacks(callbacks, context);\n            pushOrConcat(bodyItem.before, splitNewlines(invokeCallbackWithFallback(scoped, 'beforeLabel', this, context)));\n            pushOrConcat(bodyItem.lines, invokeCallbackWithFallback(scoped, 'label', this, context));\n            pushOrConcat(bodyItem.after, splitNewlines(invokeCallbackWithFallback(scoped, 'afterLabel', this, context)));\n            bodyItems.push(bodyItem);\n        });\n        return bodyItems;\n    }\n    getAfterBody(tooltipItems, options) {\n        return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'afterBody', this, tooltipItems));\n    }\n    getFooter(tooltipItems, options) {\n        const { callbacks  } = options;\n        const beforeFooter = invokeCallbackWithFallback(callbacks, 'beforeFooter', this, tooltipItems);\n        const footer = invokeCallbackWithFallback(callbacks, 'footer', this, tooltipItems);\n        const afterFooter = invokeCallbackWithFallback(callbacks, 'afterFooter', this, tooltipItems);\n        let lines = [];\n        lines = pushOrConcat(lines, splitNewlines(beforeFooter));\n        lines = pushOrConcat(lines, splitNewlines(footer));\n        lines = pushOrConcat(lines, splitNewlines(afterFooter));\n        return lines;\n    }\n _createItems(options) {\n        const active = this._active;\n        const data = this.chart.data;\n        const labelColors = [];\n        const labelPointStyles = [];\n        const labelTextColors = [];\n        let tooltipItems = [];\n        let i, len;\n        for(i = 0, len = active.length; i < len; ++i){\n            tooltipItems.push(createTooltipItem(this.chart, active[i]));\n        }\n        if (options.filter) {\n            tooltipItems = tooltipItems.filter((element, index, array)=>options.filter(element, index, array, data));\n        }\n        if (options.itemSort) {\n            tooltipItems = tooltipItems.sort((a, b)=>options.itemSort(a, b, data));\n        }\n        each(tooltipItems, (context)=>{\n            const scoped = overrideCallbacks(options.callbacks, context);\n            labelColors.push(invokeCallbackWithFallback(scoped, 'labelColor', this, context));\n            labelPointStyles.push(invokeCallbackWithFallback(scoped, 'labelPointStyle', this, context));\n            labelTextColors.push(invokeCallbackWithFallback(scoped, 'labelTextColor', this, context));\n        });\n        this.labelColors = labelColors;\n        this.labelPointStyles = labelPointStyles;\n        this.labelTextColors = labelTextColors;\n        this.dataPoints = tooltipItems;\n        return tooltipItems;\n    }\n    update(changed, replay) {\n        const options = this.options.setContext(this.getContext());\n        const active = this._active;\n        let properties;\n        let tooltipItems = [];\n        if (!active.length) {\n            if (this.opacity !== 0) {\n                properties = {\n                    opacity: 0\n                };\n            }\n        } else {\n            const position = positioners[options.position].call(this, active, this._eventPosition);\n            tooltipItems = this._createItems(options);\n            this.title = this.getTitle(tooltipItems, options);\n            this.beforeBody = this.getBeforeBody(tooltipItems, options);\n            this.body = this.getBody(tooltipItems, options);\n            this.afterBody = this.getAfterBody(tooltipItems, options);\n            this.footer = this.getFooter(tooltipItems, options);\n            const size = this._size = getTooltipSize(this, options);\n            const positionAndSize = Object.assign({}, position, size);\n            const alignment = determineAlignment(this.chart, options, positionAndSize);\n            const backgroundPoint = getBackgroundPoint(options, positionAndSize, alignment, this.chart);\n            this.xAlign = alignment.xAlign;\n            this.yAlign = alignment.yAlign;\n            properties = {\n                opacity: 1,\n                x: backgroundPoint.x,\n                y: backgroundPoint.y,\n                width: size.width,\n                height: size.height,\n                caretX: position.x,\n                caretY: position.y\n            };\n        }\n        this._tooltipItems = tooltipItems;\n        this.$context = undefined;\n        if (properties) {\n            this._resolveAnimations().update(this, properties);\n        }\n        if (changed && options.external) {\n            options.external.call(this, {\n                chart: this.chart,\n                tooltip: this,\n                replay\n            });\n        }\n    }\n    drawCaret(tooltipPoint, ctx, size, options) {\n        const caretPosition = this.getCaretPosition(tooltipPoint, size, options);\n        ctx.lineTo(caretPosition.x1, caretPosition.y1);\n        ctx.lineTo(caretPosition.x2, caretPosition.y2);\n        ctx.lineTo(caretPosition.x3, caretPosition.y3);\n    }\n    getCaretPosition(tooltipPoint, size, options) {\n        const { xAlign , yAlign  } = this;\n        const { caretSize , cornerRadius  } = options;\n        const { topLeft , topRight , bottomLeft , bottomRight  } = toTRBLCorners(cornerRadius);\n        const { x: ptX , y: ptY  } = tooltipPoint;\n        const { width , height  } = size;\n        let x1, x2, x3, y1, y2, y3;\n        if (yAlign === 'center') {\n            y2 = ptY + height / 2;\n            if (xAlign === 'left') {\n                x1 = ptX;\n                x2 = x1 - caretSize;\n                y1 = y2 + caretSize;\n                y3 = y2 - caretSize;\n            } else {\n                x1 = ptX + width;\n                x2 = x1 + caretSize;\n                y1 = y2 - caretSize;\n                y3 = y2 + caretSize;\n            }\n            x3 = x1;\n        } else {\n            if (xAlign === 'left') {\n                x2 = ptX + Math.max(topLeft, bottomLeft) + caretSize;\n            } else if (xAlign === 'right') {\n                x2 = ptX + width - Math.max(topRight, bottomRight) - caretSize;\n            } else {\n                x2 = this.caretX;\n            }\n            if (yAlign === 'top') {\n                y1 = ptY;\n                y2 = y1 - caretSize;\n                x1 = x2 - caretSize;\n                x3 = x2 + caretSize;\n            } else {\n                y1 = ptY + height;\n                y2 = y1 + caretSize;\n                x1 = x2 + caretSize;\n                x3 = x2 - caretSize;\n            }\n            y3 = y1;\n        }\n        return {\n            x1,\n            x2,\n            x3,\n            y1,\n            y2,\n            y3\n        };\n    }\n    drawTitle(pt, ctx, options) {\n        const title = this.title;\n        const length = title.length;\n        let titleFont, titleSpacing, i;\n        if (length) {\n            const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n            pt.x = getAlignedX(this, options.titleAlign, options);\n            ctx.textAlign = rtlHelper.textAlign(options.titleAlign);\n            ctx.textBaseline = 'middle';\n            titleFont = toFont(options.titleFont);\n            titleSpacing = options.titleSpacing;\n            ctx.fillStyle = options.titleColor;\n            ctx.font = titleFont.string;\n            for(i = 0; i < length; ++i){\n                ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);\n                pt.y += titleFont.lineHeight + titleSpacing;\n                if (i + 1 === length) {\n                    pt.y += options.titleMarginBottom - titleSpacing;\n                }\n            }\n        }\n    }\n _drawColorBox(ctx, pt, i, rtlHelper, options) {\n        const labelColor = this.labelColors[i];\n        const labelPointStyle = this.labelPointStyles[i];\n        const { boxHeight , boxWidth  } = options;\n        const bodyFont = toFont(options.bodyFont);\n        const colorX = getAlignedX(this, 'left', options);\n        const rtlColorX = rtlHelper.x(colorX);\n        const yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;\n        const colorY = pt.y + yOffSet;\n        if (options.usePointStyle) {\n            const drawOptions = {\n                radius: Math.min(boxWidth, boxHeight) / 2,\n                pointStyle: labelPointStyle.pointStyle,\n                rotation: labelPointStyle.rotation,\n                borderWidth: 1\n            };\n            const centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;\n            const centerY = colorY + boxHeight / 2;\n            ctx.strokeStyle = options.multiKeyBackground;\n            ctx.fillStyle = options.multiKeyBackground;\n            drawPoint(ctx, drawOptions, centerX, centerY);\n            ctx.strokeStyle = labelColor.borderColor;\n            ctx.fillStyle = labelColor.backgroundColor;\n            drawPoint(ctx, drawOptions, centerX, centerY);\n        } else {\n            ctx.lineWidth = isObject(labelColor.borderWidth) ? Math.max(...Object.values(labelColor.borderWidth)) : labelColor.borderWidth || 1;\n            ctx.strokeStyle = labelColor.borderColor;\n            ctx.setLineDash(labelColor.borderDash || []);\n            ctx.lineDashOffset = labelColor.borderDashOffset || 0;\n            const outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth);\n            const innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - 2);\n            const borderRadius = toTRBLCorners(labelColor.borderRadius);\n            if (Object.values(borderRadius).some((v)=>v !== 0)) {\n                ctx.beginPath();\n                ctx.fillStyle = options.multiKeyBackground;\n                addRoundedRectPath(ctx, {\n                    x: outerX,\n                    y: colorY,\n                    w: boxWidth,\n                    h: boxHeight,\n                    radius: borderRadius\n                });\n                ctx.fill();\n                ctx.stroke();\n                ctx.fillStyle = labelColor.backgroundColor;\n                ctx.beginPath();\n                addRoundedRectPath(ctx, {\n                    x: innerX,\n                    y: colorY + 1,\n                    w: boxWidth - 2,\n                    h: boxHeight - 2,\n                    radius: borderRadius\n                });\n                ctx.fill();\n            } else {\n                ctx.fillStyle = options.multiKeyBackground;\n                ctx.fillRect(outerX, colorY, boxWidth, boxHeight);\n                ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);\n                ctx.fillStyle = labelColor.backgroundColor;\n                ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);\n            }\n        }\n        ctx.fillStyle = this.labelTextColors[i];\n    }\n    drawBody(pt, ctx, options) {\n        const { body  } = this;\n        const { bodySpacing , bodyAlign , displayColors , boxHeight , boxWidth , boxPadding  } = options;\n        const bodyFont = toFont(options.bodyFont);\n        let bodyLineHeight = bodyFont.lineHeight;\n        let xLinePadding = 0;\n        const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n        const fillLineOfText = function(line) {\n            ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);\n            pt.y += bodyLineHeight + bodySpacing;\n        };\n        const bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);\n        let bodyItem, textColor, lines, i, j, ilen, jlen;\n        ctx.textAlign = bodyAlign;\n        ctx.textBaseline = 'middle';\n        ctx.font = bodyFont.string;\n        pt.x = getAlignedX(this, bodyAlignForCalculation, options);\n        ctx.fillStyle = options.bodyColor;\n        each(this.beforeBody, fillLineOfText);\n        xLinePadding = displayColors && bodyAlignForCalculation !== 'right' ? bodyAlign === 'center' ? boxWidth / 2 + boxPadding : boxWidth + 2 + boxPadding : 0;\n        for(i = 0, ilen = body.length; i < ilen; ++i){\n            bodyItem = body[i];\n            textColor = this.labelTextColors[i];\n            ctx.fillStyle = textColor;\n            each(bodyItem.before, fillLineOfText);\n            lines = bodyItem.lines;\n            if (displayColors && lines.length) {\n                this._drawColorBox(ctx, pt, i, rtlHelper, options);\n                bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);\n            }\n            for(j = 0, jlen = lines.length; j < jlen; ++j){\n                fillLineOfText(lines[j]);\n                bodyLineHeight = bodyFont.lineHeight;\n            }\n            each(bodyItem.after, fillLineOfText);\n        }\n        xLinePadding = 0;\n        bodyLineHeight = bodyFont.lineHeight;\n        each(this.afterBody, fillLineOfText);\n        pt.y -= bodySpacing;\n    }\n    drawFooter(pt, ctx, options) {\n        const footer = this.footer;\n        const length = footer.length;\n        let footerFont, i;\n        if (length) {\n            const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n            pt.x = getAlignedX(this, options.footerAlign, options);\n            pt.y += options.footerMarginTop;\n            ctx.textAlign = rtlHelper.textAlign(options.footerAlign);\n            ctx.textBaseline = 'middle';\n            footerFont = toFont(options.footerFont);\n            ctx.fillStyle = options.footerColor;\n            ctx.font = footerFont.string;\n            for(i = 0; i < length; ++i){\n                ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);\n                pt.y += footerFont.lineHeight + options.footerSpacing;\n            }\n        }\n    }\n    drawBackground(pt, ctx, tooltipSize, options) {\n        const { xAlign , yAlign  } = this;\n        const { x , y  } = pt;\n        const { width , height  } = tooltipSize;\n        const { topLeft , topRight , bottomLeft , bottomRight  } = toTRBLCorners(options.cornerRadius);\n        ctx.fillStyle = options.backgroundColor;\n        ctx.strokeStyle = options.borderColor;\n        ctx.lineWidth = options.borderWidth;\n        ctx.beginPath();\n        ctx.moveTo(x + topLeft, y);\n        if (yAlign === 'top') {\n            this.drawCaret(pt, ctx, tooltipSize, options);\n        }\n        ctx.lineTo(x + width - topRight, y);\n        ctx.quadraticCurveTo(x + width, y, x + width, y + topRight);\n        if (yAlign === 'center' && xAlign === 'right') {\n            this.drawCaret(pt, ctx, tooltipSize, options);\n        }\n        ctx.lineTo(x + width, y + height - bottomRight);\n        ctx.quadraticCurveTo(x + width, y + height, x + width - bottomRight, y + height);\n        if (yAlign === 'bottom') {\n            this.drawCaret(pt, ctx, tooltipSize, options);\n        }\n        ctx.lineTo(x + bottomLeft, y + height);\n        ctx.quadraticCurveTo(x, y + height, x, y + height - bottomLeft);\n        if (yAlign === 'center' && xAlign === 'left') {\n            this.drawCaret(pt, ctx, tooltipSize, options);\n        }\n        ctx.lineTo(x, y + topLeft);\n        ctx.quadraticCurveTo(x, y, x + topLeft, y);\n        ctx.closePath();\n        ctx.fill();\n        if (options.borderWidth > 0) {\n            ctx.stroke();\n        }\n    }\n _updateAnimationTarget(options) {\n        const chart = this.chart;\n        const anims = this.$animations;\n        const animX = anims && anims.x;\n        const animY = anims && anims.y;\n        if (animX || animY) {\n            const position = positioners[options.position].call(this, this._active, this._eventPosition);\n            if (!position) {\n                return;\n            }\n            const size = this._size = getTooltipSize(this, options);\n            const positionAndSize = Object.assign({}, position, this._size);\n            const alignment = determineAlignment(chart, options, positionAndSize);\n            const point = getBackgroundPoint(options, positionAndSize, alignment, chart);\n            if (animX._to !== point.x || animY._to !== point.y) {\n                this.xAlign = alignment.xAlign;\n                this.yAlign = alignment.yAlign;\n                this.width = size.width;\n                this.height = size.height;\n                this.caretX = position.x;\n                this.caretY = position.y;\n                this._resolveAnimations().update(this, point);\n            }\n        }\n    }\n _willRender() {\n        return !!this.opacity;\n    }\n    draw(ctx) {\n        const options = this.options.setContext(this.getContext());\n        let opacity = this.opacity;\n        if (!opacity) {\n            return;\n        }\n        this._updateAnimationTarget(options);\n        const tooltipSize = {\n            width: this.width,\n            height: this.height\n        };\n        const pt = {\n            x: this.x,\n            y: this.y\n        };\n        opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;\n        const padding = toPadding(options.padding);\n        const hasTooltipContent = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;\n        if (options.enabled && hasTooltipContent) {\n            ctx.save();\n            ctx.globalAlpha = opacity;\n            this.drawBackground(pt, ctx, tooltipSize, options);\n            overrideTextDirection(ctx, options.textDirection);\n            pt.y += padding.top;\n            this.drawTitle(pt, ctx, options);\n            this.drawBody(pt, ctx, options);\n            this.drawFooter(pt, ctx, options);\n            restoreTextDirection(ctx, options.textDirection);\n            ctx.restore();\n        }\n    }\n getActiveElements() {\n        return this._active || [];\n    }\n setActiveElements(activeElements, eventPosition) {\n        const lastActive = this._active;\n        const active = activeElements.map(({ datasetIndex , index  })=>{\n            const meta = this.chart.getDatasetMeta(datasetIndex);\n            if (!meta) {\n                throw new Error('Cannot find a dataset at index ' + datasetIndex);\n            }\n            return {\n                datasetIndex,\n                element: meta.data[index],\n                index\n            };\n        });\n        const changed = !_elementsEqual(lastActive, active);\n        const positionChanged = this._positionChanged(active, eventPosition);\n        if (changed || positionChanged) {\n            this._active = active;\n            this._eventPosition = eventPosition;\n            this._ignoreReplayEvents = true;\n            this.update(true);\n        }\n    }\n handleEvent(e, replay, inChartArea = true) {\n        if (replay && this._ignoreReplayEvents) {\n            return false;\n        }\n        this._ignoreReplayEvents = false;\n        const options = this.options;\n        const lastActive = this._active || [];\n        const active = this._getActiveElements(e, lastActive, replay, inChartArea);\n        const positionChanged = this._positionChanged(active, e);\n        const changed = replay || !_elementsEqual(active, lastActive) || positionChanged;\n        if (changed) {\n            this._active = active;\n            if (options.enabled || options.external) {\n                this._eventPosition = {\n                    x: e.x,\n                    y: e.y\n                };\n                this.update(true, replay);\n            }\n        }\n        return changed;\n    }\n _getActiveElements(e, lastActive, replay, inChartArea) {\n        const options = this.options;\n        if (e.type === 'mouseout') {\n            return [];\n        }\n        if (!inChartArea) {\n            return lastActive.filter((i)=>this.chart.data.datasets[i.datasetIndex] && this.chart.getDatasetMeta(i.datasetIndex).controller.getParsed(i.index) !== undefined);\n        }\n        const active = this.chart.getElementsAtEventForMode(e, options.mode, options, replay);\n        if (options.reverse) {\n            active.reverse();\n        }\n        return active;\n    }\n _positionChanged(active, e) {\n        const { caretX , caretY , options  } = this;\n        const position = positioners[options.position].call(this, active, e);\n        return position !== false && (caretX !== position.x || caretY !== position.y);\n    }\n}\nvar plugin_tooltip = {\n    id: 'tooltip',\n    _element: Tooltip,\n    positioners,\n    afterInit (chart, _args, options) {\n        if (options) {\n            chart.tooltip = new Tooltip({\n                chart,\n                options\n            });\n        }\n    },\n    beforeUpdate (chart, _args, options) {\n        if (chart.tooltip) {\n            chart.tooltip.initialize(options);\n        }\n    },\n    reset (chart, _args, options) {\n        if (chart.tooltip) {\n            chart.tooltip.initialize(options);\n        }\n    },\n    afterDraw (chart) {\n        const tooltip = chart.tooltip;\n        if (tooltip && tooltip._willRender()) {\n            const args = {\n                tooltip\n            };\n            if (chart.notifyPlugins('beforeTooltipDraw', {\n                ...args,\n                cancelable: true\n            }) === false) {\n                return;\n            }\n            tooltip.draw(chart.ctx);\n            chart.notifyPlugins('afterTooltipDraw', args);\n        }\n    },\n    afterEvent (chart, args) {\n        if (chart.tooltip) {\n            const useFinalPosition = args.replay;\n            if (chart.tooltip.handleEvent(args.event, useFinalPosition, args.inChartArea)) {\n                args.changed = true;\n            }\n        }\n    },\n    defaults: {\n        enabled: true,\n        external: null,\n        position: 'average',\n        backgroundColor: 'rgba(0,0,0,0.8)',\n        titleColor: '#fff',\n        titleFont: {\n            weight: 'bold'\n        },\n        titleSpacing: 2,\n        titleMarginBottom: 6,\n        titleAlign: 'left',\n        bodyColor: '#fff',\n        bodySpacing: 2,\n        bodyFont: {},\n        bodyAlign: 'left',\n        footerColor: '#fff',\n        footerSpacing: 2,\n        footerMarginTop: 6,\n        footerFont: {\n            weight: 'bold'\n        },\n        footerAlign: 'left',\n        padding: 6,\n        caretPadding: 2,\n        caretSize: 5,\n        cornerRadius: 6,\n        boxHeight: (ctx, opts)=>opts.bodyFont.size,\n        boxWidth: (ctx, opts)=>opts.bodyFont.size,\n        multiKeyBackground: '#fff',\n        displayColors: true,\n        boxPadding: 0,\n        borderColor: 'rgba(0,0,0,0)',\n        borderWidth: 0,\n        animation: {\n            duration: 400,\n            easing: 'easeOutQuart'\n        },\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'x',\n                    'y',\n                    'width',\n                    'height',\n                    'caretX',\n                    'caretY'\n                ]\n            },\n            opacity: {\n                easing: 'linear',\n                duration: 200\n            }\n        },\n        callbacks: defaultCallbacks\n    },\n    defaultRoutes: {\n        bodyFont: 'font',\n        footerFont: 'font',\n        titleFont: 'font'\n    },\n    descriptors: {\n        _scriptable: (name)=>name !== 'filter' && name !== 'itemSort' && name !== 'external',\n        _indexable: false,\n        callbacks: {\n            _scriptable: false,\n            _indexable: false\n        },\n        animation: {\n            _fallback: false\n        },\n        animations: {\n            _fallback: 'animation'\n        }\n    },\n    additionalOptionScopes: [\n        'interaction'\n    ]\n};\n\nvar plugins = /*#__PURE__*/Object.freeze({\n__proto__: null,\nColors: plugin_colors,\nDecimation: plugin_decimation,\nFiller: index,\nLegend: plugin_legend,\nSubTitle: plugin_subtitle,\nTitle: plugin_title,\nTooltip: plugin_tooltip\n});\n\nconst addIfString = (labels, raw, index, addedLabels)=>{\n    if (typeof raw === 'string') {\n        index = labels.push(raw) - 1;\n        addedLabels.unshift({\n            index,\n            label: raw\n        });\n    } else if (isNaN(raw)) {\n        index = null;\n    }\n    return index;\n};\nfunction findOrAddLabel(labels, raw, index, addedLabels) {\n    const first = labels.indexOf(raw);\n    if (first === -1) {\n        return addIfString(labels, raw, index, addedLabels);\n    }\n    const last = labels.lastIndexOf(raw);\n    return first !== last ? index : first;\n}\nconst validIndex = (index, max)=>index === null ? null : _limitValue(Math.round(index), 0, max);\nfunction _getLabelForValue(value) {\n    const labels = this.getLabels();\n    if (value >= 0 && value < labels.length) {\n        return labels[value];\n    }\n    return value;\n}\nclass CategoryScale extends Scale {\n    static id = 'category';\n static defaults = {\n        ticks: {\n            callback: _getLabelForValue\n        }\n    };\n    constructor(cfg){\n        super(cfg);\n         this._startValue = undefined;\n        this._valueRange = 0;\n        this._addedLabels = [];\n    }\n    init(scaleOptions) {\n        const added = this._addedLabels;\n        if (added.length) {\n            const labels = this.getLabels();\n            for (const { index , label  } of added){\n                if (labels[index] === label) {\n                    labels.splice(index, 1);\n                }\n            }\n            this._addedLabels = [];\n        }\n        super.init(scaleOptions);\n    }\n    parse(raw, index) {\n        if (isNullOrUndef(raw)) {\n            return null;\n        }\n        const labels = this.getLabels();\n        index = isFinite(index) && labels[index] === raw ? index : findOrAddLabel(labels, raw, valueOrDefault(index, raw), this._addedLabels);\n        return validIndex(index, labels.length - 1);\n    }\n    determineDataLimits() {\n        const { minDefined , maxDefined  } = this.getUserBounds();\n        let { min , max  } = this.getMinMax(true);\n        if (this.options.bounds === 'ticks') {\n            if (!minDefined) {\n                min = 0;\n            }\n            if (!maxDefined) {\n                max = this.getLabels().length - 1;\n            }\n        }\n        this.min = min;\n        this.max = max;\n    }\n    buildTicks() {\n        const min = this.min;\n        const max = this.max;\n        const offset = this.options.offset;\n        const ticks = [];\n        let labels = this.getLabels();\n        labels = min === 0 && max === labels.length - 1 ? labels : labels.slice(min, max + 1);\n        this._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);\n        this._startValue = this.min - (offset ? 0.5 : 0);\n        for(let value = min; value <= max; value++){\n            ticks.push({\n                value\n            });\n        }\n        return ticks;\n    }\n    getLabelForValue(value) {\n        return _getLabelForValue.call(this, value);\n    }\n configure() {\n        super.configure();\n        if (!this.isHorizontal()) {\n            this._reversePixels = !this._reversePixels;\n        }\n    }\n    getPixelForValue(value) {\n        if (typeof value !== 'number') {\n            value = this.parse(value);\n        }\n        return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n    }\n    getPixelForTick(index) {\n        const ticks = this.ticks;\n        if (index < 0 || index > ticks.length - 1) {\n            return null;\n        }\n        return this.getPixelForValue(ticks[index].value);\n    }\n    getValueForPixel(pixel) {\n        return Math.round(this._startValue + this.getDecimalForPixel(pixel) * this._valueRange);\n    }\n    getBasePixel() {\n        return this.bottom;\n    }\n}\n\nfunction generateTicks$1(generationOptions, dataRange) {\n    const ticks = [];\n    const MIN_SPACING = 1e-14;\n    const { bounds , step , min , max , precision , count , maxTicks , maxDigits , includeBounds  } = generationOptions;\n    const unit = step || 1;\n    const maxSpaces = maxTicks - 1;\n    const { min: rmin , max: rmax  } = dataRange;\n    const minDefined = !isNullOrUndef(min);\n    const maxDefined = !isNullOrUndef(max);\n    const countDefined = !isNullOrUndef(count);\n    const minSpacing = (rmax - rmin) / (maxDigits + 1);\n    let spacing = niceNum((rmax - rmin) / maxSpaces / unit) * unit;\n    let factor, niceMin, niceMax, numSpaces;\n    if (spacing < MIN_SPACING && !minDefined && !maxDefined) {\n        return [\n            {\n                value: rmin\n            },\n            {\n                value: rmax\n            }\n        ];\n    }\n    numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);\n    if (numSpaces > maxSpaces) {\n        spacing = niceNum(numSpaces * spacing / maxSpaces / unit) * unit;\n    }\n    if (!isNullOrUndef(precision)) {\n        factor = Math.pow(10, precision);\n        spacing = Math.ceil(spacing * factor) / factor;\n    }\n    if (bounds === 'ticks') {\n        niceMin = Math.floor(rmin / spacing) * spacing;\n        niceMax = Math.ceil(rmax / spacing) * spacing;\n    } else {\n        niceMin = rmin;\n        niceMax = rmax;\n    }\n    if (minDefined && maxDefined && step && almostWhole((max - min) / step, spacing / 1000)) {\n        numSpaces = Math.round(Math.min((max - min) / spacing, maxTicks));\n        spacing = (max - min) / numSpaces;\n        niceMin = min;\n        niceMax = max;\n    } else if (countDefined) {\n        niceMin = minDefined ? min : niceMin;\n        niceMax = maxDefined ? max : niceMax;\n        numSpaces = count - 1;\n        spacing = (niceMax - niceMin) / numSpaces;\n    } else {\n        numSpaces = (niceMax - niceMin) / spacing;\n        if (almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {\n            numSpaces = Math.round(numSpaces);\n        } else {\n            numSpaces = Math.ceil(numSpaces);\n        }\n    }\n    const decimalPlaces = Math.max(_decimalPlaces(spacing), _decimalPlaces(niceMin));\n    factor = Math.pow(10, isNullOrUndef(precision) ? decimalPlaces : precision);\n    niceMin = Math.round(niceMin * factor) / factor;\n    niceMax = Math.round(niceMax * factor) / factor;\n    let j = 0;\n    if (minDefined) {\n        if (includeBounds && niceMin !== min) {\n            ticks.push({\n                value: min\n            });\n            if (niceMin < min) {\n                j++;\n            }\n            if (almostEquals(Math.round((niceMin + j * spacing) * factor) / factor, min, relativeLabelSize(min, minSpacing, generationOptions))) {\n                j++;\n            }\n        } else if (niceMin < min) {\n            j++;\n        }\n    }\n    for(; j < numSpaces; ++j){\n        const tickValue = Math.round((niceMin + j * spacing) * factor) / factor;\n        if (maxDefined && tickValue > max) {\n            break;\n        }\n        ticks.push({\n            value: tickValue\n        });\n    }\n    if (maxDefined && includeBounds && niceMax !== max) {\n        if (ticks.length && almostEquals(ticks[ticks.length - 1].value, max, relativeLabelSize(max, minSpacing, generationOptions))) {\n            ticks[ticks.length - 1].value = max;\n        } else {\n            ticks.push({\n                value: max\n            });\n        }\n    } else if (!maxDefined || niceMax === max) {\n        ticks.push({\n            value: niceMax\n        });\n    }\n    return ticks;\n}\nfunction relativeLabelSize(value, minSpacing, { horizontal , minRotation  }) {\n    const rad = toRadians(minRotation);\n    const ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 0.001;\n    const length = 0.75 * minSpacing * ('' + value).length;\n    return Math.min(minSpacing / ratio, length);\n}\nclass LinearScaleBase extends Scale {\n    constructor(cfg){\n        super(cfg);\n         this.start = undefined;\n         this.end = undefined;\n         this._startValue = undefined;\n         this._endValue = undefined;\n        this._valueRange = 0;\n    }\n    parse(raw, index) {\n        if (isNullOrUndef(raw)) {\n            return null;\n        }\n        if ((typeof raw === 'number' || raw instanceof Number) && !isFinite(+raw)) {\n            return null;\n        }\n        return +raw;\n    }\n    handleTickRangeOptions() {\n        const { beginAtZero  } = this.options;\n        const { minDefined , maxDefined  } = this.getUserBounds();\n        let { min , max  } = this;\n        const setMin = (v)=>min = minDefined ? min : v;\n        const setMax = (v)=>max = maxDefined ? max : v;\n        if (beginAtZero) {\n            const minSign = sign(min);\n            const maxSign = sign(max);\n            if (minSign < 0 && maxSign < 0) {\n                setMax(0);\n            } else if (minSign > 0 && maxSign > 0) {\n                setMin(0);\n            }\n        }\n        if (min === max) {\n            let offset = max === 0 ? 1 : Math.abs(max * 0.05);\n            setMax(max + offset);\n            if (!beginAtZero) {\n                setMin(min - offset);\n            }\n        }\n        this.min = min;\n        this.max = max;\n    }\n    getTickLimit() {\n        const tickOpts = this.options.ticks;\n        let { maxTicksLimit , stepSize  } = tickOpts;\n        let maxTicks;\n        if (stepSize) {\n            maxTicks = Math.ceil(this.max / stepSize) - Math.floor(this.min / stepSize) + 1;\n            if (maxTicks > 1000) {\n                console.warn(`scales.${this.id}.ticks.stepSize: ${stepSize} would result generating up to ${maxTicks} ticks. Limiting to 1000.`);\n                maxTicks = 1000;\n            }\n        } else {\n            maxTicks = this.computeTickLimit();\n            maxTicksLimit = maxTicksLimit || 11;\n        }\n        if (maxTicksLimit) {\n            maxTicks = Math.min(maxTicksLimit, maxTicks);\n        }\n        return maxTicks;\n    }\n computeTickLimit() {\n        return Number.POSITIVE_INFINITY;\n    }\n    buildTicks() {\n        const opts = this.options;\n        const tickOpts = opts.ticks;\n        let maxTicks = this.getTickLimit();\n        maxTicks = Math.max(2, maxTicks);\n        const numericGeneratorOptions = {\n            maxTicks,\n            bounds: opts.bounds,\n            min: opts.min,\n            max: opts.max,\n            precision: tickOpts.precision,\n            step: tickOpts.stepSize,\n            count: tickOpts.count,\n            maxDigits: this._maxDigits(),\n            horizontal: this.isHorizontal(),\n            minRotation: tickOpts.minRotation || 0,\n            includeBounds: tickOpts.includeBounds !== false\n        };\n        const dataRange = this._range || this;\n        const ticks = generateTicks$1(numericGeneratorOptions, dataRange);\n        if (opts.bounds === 'ticks') {\n            _setMinAndMaxByKey(ticks, this, 'value');\n        }\n        if (opts.reverse) {\n            ticks.reverse();\n            this.start = this.max;\n            this.end = this.min;\n        } else {\n            this.start = this.min;\n            this.end = this.max;\n        }\n        return ticks;\n    }\n configure() {\n        const ticks = this.ticks;\n        let start = this.min;\n        let end = this.max;\n        super.configure();\n        if (this.options.offset && ticks.length) {\n            const offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;\n            start -= offset;\n            end += offset;\n        }\n        this._startValue = start;\n        this._endValue = end;\n        this._valueRange = end - start;\n    }\n    getLabelForValue(value) {\n        return formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n    }\n}\n\nclass LinearScale extends LinearScaleBase {\n    static id = 'linear';\n static defaults = {\n        ticks: {\n            callback: Ticks.formatters.numeric\n        }\n    };\n    determineDataLimits() {\n        const { min , max  } = this.getMinMax(true);\n        this.min = isNumberFinite(min) ? min : 0;\n        this.max = isNumberFinite(max) ? max : 1;\n        this.handleTickRangeOptions();\n    }\n computeTickLimit() {\n        const horizontal = this.isHorizontal();\n        const length = horizontal ? this.width : this.height;\n        const minRotation = toRadians(this.options.ticks.minRotation);\n        const ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 0.001;\n        const tickFont = this._resolveTickFontOptions(0);\n        return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));\n    }\n    getPixelForValue(value) {\n        return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n    }\n    getValueForPixel(pixel) {\n        return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;\n    }\n}\n\nconst log10Floor = (v)=>Math.floor(log10(v));\nconst changeExponent = (v, m)=>Math.pow(10, log10Floor(v) + m);\nfunction isMajor(tickVal) {\n    const remain = tickVal / Math.pow(10, log10Floor(tickVal));\n    return remain === 1;\n}\nfunction steps(min, max, rangeExp) {\n    const rangeStep = Math.pow(10, rangeExp);\n    const start = Math.floor(min / rangeStep);\n    const end = Math.ceil(max / rangeStep);\n    return end - start;\n}\nfunction startExp(min, max) {\n    const range = max - min;\n    let rangeExp = log10Floor(range);\n    while(steps(min, max, rangeExp) > 10){\n        rangeExp++;\n    }\n    while(steps(min, max, rangeExp) < 10){\n        rangeExp--;\n    }\n    return Math.min(rangeExp, log10Floor(min));\n}\n function generateTicks(generationOptions, { min , max  }) {\n    min = finiteOrDefault(generationOptions.min, min);\n    const ticks = [];\n    const minExp = log10Floor(min);\n    let exp = startExp(min, max);\n    let precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;\n    const stepSize = Math.pow(10, exp);\n    const base = minExp > exp ? Math.pow(10, minExp) : 0;\n    const start = Math.round((min - base) * precision) / precision;\n    const offset = Math.floor((min - base) / stepSize / 10) * stepSize * 10;\n    let significand = Math.floor((start - offset) / Math.pow(10, exp));\n    let value = finiteOrDefault(generationOptions.min, Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision);\n    while(value < max){\n        ticks.push({\n            value,\n            major: isMajor(value),\n            significand\n        });\n        if (significand >= 10) {\n            significand = significand < 15 ? 15 : 20;\n        } else {\n            significand++;\n        }\n        if (significand >= 20) {\n            exp++;\n            significand = 2;\n            precision = exp >= 0 ? 1 : precision;\n        }\n        value = Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision;\n    }\n    const lastTick = finiteOrDefault(generationOptions.max, value);\n    ticks.push({\n        value: lastTick,\n        major: isMajor(lastTick),\n        significand\n    });\n    return ticks;\n}\nclass LogarithmicScale extends Scale {\n    static id = 'logarithmic';\n static defaults = {\n        ticks: {\n            callback: Ticks.formatters.logarithmic,\n            major: {\n                enabled: true\n            }\n        }\n    };\n    constructor(cfg){\n        super(cfg);\n         this.start = undefined;\n         this.end = undefined;\n         this._startValue = undefined;\n        this._valueRange = 0;\n    }\n    parse(raw, index) {\n        const value = LinearScaleBase.prototype.parse.apply(this, [\n            raw,\n            index\n        ]);\n        if (value === 0) {\n            this._zero = true;\n            return undefined;\n        }\n        return isNumberFinite(value) && value > 0 ? value : null;\n    }\n    determineDataLimits() {\n        const { min , max  } = this.getMinMax(true);\n        this.min = isNumberFinite(min) ? Math.max(0, min) : null;\n        this.max = isNumberFinite(max) ? Math.max(0, max) : null;\n        if (this.options.beginAtZero) {\n            this._zero = true;\n        }\n        if (this._zero && this.min !== this._suggestedMin && !isNumberFinite(this._userMin)) {\n            this.min = min === changeExponent(this.min, 0) ? changeExponent(this.min, -1) : changeExponent(this.min, 0);\n        }\n        this.handleTickRangeOptions();\n    }\n    handleTickRangeOptions() {\n        const { minDefined , maxDefined  } = this.getUserBounds();\n        let min = this.min;\n        let max = this.max;\n        const setMin = (v)=>min = minDefined ? min : v;\n        const setMax = (v)=>max = maxDefined ? max : v;\n        if (min === max) {\n            if (min <= 0) {\n                setMin(1);\n                setMax(10);\n            } else {\n                setMin(changeExponent(min, -1));\n                setMax(changeExponent(max, +1));\n            }\n        }\n        if (min <= 0) {\n            setMin(changeExponent(max, -1));\n        }\n        if (max <= 0) {\n            setMax(changeExponent(min, +1));\n        }\n        this.min = min;\n        this.max = max;\n    }\n    buildTicks() {\n        const opts = this.options;\n        const generationOptions = {\n            min: this._userMin,\n            max: this._userMax\n        };\n        const ticks = generateTicks(generationOptions, this);\n        if (opts.bounds === 'ticks') {\n            _setMinAndMaxByKey(ticks, this, 'value');\n        }\n        if (opts.reverse) {\n            ticks.reverse();\n            this.start = this.max;\n            this.end = this.min;\n        } else {\n            this.start = this.min;\n            this.end = this.max;\n        }\n        return ticks;\n    }\n getLabelForValue(value) {\n        return value === undefined ? '0' : formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n    }\n configure() {\n        const start = this.min;\n        super.configure();\n        this._startValue = log10(start);\n        this._valueRange = log10(this.max) - log10(start);\n    }\n    getPixelForValue(value) {\n        if (value === undefined || value === 0) {\n            value = this.min;\n        }\n        if (value === null || isNaN(value)) {\n            return NaN;\n        }\n        return this.getPixelForDecimal(value === this.min ? 0 : (log10(value) - this._startValue) / this._valueRange);\n    }\n    getValueForPixel(pixel) {\n        const decimal = this.getDecimalForPixel(pixel);\n        return Math.pow(10, this._startValue + decimal * this._valueRange);\n    }\n}\n\nfunction getTickBackdropHeight(opts) {\n    const tickOpts = opts.ticks;\n    if (tickOpts.display && opts.display) {\n        const padding = toPadding(tickOpts.backdropPadding);\n        return valueOrDefault(tickOpts.font && tickOpts.font.size, defaults.font.size) + padding.height;\n    }\n    return 0;\n}\nfunction measureLabelSize(ctx, font, label) {\n    label = isArray(label) ? label : [\n        label\n    ];\n    return {\n        w: _longestText(ctx, font.string, label),\n        h: label.length * font.lineHeight\n    };\n}\nfunction determineLimits(angle, pos, size, min, max) {\n    if (angle === min || angle === max) {\n        return {\n            start: pos - size / 2,\n            end: pos + size / 2\n        };\n    } else if (angle < min || angle > max) {\n        return {\n            start: pos - size,\n            end: pos\n        };\n    }\n    return {\n        start: pos,\n        end: pos + size\n    };\n}\n function fitWithPointLabels(scale) {\n    const orig = {\n        l: scale.left + scale._padding.left,\n        r: scale.right - scale._padding.right,\n        t: scale.top + scale._padding.top,\n        b: scale.bottom - scale._padding.bottom\n    };\n    const limits = Object.assign({}, orig);\n    const labelSizes = [];\n    const padding = [];\n    const valueCount = scale._pointLabels.length;\n    const pointLabelOpts = scale.options.pointLabels;\n    const additionalAngle = pointLabelOpts.centerPointLabels ? PI / valueCount : 0;\n    for(let i = 0; i < valueCount; i++){\n        const opts = pointLabelOpts.setContext(scale.getPointLabelContext(i));\n        padding[i] = opts.padding;\n        const pointPosition = scale.getPointPosition(i, scale.drawingArea + padding[i], additionalAngle);\n        const plFont = toFont(opts.font);\n        const textSize = measureLabelSize(scale.ctx, plFont, scale._pointLabels[i]);\n        labelSizes[i] = textSize;\n        const angleRadians = _normalizeAngle(scale.getIndexAngle(i) + additionalAngle);\n        const angle = Math.round(toDegrees(angleRadians));\n        const hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);\n        const vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);\n        updateLimits(limits, orig, angleRadians, hLimits, vLimits);\n    }\n    scale.setCenterPoint(orig.l - limits.l, limits.r - orig.r, orig.t - limits.t, limits.b - orig.b);\n    scale._pointLabelItems = buildPointLabelItems(scale, labelSizes, padding);\n}\nfunction updateLimits(limits, orig, angle, hLimits, vLimits) {\n    const sin = Math.abs(Math.sin(angle));\n    const cos = Math.abs(Math.cos(angle));\n    let x = 0;\n    let y = 0;\n    if (hLimits.start < orig.l) {\n        x = (orig.l - hLimits.start) / sin;\n        limits.l = Math.min(limits.l, orig.l - x);\n    } else if (hLimits.end > orig.r) {\n        x = (hLimits.end - orig.r) / sin;\n        limits.r = Math.max(limits.r, orig.r + x);\n    }\n    if (vLimits.start < orig.t) {\n        y = (orig.t - vLimits.start) / cos;\n        limits.t = Math.min(limits.t, orig.t - y);\n    } else if (vLimits.end > orig.b) {\n        y = (vLimits.end - orig.b) / cos;\n        limits.b = Math.max(limits.b, orig.b + y);\n    }\n}\nfunction createPointLabelItem(scale, index, itemOpts) {\n    const outerDistance = scale.drawingArea;\n    const { extra , additionalAngle , padding , size  } = itemOpts;\n    const pointLabelPosition = scale.getPointPosition(index, outerDistance + extra + padding, additionalAngle);\n    const angle = Math.round(toDegrees(_normalizeAngle(pointLabelPosition.angle + HALF_PI)));\n    const y = yForAngle(pointLabelPosition.y, size.h, angle);\n    const textAlign = getTextAlignForAngle(angle);\n    const left = leftForTextAlign(pointLabelPosition.x, size.w, textAlign);\n    return {\n        visible: true,\n        x: pointLabelPosition.x,\n        y,\n        textAlign,\n        left,\n        top: y,\n        right: left + size.w,\n        bottom: y + size.h\n    };\n}\nfunction isNotOverlapped(item, area) {\n    if (!area) {\n        return true;\n    }\n    const { left , top , right , bottom  } = item;\n    const apexesInArea = _isPointInArea({\n        x: left,\n        y: top\n    }, area) || _isPointInArea({\n        x: left,\n        y: bottom\n    }, area) || _isPointInArea({\n        x: right,\n        y: top\n    }, area) || _isPointInArea({\n        x: right,\n        y: bottom\n    }, area);\n    return !apexesInArea;\n}\nfunction buildPointLabelItems(scale, labelSizes, padding) {\n    const items = [];\n    const valueCount = scale._pointLabels.length;\n    const opts = scale.options;\n    const { centerPointLabels , display  } = opts.pointLabels;\n    const itemOpts = {\n        extra: getTickBackdropHeight(opts) / 2,\n        additionalAngle: centerPointLabels ? PI / valueCount : 0\n    };\n    let area;\n    for(let i = 0; i < valueCount; i++){\n        itemOpts.padding = padding[i];\n        itemOpts.size = labelSizes[i];\n        const item = createPointLabelItem(scale, i, itemOpts);\n        items.push(item);\n        if (display === 'auto') {\n            item.visible = isNotOverlapped(item, area);\n            if (item.visible) {\n                area = item;\n            }\n        }\n    }\n    return items;\n}\nfunction getTextAlignForAngle(angle) {\n    if (angle === 0 || angle === 180) {\n        return 'center';\n    } else if (angle < 180) {\n        return 'left';\n    }\n    return 'right';\n}\nfunction leftForTextAlign(x, w, align) {\n    if (align === 'right') {\n        x -= w;\n    } else if (align === 'center') {\n        x -= w / 2;\n    }\n    return x;\n}\nfunction yForAngle(y, h, angle) {\n    if (angle === 90 || angle === 270) {\n        y -= h / 2;\n    } else if (angle > 270 || angle < 90) {\n        y -= h;\n    }\n    return y;\n}\nfunction drawPointLabelBox(ctx, opts, item) {\n    const { left , top , right , bottom  } = item;\n    const { backdropColor  } = opts;\n    if (!isNullOrUndef(backdropColor)) {\n        const borderRadius = toTRBLCorners(opts.borderRadius);\n        const padding = toPadding(opts.backdropPadding);\n        ctx.fillStyle = backdropColor;\n        const backdropLeft = left - padding.left;\n        const backdropTop = top - padding.top;\n        const backdropWidth = right - left + padding.width;\n        const backdropHeight = bottom - top + padding.height;\n        if (Object.values(borderRadius).some((v)=>v !== 0)) {\n            ctx.beginPath();\n            addRoundedRectPath(ctx, {\n                x: backdropLeft,\n                y: backdropTop,\n                w: backdropWidth,\n                h: backdropHeight,\n                radius: borderRadius\n            });\n            ctx.fill();\n        } else {\n            ctx.fillRect(backdropLeft, backdropTop, backdropWidth, backdropHeight);\n        }\n    }\n}\nfunction drawPointLabels(scale, labelCount) {\n    const { ctx , options: { pointLabels  }  } = scale;\n    for(let i = labelCount - 1; i >= 0; i--){\n        const item = scale._pointLabelItems[i];\n        if (!item.visible) {\n            continue;\n        }\n        const optsAtIndex = pointLabels.setContext(scale.getPointLabelContext(i));\n        drawPointLabelBox(ctx, optsAtIndex, item);\n        const plFont = toFont(optsAtIndex.font);\n        const { x , y , textAlign  } = item;\n        renderText(ctx, scale._pointLabels[i], x, y + plFont.lineHeight / 2, plFont, {\n            color: optsAtIndex.color,\n            textAlign: textAlign,\n            textBaseline: 'middle'\n        });\n    }\n}\nfunction pathRadiusLine(scale, radius, circular, labelCount) {\n    const { ctx  } = scale;\n    if (circular) {\n        ctx.arc(scale.xCenter, scale.yCenter, radius, 0, TAU);\n    } else {\n        let pointPosition = scale.getPointPosition(0, radius);\n        ctx.moveTo(pointPosition.x, pointPosition.y);\n        for(let i = 1; i < labelCount; i++){\n            pointPosition = scale.getPointPosition(i, radius);\n            ctx.lineTo(pointPosition.x, pointPosition.y);\n        }\n    }\n}\nfunction drawRadiusLine(scale, gridLineOpts, radius, labelCount, borderOpts) {\n    const ctx = scale.ctx;\n    const circular = gridLineOpts.circular;\n    const { color , lineWidth  } = gridLineOpts;\n    if (!circular && !labelCount || !color || !lineWidth || radius < 0) {\n        return;\n    }\n    ctx.save();\n    ctx.strokeStyle = color;\n    ctx.lineWidth = lineWidth;\n    ctx.setLineDash(borderOpts.dash);\n    ctx.lineDashOffset = borderOpts.dashOffset;\n    ctx.beginPath();\n    pathRadiusLine(scale, radius, circular, labelCount);\n    ctx.closePath();\n    ctx.stroke();\n    ctx.restore();\n}\nfunction createPointLabelContext(parent, index, label) {\n    return createContext(parent, {\n        label,\n        index,\n        type: 'pointLabel'\n    });\n}\nclass RadialLinearScale extends LinearScaleBase {\n    static id = 'radialLinear';\n static defaults = {\n        display: true,\n        animate: true,\n        position: 'chartArea',\n        angleLines: {\n            display: true,\n            lineWidth: 1,\n            borderDash: [],\n            borderDashOffset: 0.0\n        },\n        grid: {\n            circular: false\n        },\n        startAngle: 0,\n        ticks: {\n            showLabelBackdrop: true,\n            callback: Ticks.formatters.numeric\n        },\n        pointLabels: {\n            backdropColor: undefined,\n            backdropPadding: 2,\n            display: true,\n            font: {\n                size: 10\n            },\n            callback (label) {\n                return label;\n            },\n            padding: 5,\n            centerPointLabels: false\n        }\n    };\n    static defaultRoutes = {\n        'angleLines.color': 'borderColor',\n        'pointLabels.color': 'color',\n        'ticks.color': 'color'\n    };\n    static descriptors = {\n        angleLines: {\n            _fallback: 'grid'\n        }\n    };\n    constructor(cfg){\n        super(cfg);\n         this.xCenter = undefined;\n         this.yCenter = undefined;\n         this.drawingArea = undefined;\n         this._pointLabels = [];\n        this._pointLabelItems = [];\n    }\n    setDimensions() {\n        const padding = this._padding = toPadding(getTickBackdropHeight(this.options) / 2);\n        const w = this.width = this.maxWidth - padding.width;\n        const h = this.height = this.maxHeight - padding.height;\n        this.xCenter = Math.floor(this.left + w / 2 + padding.left);\n        this.yCenter = Math.floor(this.top + h / 2 + padding.top);\n        this.drawingArea = Math.floor(Math.min(w, h) / 2);\n    }\n    determineDataLimits() {\n        const { min , max  } = this.getMinMax(false);\n        this.min = isNumberFinite(min) && !isNaN(min) ? min : 0;\n        this.max = isNumberFinite(max) && !isNaN(max) ? max : 0;\n        this.handleTickRangeOptions();\n    }\n computeTickLimit() {\n        return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));\n    }\n    generateTickLabels(ticks) {\n        LinearScaleBase.prototype.generateTickLabels.call(this, ticks);\n        this._pointLabels = this.getLabels().map((value, index)=>{\n            const label = callback(this.options.pointLabels.callback, [\n                value,\n                index\n            ], this);\n            return label || label === 0 ? label : '';\n        }).filter((v, i)=>this.chart.getDataVisibility(i));\n    }\n    fit() {\n        const opts = this.options;\n        if (opts.display && opts.pointLabels.display) {\n            fitWithPointLabels(this);\n        } else {\n            this.setCenterPoint(0, 0, 0, 0);\n        }\n    }\n    setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {\n        this.xCenter += Math.floor((leftMovement - rightMovement) / 2);\n        this.yCenter += Math.floor((topMovement - bottomMovement) / 2);\n        this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(leftMovement, rightMovement, topMovement, bottomMovement));\n    }\n    getIndexAngle(index) {\n        const angleMultiplier = TAU / (this._pointLabels.length || 1);\n        const startAngle = this.options.startAngle || 0;\n        return _normalizeAngle(index * angleMultiplier + toRadians(startAngle));\n    }\n    getDistanceFromCenterForValue(value) {\n        if (isNullOrUndef(value)) {\n            return NaN;\n        }\n        const scalingFactor = this.drawingArea / (this.max - this.min);\n        if (this.options.reverse) {\n            return (this.max - value) * scalingFactor;\n        }\n        return (value - this.min) * scalingFactor;\n    }\n    getValueForDistanceFromCenter(distance) {\n        if (isNullOrUndef(distance)) {\n            return NaN;\n        }\n        const scaledDistance = distance / (this.drawingArea / (this.max - this.min));\n        return this.options.reverse ? this.max - scaledDistance : this.min + scaledDistance;\n    }\n    getPointLabelContext(index) {\n        const pointLabels = this._pointLabels || [];\n        if (index >= 0 && index < pointLabels.length) {\n            const pointLabel = pointLabels[index];\n            return createPointLabelContext(this.getContext(), index, pointLabel);\n        }\n    }\n    getPointPosition(index, distanceFromCenter, additionalAngle = 0) {\n        const angle = this.getIndexAngle(index) - HALF_PI + additionalAngle;\n        return {\n            x: Math.cos(angle) * distanceFromCenter + this.xCenter,\n            y: Math.sin(angle) * distanceFromCenter + this.yCenter,\n            angle\n        };\n    }\n    getPointPositionForValue(index, value) {\n        return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));\n    }\n    getBasePosition(index) {\n        return this.getPointPositionForValue(index || 0, this.getBaseValue());\n    }\n    getPointLabelPosition(index) {\n        const { left , top , right , bottom  } = this._pointLabelItems[index];\n        return {\n            left,\n            top,\n            right,\n            bottom\n        };\n    }\n drawBackground() {\n        const { backgroundColor , grid: { circular  }  } = this.options;\n        if (backgroundColor) {\n            const ctx = this.ctx;\n            ctx.save();\n            ctx.beginPath();\n            pathRadiusLine(this, this.getDistanceFromCenterForValue(this._endValue), circular, this._pointLabels.length);\n            ctx.closePath();\n            ctx.fillStyle = backgroundColor;\n            ctx.fill();\n            ctx.restore();\n        }\n    }\n drawGrid() {\n        const ctx = this.ctx;\n        const opts = this.options;\n        const { angleLines , grid , border  } = opts;\n        const labelCount = this._pointLabels.length;\n        let i, offset, position;\n        if (opts.pointLabels.display) {\n            drawPointLabels(this, labelCount);\n        }\n        if (grid.display) {\n            this.ticks.forEach((tick, index)=>{\n                if (index !== 0 || index === 0 && this.min < 0) {\n                    offset = this.getDistanceFromCenterForValue(tick.value);\n                    const context = this.getContext(index);\n                    const optsAtIndex = grid.setContext(context);\n                    const optsAtIndexBorder = border.setContext(context);\n                    drawRadiusLine(this, optsAtIndex, offset, labelCount, optsAtIndexBorder);\n                }\n            });\n        }\n        if (angleLines.display) {\n            ctx.save();\n            for(i = labelCount - 1; i >= 0; i--){\n                const optsAtIndex = angleLines.setContext(this.getPointLabelContext(i));\n                const { color , lineWidth  } = optsAtIndex;\n                if (!lineWidth || !color) {\n                    continue;\n                }\n                ctx.lineWidth = lineWidth;\n                ctx.strokeStyle = color;\n                ctx.setLineDash(optsAtIndex.borderDash);\n                ctx.lineDashOffset = optsAtIndex.borderDashOffset;\n                offset = this.getDistanceFromCenterForValue(opts.ticks.reverse ? this.min : this.max);\n                position = this.getPointPosition(i, offset);\n                ctx.beginPath();\n                ctx.moveTo(this.xCenter, this.yCenter);\n                ctx.lineTo(position.x, position.y);\n                ctx.stroke();\n            }\n            ctx.restore();\n        }\n    }\n drawBorder() {}\n drawLabels() {\n        const ctx = this.ctx;\n        const opts = this.options;\n        const tickOpts = opts.ticks;\n        if (!tickOpts.display) {\n            return;\n        }\n        const startAngle = this.getIndexAngle(0);\n        let offset, width;\n        ctx.save();\n        ctx.translate(this.xCenter, this.yCenter);\n        ctx.rotate(startAngle);\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'middle';\n        this.ticks.forEach((tick, index)=>{\n            if (index === 0 && this.min >= 0 && !opts.reverse) {\n                return;\n            }\n            const optsAtIndex = tickOpts.setContext(this.getContext(index));\n            const tickFont = toFont(optsAtIndex.font);\n            offset = this.getDistanceFromCenterForValue(this.ticks[index].value);\n            if (optsAtIndex.showLabelBackdrop) {\n                ctx.font = tickFont.string;\n                width = ctx.measureText(tick.label).width;\n                ctx.fillStyle = optsAtIndex.backdropColor;\n                const padding = toPadding(optsAtIndex.backdropPadding);\n                ctx.fillRect(-width / 2 - padding.left, -offset - tickFont.size / 2 - padding.top, width + padding.width, tickFont.size + padding.height);\n            }\n            renderText(ctx, tick.label, 0, -offset, tickFont, {\n                color: optsAtIndex.color,\n                strokeColor: optsAtIndex.textStrokeColor,\n                strokeWidth: optsAtIndex.textStrokeWidth\n            });\n        });\n        ctx.restore();\n    }\n drawTitle() {}\n}\n\nconst INTERVALS = {\n    millisecond: {\n        common: true,\n        size: 1,\n        steps: 1000\n    },\n    second: {\n        common: true,\n        size: 1000,\n        steps: 60\n    },\n    minute: {\n        common: true,\n        size: 60000,\n        steps: 60\n    },\n    hour: {\n        common: true,\n        size: 3600000,\n        steps: 24\n    },\n    day: {\n        common: true,\n        size: 86400000,\n        steps: 30\n    },\n    week: {\n        common: false,\n        size: 604800000,\n        steps: 4\n    },\n    month: {\n        common: true,\n        size: 2.628e9,\n        steps: 12\n    },\n    quarter: {\n        common: false,\n        size: 7.884e9,\n        steps: 4\n    },\n    year: {\n        common: true,\n        size: 3.154e10\n    }\n};\n const UNITS =  /* #__PURE__ */ Object.keys(INTERVALS);\n function sorter(a, b) {\n    return a - b;\n}\n function parse(scale, input) {\n    if (isNullOrUndef(input)) {\n        return null;\n    }\n    const adapter = scale._adapter;\n    const { parser , round , isoWeekday  } = scale._parseOpts;\n    let value = input;\n    if (typeof parser === 'function') {\n        value = parser(value);\n    }\n    if (!isNumberFinite(value)) {\n        value = typeof parser === 'string' ? adapter.parse(value,  parser) : adapter.parse(value);\n    }\n    if (value === null) {\n        return null;\n    }\n    if (round) {\n        value = round === 'week' && (isNumber(isoWeekday) || isoWeekday === true) ? adapter.startOf(value, 'isoWeek', isoWeekday) : adapter.startOf(value, round);\n    }\n    return +value;\n}\n function determineUnitForAutoTicks(minUnit, min, max, capacity) {\n    const ilen = UNITS.length;\n    for(let i = UNITS.indexOf(minUnit); i < ilen - 1; ++i){\n        const interval = INTERVALS[UNITS[i]];\n        const factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;\n        if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {\n            return UNITS[i];\n        }\n    }\n    return UNITS[ilen - 1];\n}\n function determineUnitForFormatting(scale, numTicks, minUnit, min, max) {\n    for(let i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--){\n        const unit = UNITS[i];\n        if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {\n            return unit;\n        }\n    }\n    return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];\n}\n function determineMajorUnit(unit) {\n    for(let i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i){\n        if (INTERVALS[UNITS[i]].common) {\n            return UNITS[i];\n        }\n    }\n}\n function addTick(ticks, time, timestamps) {\n    if (!timestamps) {\n        ticks[time] = true;\n    } else if (timestamps.length) {\n        const { lo , hi  } = _lookup(timestamps, time);\n        const timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];\n        ticks[timestamp] = true;\n    }\n}\n function setMajorTicks(scale, ticks, map, majorUnit) {\n    const adapter = scale._adapter;\n    const first = +adapter.startOf(ticks[0].value, majorUnit);\n    const last = ticks[ticks.length - 1].value;\n    let major, index;\n    for(major = first; major <= last; major = +adapter.add(major, 1, majorUnit)){\n        index = map[major];\n        if (index >= 0) {\n            ticks[index].major = true;\n        }\n    }\n    return ticks;\n}\n function ticksFromTimestamps(scale, values, majorUnit) {\n    const ticks = [];\n     const map = {};\n    const ilen = values.length;\n    let i, value;\n    for(i = 0; i < ilen; ++i){\n        value = values[i];\n        map[value] = i;\n        ticks.push({\n            value,\n            major: false\n        });\n    }\n    return ilen === 0 || !majorUnit ? ticks : setMajorTicks(scale, ticks, map, majorUnit);\n}\nclass TimeScale extends Scale {\n    static id = 'time';\n static defaults = {\n bounds: 'data',\n        adapters: {},\n        time: {\n            parser: false,\n            unit: false,\n            round: false,\n            isoWeekday: false,\n            minUnit: 'millisecond',\n            displayFormats: {}\n        },\n        ticks: {\n source: 'auto',\n            callback: false,\n            major: {\n                enabled: false\n            }\n        }\n    };\n constructor(props){\n        super(props);\n         this._cache = {\n            data: [],\n            labels: [],\n            all: []\n        };\n         this._unit = 'day';\n         this._majorUnit = undefined;\n        this._offsets = {};\n        this._normalized = false;\n        this._parseOpts = undefined;\n    }\n    init(scaleOpts, opts = {}) {\n        const time = scaleOpts.time || (scaleOpts.time = {});\n         const adapter = this._adapter = new adapters._date(scaleOpts.adapters.date);\n        adapter.init(opts);\n        mergeIf(time.displayFormats, adapter.formats());\n        this._parseOpts = {\n            parser: time.parser,\n            round: time.round,\n            isoWeekday: time.isoWeekday\n        };\n        super.init(scaleOpts);\n        this._normalized = opts.normalized;\n    }\n parse(raw, index) {\n        if (raw === undefined) {\n            return null;\n        }\n        return parse(this, raw);\n    }\n    beforeLayout() {\n        super.beforeLayout();\n        this._cache = {\n            data: [],\n            labels: [],\n            all: []\n        };\n    }\n    determineDataLimits() {\n        const options = this.options;\n        const adapter = this._adapter;\n        const unit = options.time.unit || 'day';\n        let { min , max , minDefined , maxDefined  } = this.getUserBounds();\n function _applyBounds(bounds) {\n            if (!minDefined && !isNaN(bounds.min)) {\n                min = Math.min(min, bounds.min);\n            }\n            if (!maxDefined && !isNaN(bounds.max)) {\n                max = Math.max(max, bounds.max);\n            }\n        }\n        if (!minDefined || !maxDefined) {\n            _applyBounds(this._getLabelBounds());\n            if (options.bounds !== 'ticks' || options.ticks.source !== 'labels') {\n                _applyBounds(this.getMinMax(false));\n            }\n        }\n        min = isNumberFinite(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);\n        max = isNumberFinite(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;\n        this.min = Math.min(min, max - 1);\n        this.max = Math.max(min + 1, max);\n    }\n _getLabelBounds() {\n        const arr = this.getLabelTimestamps();\n        let min = Number.POSITIVE_INFINITY;\n        let max = Number.NEGATIVE_INFINITY;\n        if (arr.length) {\n            min = arr[0];\n            max = arr[arr.length - 1];\n        }\n        return {\n            min,\n            max\n        };\n    }\n buildTicks() {\n        const options = this.options;\n        const timeOpts = options.time;\n        const tickOpts = options.ticks;\n        const timestamps = tickOpts.source === 'labels' ? this.getLabelTimestamps() : this._generate();\n        if (options.bounds === 'ticks' && timestamps.length) {\n            this.min = this._userMin || timestamps[0];\n            this.max = this._userMax || timestamps[timestamps.length - 1];\n        }\n        const min = this.min;\n        const max = this.max;\n        const ticks = _filterBetween(timestamps, min, max);\n        this._unit = timeOpts.unit || (tickOpts.autoSkip ? determineUnitForAutoTicks(timeOpts.minUnit, this.min, this.max, this._getLabelCapacity(min)) : determineUnitForFormatting(this, ticks.length, timeOpts.minUnit, this.min, this.max));\n        this._majorUnit = !tickOpts.major.enabled || this._unit === 'year' ? undefined : determineMajorUnit(this._unit);\n        this.initOffsets(timestamps);\n        if (options.reverse) {\n            ticks.reverse();\n        }\n        return ticksFromTimestamps(this, ticks, this._majorUnit);\n    }\n    afterAutoSkip() {\n        if (this.options.offsetAfterAutoskip) {\n            this.initOffsets(this.ticks.map((tick)=>+tick.value));\n        }\n    }\n initOffsets(timestamps = []) {\n        let start = 0;\n        let end = 0;\n        let first, last;\n        if (this.options.offset && timestamps.length) {\n            first = this.getDecimalForValue(timestamps[0]);\n            if (timestamps.length === 1) {\n                start = 1 - first;\n            } else {\n                start = (this.getDecimalForValue(timestamps[1]) - first) / 2;\n            }\n            last = this.getDecimalForValue(timestamps[timestamps.length - 1]);\n            if (timestamps.length === 1) {\n                end = last;\n            } else {\n                end = (last - this.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;\n            }\n        }\n        const limit = timestamps.length < 3 ? 0.5 : 0.25;\n        start = _limitValue(start, 0, limit);\n        end = _limitValue(end, 0, limit);\n        this._offsets = {\n            start,\n            end,\n            factor: 1 / (start + 1 + end)\n        };\n    }\n _generate() {\n        const adapter = this._adapter;\n        const min = this.min;\n        const max = this.max;\n        const options = this.options;\n        const timeOpts = options.time;\n        const minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, this._getLabelCapacity(min));\n        const stepSize = valueOrDefault(options.ticks.stepSize, 1);\n        const weekday = minor === 'week' ? timeOpts.isoWeekday : false;\n        const hasWeekday = isNumber(weekday) || weekday === true;\n        const ticks = {};\n        let first = min;\n        let time, count;\n        if (hasWeekday) {\n            first = +adapter.startOf(first, 'isoWeek', weekday);\n        }\n        first = +adapter.startOf(first, hasWeekday ? 'day' : minor);\n        if (adapter.diff(max, min, minor) > 100000 * stepSize) {\n            throw new Error(min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor);\n        }\n        const timestamps = options.ticks.source === 'data' && this.getDataTimestamps();\n        for(time = first, count = 0; time < max; time = +adapter.add(time, stepSize, minor), count++){\n            addTick(ticks, time, timestamps);\n        }\n        if (time === max || options.bounds === 'ticks' || count === 1) {\n            addTick(ticks, time, timestamps);\n        }\n        return Object.keys(ticks).sort(sorter).map((x)=>+x);\n    }\n getLabelForValue(value) {\n        const adapter = this._adapter;\n        const timeOpts = this.options.time;\n        if (timeOpts.tooltipFormat) {\n            return adapter.format(value, timeOpts.tooltipFormat);\n        }\n        return adapter.format(value, timeOpts.displayFormats.datetime);\n    }\n format(value, format) {\n        const options = this.options;\n        const formats = options.time.displayFormats;\n        const unit = this._unit;\n        const fmt = format || formats[unit];\n        return this._adapter.format(value, fmt);\n    }\n _tickFormatFunction(time, index, ticks, format) {\n        const options = this.options;\n        const formatter = options.ticks.callback;\n        if (formatter) {\n            return callback(formatter, [\n                time,\n                index,\n                ticks\n            ], this);\n        }\n        const formats = options.time.displayFormats;\n        const unit = this._unit;\n        const majorUnit = this._majorUnit;\n        const minorFormat = unit && formats[unit];\n        const majorFormat = majorUnit && formats[majorUnit];\n        const tick = ticks[index];\n        const major = majorUnit && majorFormat && tick && tick.major;\n        return this._adapter.format(time, format || (major ? majorFormat : minorFormat));\n    }\n generateTickLabels(ticks) {\n        let i, ilen, tick;\n        for(i = 0, ilen = ticks.length; i < ilen; ++i){\n            tick = ticks[i];\n            tick.label = this._tickFormatFunction(tick.value, i, ticks);\n        }\n    }\n getDecimalForValue(value) {\n        return value === null ? NaN : (value - this.min) / (this.max - this.min);\n    }\n getPixelForValue(value) {\n        const offsets = this._offsets;\n        const pos = this.getDecimalForValue(value);\n        return this.getPixelForDecimal((offsets.start + pos) * offsets.factor);\n    }\n getValueForPixel(pixel) {\n        const offsets = this._offsets;\n        const pos = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n        return this.min + pos * (this.max - this.min);\n    }\n _getLabelSize(label) {\n        const ticksOpts = this.options.ticks;\n        const tickLabelWidth = this.ctx.measureText(label).width;\n        const angle = toRadians(this.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);\n        const cosRotation = Math.cos(angle);\n        const sinRotation = Math.sin(angle);\n        const tickFontSize = this._resolveTickFontOptions(0).size;\n        return {\n            w: tickLabelWidth * cosRotation + tickFontSize * sinRotation,\n            h: tickLabelWidth * sinRotation + tickFontSize * cosRotation\n        };\n    }\n _getLabelCapacity(exampleTime) {\n        const timeOpts = this.options.time;\n        const displayFormats = timeOpts.displayFormats;\n        const format = displayFormats[timeOpts.unit] || displayFormats.millisecond;\n        const exampleLabel = this._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(this, [\n            exampleTime\n        ], this._majorUnit), format);\n        const size = this._getLabelSize(exampleLabel);\n        const capacity = Math.floor(this.isHorizontal() ? this.width / size.w : this.height / size.h) - 1;\n        return capacity > 0 ? capacity : 1;\n    }\n getDataTimestamps() {\n        let timestamps = this._cache.data || [];\n        let i, ilen;\n        if (timestamps.length) {\n            return timestamps;\n        }\n        const metas = this.getMatchingVisibleMetas();\n        if (this._normalized && metas.length) {\n            return this._cache.data = metas[0].controller.getAllParsedValues(this);\n        }\n        for(i = 0, ilen = metas.length; i < ilen; ++i){\n            timestamps = timestamps.concat(metas[i].controller.getAllParsedValues(this));\n        }\n        return this._cache.data = this.normalize(timestamps);\n    }\n getLabelTimestamps() {\n        const timestamps = this._cache.labels || [];\n        let i, ilen;\n        if (timestamps.length) {\n            return timestamps;\n        }\n        const labels = this.getLabels();\n        for(i = 0, ilen = labels.length; i < ilen; ++i){\n            timestamps.push(parse(this, labels[i]));\n        }\n        return this._cache.labels = this._normalized ? timestamps : this.normalize(timestamps);\n    }\n normalize(values) {\n        return _arrayUnique(values.sort(sorter));\n    }\n}\n\nfunction interpolate(table, val, reverse) {\n    let lo = 0;\n    let hi = table.length - 1;\n    let prevSource, nextSource, prevTarget, nextTarget;\n    if (reverse) {\n        if (val >= table[lo].pos && val <= table[hi].pos) {\n            ({ lo , hi  } = _lookupByKey(table, 'pos', val));\n        }\n        ({ pos: prevSource , time: prevTarget  } = table[lo]);\n        ({ pos: nextSource , time: nextTarget  } = table[hi]);\n    } else {\n        if (val >= table[lo].time && val <= table[hi].time) {\n            ({ lo , hi  } = _lookupByKey(table, 'time', val));\n        }\n        ({ time: prevSource , pos: prevTarget  } = table[lo]);\n        ({ time: nextSource , pos: nextTarget  } = table[hi]);\n    }\n    const span = nextSource - prevSource;\n    return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;\n}\nclass TimeSeriesScale extends TimeScale {\n    static id = 'timeseries';\n static defaults = TimeScale.defaults;\n constructor(props){\n        super(props);\n         this._table = [];\n         this._minPos = undefined;\n         this._tableRange = undefined;\n    }\n initOffsets() {\n        const timestamps = this._getTimestampsForTable();\n        const table = this._table = this.buildLookupTable(timestamps);\n        this._minPos = interpolate(table, this.min);\n        this._tableRange = interpolate(table, this.max) - this._minPos;\n        super.initOffsets(timestamps);\n    }\n buildLookupTable(timestamps) {\n        const { min , max  } = this;\n        const items = [];\n        const table = [];\n        let i, ilen, prev, curr, next;\n        for(i = 0, ilen = timestamps.length; i < ilen; ++i){\n            curr = timestamps[i];\n            if (curr >= min && curr <= max) {\n                items.push(curr);\n            }\n        }\n        if (items.length < 2) {\n            return [\n                {\n                    time: min,\n                    pos: 0\n                },\n                {\n                    time: max,\n                    pos: 1\n                }\n            ];\n        }\n        for(i = 0, ilen = items.length; i < ilen; ++i){\n            next = items[i + 1];\n            prev = items[i - 1];\n            curr = items[i];\n            if (Math.round((next + prev) / 2) !== curr) {\n                table.push({\n                    time: curr,\n                    pos: i / (ilen - 1)\n                });\n            }\n        }\n        return table;\n    }\n _generate() {\n        const min = this.min;\n        const max = this.max;\n        let timestamps = super.getDataTimestamps();\n        if (!timestamps.includes(min) || !timestamps.length) {\n            timestamps.splice(0, 0, min);\n        }\n        if (!timestamps.includes(max) || timestamps.length === 1) {\n            timestamps.push(max);\n        }\n        return timestamps.sort((a, b)=>a - b);\n    }\n _getTimestampsForTable() {\n        let timestamps = this._cache.all || [];\n        if (timestamps.length) {\n            return timestamps;\n        }\n        const data = this.getDataTimestamps();\n        const label = this.getLabelTimestamps();\n        if (data.length && label.length) {\n            timestamps = this.normalize(data.concat(label));\n        } else {\n            timestamps = data.length ? data : label;\n        }\n        timestamps = this._cache.all = timestamps;\n        return timestamps;\n    }\n getDecimalForValue(value) {\n        return (interpolate(this._table, value) - this._minPos) / this._tableRange;\n    }\n getValueForPixel(pixel) {\n        const offsets = this._offsets;\n        const decimal = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n        return interpolate(this._table, decimal * this._tableRange + this._minPos, true);\n    }\n}\n\nvar scales = /*#__PURE__*/Object.freeze({\n__proto__: null,\nCategoryScale: CategoryScale,\nLinearScale: LinearScale,\nLogarithmicScale: LogarithmicScale,\nRadialLinearScale: RadialLinearScale,\nTimeScale: TimeScale,\nTimeSeriesScale: TimeSeriesScale\n});\n\nconst registerables = [\n    controllers,\n    elements,\n    plugins,\n    scales\n];\n\nexport { Animation, Animations, ArcElement, BarController, BarElement, BasePlatform, BasicPlatform, BubbleController, CategoryScale, Chart, plugin_colors as Colors, DatasetController, plugin_decimation as Decimation, DomPlatform, DoughnutController, Element, index as Filler, Interaction, plugin_legend as Legend, LineController, LineElement, LinearScale, LogarithmicScale, PieController, PointElement, PolarAreaController, RadarController, RadialLinearScale, Scale, ScatterController, plugin_subtitle as SubTitle, Ticks, TimeScale, TimeSeriesScale, plugin_title as Title, plugin_tooltip as Tooltip, adapters as _adapters, _detectPlatform, animator, controllers, defaults, elements, layouts, plugins, registerables, registry, scales };\n//# sourceMappingURL=chart.js.map\n","import React, { forwardRef, useRef, useEffect } from 'react';\nimport { Chart as Chart$1, LineController, BarController, RadarController, DoughnutController, PolarAreaController, BubbleController, PieController, ScatterController } from 'chart.js';\n\nconst defaultDatasetIdKey = \"label\";\nfunction reforwardRef(ref, value) {\n    if (typeof ref === \"function\") {\n        ref(value);\n    } else if (ref) {\n        ref.current = value;\n    }\n}\nfunction setOptions(chart, nextOptions) {\n    const options = chart.options;\n    if (options && nextOptions) {\n        Object.assign(options, nextOptions);\n    }\n}\nfunction setLabels(currentData, nextLabels) {\n    currentData.labels = nextLabels;\n}\nfunction setDatasets(currentData, nextDatasets) {\n    let datasetIdKey = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : defaultDatasetIdKey;\n    const addedDatasets = [];\n    currentData.datasets = nextDatasets.map((nextDataset)=>{\n        // given the new set, find it's current match\n        const currentDataset = currentData.datasets.find((dataset)=>dataset[datasetIdKey] === nextDataset[datasetIdKey]);\n        // There is no original to update, so simply add new one\n        if (!currentDataset || !nextDataset.data || addedDatasets.includes(currentDataset)) {\n            return {\n                ...nextDataset\n            };\n        }\n        addedDatasets.push(currentDataset);\n        Object.assign(currentDataset, nextDataset);\n        return currentDataset;\n    });\n}\nfunction cloneData(data) {\n    let datasetIdKey = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : defaultDatasetIdKey;\n    const nextData = {\n        labels: [],\n        datasets: []\n    };\n    setLabels(nextData, data.labels);\n    setDatasets(nextData, data.datasets, datasetIdKey);\n    return nextData;\n}\n/**\n * Get dataset from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */ function getDatasetAtEvent(chart, event) {\n    return chart.getElementsAtEventForMode(event.nativeEvent, \"dataset\", {\n        intersect: true\n    }, false);\n}\n/**\n * Get single dataset element from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */ function getElementAtEvent(chart, event) {\n    return chart.getElementsAtEventForMode(event.nativeEvent, \"nearest\", {\n        intersect: true\n    }, false);\n}\n/**\n * Get all dataset elements from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */ function getElementsAtEvent(chart, event) {\n    return chart.getElementsAtEventForMode(event.nativeEvent, \"index\", {\n        intersect: true\n    }, false);\n}\n\nfunction ChartComponent(props, ref) {\n    const { height =150 , width =300 , redraw =false , datasetIdKey , type , data , options , plugins =[] , fallbackContent , updateMode , ...canvasProps } = props;\n    const canvasRef = useRef(null);\n    const chartRef = useRef();\n    const renderChart = ()=>{\n        if (!canvasRef.current) return;\n        chartRef.current = new Chart$1(canvasRef.current, {\n            type,\n            data: cloneData(data, datasetIdKey),\n            options: options && {\n                ...options\n            },\n            plugins\n        });\n        reforwardRef(ref, chartRef.current);\n    };\n    const destroyChart = ()=>{\n        reforwardRef(ref, null);\n        if (chartRef.current) {\n            chartRef.current.destroy();\n            chartRef.current = null;\n        }\n    };\n    useEffect(()=>{\n        if (!redraw && chartRef.current && options) {\n            setOptions(chartRef.current, options);\n        }\n    }, [\n        redraw,\n        options\n    ]);\n    useEffect(()=>{\n        if (!redraw && chartRef.current) {\n            setLabels(chartRef.current.config.data, data.labels);\n        }\n    }, [\n        redraw,\n        data.labels\n    ]);\n    useEffect(()=>{\n        if (!redraw && chartRef.current && data.datasets) {\n            setDatasets(chartRef.current.config.data, data.datasets, datasetIdKey);\n        }\n    }, [\n        redraw,\n        data.datasets\n    ]);\n    useEffect(()=>{\n        if (!chartRef.current) return;\n        if (redraw) {\n            destroyChart();\n            setTimeout(renderChart);\n        } else {\n            chartRef.current.update(updateMode);\n        }\n    }, [\n        redraw,\n        options,\n        data.labels,\n        data.datasets,\n        updateMode\n    ]);\n    useEffect(()=>{\n        if (!chartRef.current) return;\n        destroyChart();\n        setTimeout(renderChart);\n    }, [\n        type\n    ]);\n    useEffect(()=>{\n        renderChart();\n        return ()=>destroyChart();\n    }, []);\n    return /*#__PURE__*/ React.createElement(\"canvas\", Object.assign({\n        ref: canvasRef,\n        role: \"img\",\n        height: height,\n        width: width\n    }, canvasProps), fallbackContent);\n}\nconst Chart = /*#__PURE__*/ forwardRef(ChartComponent);\n\nfunction createTypedChart(type, registerables) {\n    Chart$1.register(registerables);\n    return /*#__PURE__*/ forwardRef((props, ref)=>/*#__PURE__*/ React.createElement(Chart, Object.assign({}, props, {\n            ref: ref,\n            type: type\n        })));\n}\nconst Line = /* #__PURE__ */ createTypedChart(\"line\", LineController);\nconst Bar = /* #__PURE__ */ createTypedChart(\"bar\", BarController);\nconst Radar = /* #__PURE__ */ createTypedChart(\"radar\", RadarController);\nconst Doughnut = /* #__PURE__ */ createTypedChart(\"doughnut\", DoughnutController);\nconst PolarArea = /* #__PURE__ */ createTypedChart(\"polarArea\", PolarAreaController);\nconst Bubble = /* #__PURE__ */ createTypedChart(\"bubble\", BubbleController);\nconst Pie = /* #__PURE__ */ createTypedChart(\"pie\", PieController);\nconst Scatter = /* #__PURE__ */ createTypedChart(\"scatter\", ScatterController);\n\nexport { Bar, Bubble, Chart, Doughnut, Line, Pie, PolarArea, Radar, Scatter, getDatasetAtEvent, getElementAtEvent, getElementsAtEvent };\n//# sourceMappingURL=index.js.map\n","\"use client\"\n\nimport { Chart as ChartJS, ArcElement, Tooltip, Legend } from \"chart.js\";\nimport { Doughnut } from \"react-chartjs-2\";\n\nChartJS.register(ArcElement, Tooltip, Legend);\n\n\n\nconst DoughnutChart = ({ accounts }: DoughnutChartProps) => {\n  const accountNames = accounts.map((a) => a.name);\n  const balances = accounts.map((a) => a.currentBalance)\n\n  const data = {\n    datasets: [\n      {\n        label: 'Banks',\n        data: balances,\n        backgroundColor: ['#0747b6', '#2265d8', '#2f91fa'] \n      }\n    ],\n    labels: accountNames\n  }\n\n  return <Doughnut \n    data={data} \n    options={{\n      cutout: '60%',\n      plugins: {\n        legend: {\n          display: false\n        }\n      }\n    }}\n  />\n}\n\nexport default DoughnutChart","\"use client\";\n\nimport Image from \"next/image\";\nimport { useRouter, useSearchParams } from \"next/navigation\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { formUrlQuery } from \"@/lib/utils\";\n\nexport const Pagination = ({ page, totalPages }: PaginationProps) => {\n  const router = useRouter();\n  const searchParams = useSearchParams()!;\n\n  const handleNavigation = (type: \"prev\" | \"next\") => {\n    const pageNumber = type === \"prev\" ? page - 1 : page + 1;\n\n    const newUrl = formUrlQuery({\n      params: searchParams.toString(),\n      key: \"page\",\n      value: pageNumber.toString(),\n    });\n\n    router.push(newUrl, { scroll: false });\n  };\n\n  return (\n    <div className=\"flex justify-between gap-3\">\n      <Button\n        size=\"lg\"\n        variant=\"ghost\"\n        className=\"p-0 hover:bg-transparent\"\n        onClick={() => handleNavigation(\"prev\")}\n        disabled={Number(page) <= 1}\n      >\n        <Image\n          src=\"/icons/arrow-left.svg\"\n          alt=\"arrow\"\n          width={20}\n          height={20}\n          className=\"mr-2\"\n        />\n        Prev\n      </Button>\n      <p className=\"text-14 flex items-center px-2\">\n        {page} / {totalPages}\n      </p>\n      <Button\n        size=\"lg\"\n        variant=\"ghost\"\n        className=\"p-0 hover:bg-transparent\"\n        onClick={() => handleNavigation(\"next\")}\n        disabled={Number(page) >= totalPages}\n      >\n        Next\n        <Image\n          src=\"/icons/arrow-left.svg\"\n          alt=\"arrow\"\n          width={20}\n          height={20}\n          className=\"ml-2 -scale-x-100\"\n        />\n      </Button>\n    </div>\n  );\n};\n","import $k03wI$babelruntimehelpersesmextends from \"@babel/runtime/helpers/esm/extends\";\nimport {forwardRef as $k03wI$forwardRef, createElement as $k03wI$createElement} from \"react\";\nimport {createContextScope as $k03wI$createContextScope} from \"@radix-ui/react-context\";\nimport {Primitive as $k03wI$Primitive} from \"@radix-ui/react-primitive\";\n\n\n\n\n\n/* -------------------------------------------------------------------------------------------------\n * Progress\n * -----------------------------------------------------------------------------------------------*/ const $67824d98245208a0$var$PROGRESS_NAME = 'Progress';\nconst $67824d98245208a0$var$DEFAULT_MAX = 100;\nconst [$67824d98245208a0$var$createProgressContext, $67824d98245208a0$export$388eb2d8f6d3261f] = $k03wI$createContextScope($67824d98245208a0$var$PROGRESS_NAME);\nconst [$67824d98245208a0$var$ProgressProvider, $67824d98245208a0$var$useProgressContext] = $67824d98245208a0$var$createProgressContext($67824d98245208a0$var$PROGRESS_NAME);\nconst $67824d98245208a0$export$b25a304ec7d746bb = /*#__PURE__*/ $k03wI$forwardRef((props, forwardedRef)=>{\n    const { __scopeProgress: __scopeProgress , value: valueProp , max: maxProp , getValueLabel: getValueLabel = $67824d98245208a0$var$defaultGetValueLabel , ...progressProps } = props;\n    const max = $67824d98245208a0$var$isValidMaxNumber(maxProp) ? maxProp : $67824d98245208a0$var$DEFAULT_MAX;\n    const value = $67824d98245208a0$var$isValidValueNumber(valueProp, max) ? valueProp : null;\n    const valueLabel = $67824d98245208a0$var$isNumber(value) ? getValueLabel(value, max) : undefined;\n    return /*#__PURE__*/ $k03wI$createElement($67824d98245208a0$var$ProgressProvider, {\n        scope: __scopeProgress,\n        value: value,\n        max: max\n    }, /*#__PURE__*/ $k03wI$createElement($k03wI$Primitive.div, $k03wI$babelruntimehelpersesmextends({\n        \"aria-valuemax\": max,\n        \"aria-valuemin\": 0,\n        \"aria-valuenow\": $67824d98245208a0$var$isNumber(value) ? value : undefined,\n        \"aria-valuetext\": valueLabel,\n        role: \"progressbar\",\n        \"data-state\": $67824d98245208a0$var$getProgressState(value, max),\n        \"data-value\": value !== null && value !== void 0 ? value : undefined,\n        \"data-max\": max\n    }, progressProps, {\n        ref: forwardedRef\n    })));\n});\n/*#__PURE__*/ Object.assign($67824d98245208a0$export$b25a304ec7d746bb, {\n    displayName: $67824d98245208a0$var$PROGRESS_NAME\n});\n$67824d98245208a0$export$b25a304ec7d746bb.propTypes = {\n    max (props, propName, componentName) {\n        const propValue = props[propName];\n        const strVal = String(propValue);\n        if (propValue && !$67824d98245208a0$var$isValidMaxNumber(propValue)) return new Error($67824d98245208a0$var$getInvalidMaxError(strVal, componentName));\n        return null;\n    },\n    value (props, propName, componentName) {\n        const valueProp = props[propName];\n        const strVal = String(valueProp);\n        const max = $67824d98245208a0$var$isValidMaxNumber(props.max) ? props.max : $67824d98245208a0$var$DEFAULT_MAX;\n        if (valueProp != null && !$67824d98245208a0$var$isValidValueNumber(valueProp, max)) return new Error($67824d98245208a0$var$getInvalidValueError(strVal, componentName));\n        return null;\n    }\n};\n/* -------------------------------------------------------------------------------------------------\n * ProgressIndicator\n * -----------------------------------------------------------------------------------------------*/ const $67824d98245208a0$var$INDICATOR_NAME = 'ProgressIndicator';\nconst $67824d98245208a0$export$2b776f7e7ee60dbd = /*#__PURE__*/ $k03wI$forwardRef((props, forwardedRef)=>{\n    var _context$value;\n    const { __scopeProgress: __scopeProgress , ...indicatorProps } = props;\n    const context = $67824d98245208a0$var$useProgressContext($67824d98245208a0$var$INDICATOR_NAME, __scopeProgress);\n    return /*#__PURE__*/ $k03wI$createElement($k03wI$Primitive.div, $k03wI$babelruntimehelpersesmextends({\n        \"data-state\": $67824d98245208a0$var$getProgressState(context.value, context.max),\n        \"data-value\": (_context$value = context.value) !== null && _context$value !== void 0 ? _context$value : undefined,\n        \"data-max\": context.max\n    }, indicatorProps, {\n        ref: forwardedRef\n    }));\n});\n/*#__PURE__*/ Object.assign($67824d98245208a0$export$2b776f7e7ee60dbd, {\n    displayName: $67824d98245208a0$var$INDICATOR_NAME\n});\n/* ---------------------------------------------------------------------------------------------- */ function $67824d98245208a0$var$defaultGetValueLabel(value, max) {\n    return `${Math.round(value / max * 100)}%`;\n}\nfunction $67824d98245208a0$var$getProgressState(value, maxValue) {\n    return value == null ? 'indeterminate' : value === maxValue ? 'complete' : 'loading';\n}\nfunction $67824d98245208a0$var$isNumber(value) {\n    return typeof value === 'number';\n}\nfunction $67824d98245208a0$var$isValidMaxNumber(max) {\n    // prettier-ignore\n    return $67824d98245208a0$var$isNumber(max) && !isNaN(max) && max > 0;\n}\nfunction $67824d98245208a0$var$isValidValueNumber(value, max) {\n    // prettier-ignore\n    return $67824d98245208a0$var$isNumber(value) && !isNaN(value) && value <= max && value >= 0;\n} // Split this out for clearer readability of the error message.\nfunction $67824d98245208a0$var$getInvalidMaxError(propValue, componentName) {\n    return `Invalid prop \\`max\\` of value \\`${propValue}\\` supplied to \\`${componentName}\\`. Only numbers greater than 0 are valid max values. Defaulting to \\`${$67824d98245208a0$var$DEFAULT_MAX}\\`.`;\n}\nfunction $67824d98245208a0$var$getInvalidValueError(propValue, componentName) {\n    return `Invalid prop \\`value\\` of value \\`${propValue}\\` supplied to \\`${componentName}\\`. The \\`value\\` prop must be:\n  - a positive number\n  - less than the value passed to \\`max\\` (or ${$67824d98245208a0$var$DEFAULT_MAX} if no \\`max\\` prop is set)\n  - \\`null\\` if the progress is indeterminate.\n\nDefaulting to \\`null\\`.`;\n}\nconst $67824d98245208a0$export$be92b6f5f03c0fe9 = $67824d98245208a0$export$b25a304ec7d746bb;\nconst $67824d98245208a0$export$adb584737d712b70 = $67824d98245208a0$export$2b776f7e7ee60dbd;\n\n\n\n\nexport {$67824d98245208a0$export$388eb2d8f6d3261f as createProgressScope, $67824d98245208a0$export$b25a304ec7d746bb as Progress, $67824d98245208a0$export$2b776f7e7ee60dbd as ProgressIndicator, $67824d98245208a0$export$be92b6f5f03c0fe9 as Root, $67824d98245208a0$export$adb584737d712b70 as Indicator};\n//# sourceMappingURL=index.mjs.map\n","\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ indicatorClassName, className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className={cn('h-full w-full flex-1 bg-primary transition-all', indicatorClassName)}\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","import $98Iye$babelruntimehelpersesmextends from \"@babel/runtime/helpers/esm/extends\";\nimport {forwardRef as $98Iye$forwardRef, createElement as $98Iye$createElement, useRef as $98Iye$useRef, useState as $98Iye$useState, useEffect as $98Iye$useEffect, useCallback as $98Iye$useCallback} from \"react\";\nimport {composeEventHandlers as $98Iye$composeEventHandlers} from \"@radix-ui/primitive\";\nimport {createCollection as $98Iye$createCollection} from \"@radix-ui/react-collection\";\nimport {useComposedRefs as $98Iye$useComposedRefs} from \"@radix-ui/react-compose-refs\";\nimport {createContextScope as $98Iye$createContextScope} from \"@radix-ui/react-context\";\nimport {useId as $98Iye$useId} from \"@radix-ui/react-id\";\nimport {Primitive as $98Iye$Primitive} from \"@radix-ui/react-primitive\";\nimport {useCallbackRef as $98Iye$useCallbackRef} from \"@radix-ui/react-use-callback-ref\";\nimport {useControllableState as $98Iye$useControllableState} from \"@radix-ui/react-use-controllable-state\";\nimport {useDirection as $98Iye$useDirection} from \"@radix-ui/react-direction\";\n\n\n\n\n\n\n\n\n\n\n\n\nconst $d7bdfb9eb0fdf311$var$ENTRY_FOCUS = 'rovingFocusGroup.onEntryFocus';\nconst $d7bdfb9eb0fdf311$var$EVENT_OPTIONS = {\n    bubbles: false,\n    cancelable: true\n};\n/* -------------------------------------------------------------------------------------------------\n * RovingFocusGroup\n * -----------------------------------------------------------------------------------------------*/ const $d7bdfb9eb0fdf311$var$GROUP_NAME = 'RovingFocusGroup';\nconst [$d7bdfb9eb0fdf311$var$Collection, $d7bdfb9eb0fdf311$var$useCollection, $d7bdfb9eb0fdf311$var$createCollectionScope] = $98Iye$createCollection($d7bdfb9eb0fdf311$var$GROUP_NAME);\nconst [$d7bdfb9eb0fdf311$var$createRovingFocusGroupContext, $d7bdfb9eb0fdf311$export$c7109489551a4f4] = $98Iye$createContextScope($d7bdfb9eb0fdf311$var$GROUP_NAME, [\n    $d7bdfb9eb0fdf311$var$createCollectionScope\n]);\nconst [$d7bdfb9eb0fdf311$var$RovingFocusProvider, $d7bdfb9eb0fdf311$var$useRovingFocusContext] = $d7bdfb9eb0fdf311$var$createRovingFocusGroupContext($d7bdfb9eb0fdf311$var$GROUP_NAME);\nconst $d7bdfb9eb0fdf311$export$8699f7c8af148338 = /*#__PURE__*/ $98Iye$forwardRef((props, forwardedRef)=>{\n    return /*#__PURE__*/ $98Iye$createElement($d7bdfb9eb0fdf311$var$Collection.Provider, {\n        scope: props.__scopeRovingFocusGroup\n    }, /*#__PURE__*/ $98Iye$createElement($d7bdfb9eb0fdf311$var$Collection.Slot, {\n        scope: props.__scopeRovingFocusGroup\n    }, /*#__PURE__*/ $98Iye$createElement($d7bdfb9eb0fdf311$var$RovingFocusGroupImpl, $98Iye$babelruntimehelpersesmextends({}, props, {\n        ref: forwardedRef\n    }))));\n});\n/*#__PURE__*/ Object.assign($d7bdfb9eb0fdf311$export$8699f7c8af148338, {\n    displayName: $d7bdfb9eb0fdf311$var$GROUP_NAME\n});\n/* -----------------------------------------------------------------------------------------------*/ const $d7bdfb9eb0fdf311$var$RovingFocusGroupImpl = /*#__PURE__*/ $98Iye$forwardRef((props, forwardedRef)=>{\n    const { __scopeRovingFocusGroup: __scopeRovingFocusGroup , orientation: orientation , loop: loop = false , dir: dir , currentTabStopId: currentTabStopIdProp , defaultCurrentTabStopId: defaultCurrentTabStopId , onCurrentTabStopIdChange: onCurrentTabStopIdChange , onEntryFocus: onEntryFocus , ...groupProps } = props;\n    const ref = $98Iye$useRef(null);\n    const composedRefs = $98Iye$useComposedRefs(forwardedRef, ref);\n    const direction = $98Iye$useDirection(dir);\n    const [currentTabStopId = null, setCurrentTabStopId] = $98Iye$useControllableState({\n        prop: currentTabStopIdProp,\n        defaultProp: defaultCurrentTabStopId,\n        onChange: onCurrentTabStopIdChange\n    });\n    const [isTabbingBackOut, setIsTabbingBackOut] = $98Iye$useState(false);\n    const handleEntryFocus = $98Iye$useCallbackRef(onEntryFocus);\n    const getItems = $d7bdfb9eb0fdf311$var$useCollection(__scopeRovingFocusGroup);\n    const isClickFocusRef = $98Iye$useRef(false);\n    const [focusableItemsCount, setFocusableItemsCount] = $98Iye$useState(0);\n    $98Iye$useEffect(()=>{\n        const node = ref.current;\n        if (node) {\n            node.addEventListener($d7bdfb9eb0fdf311$var$ENTRY_FOCUS, handleEntryFocus);\n            return ()=>node.removeEventListener($d7bdfb9eb0fdf311$var$ENTRY_FOCUS, handleEntryFocus)\n            ;\n        }\n    }, [\n        handleEntryFocus\n    ]);\n    return /*#__PURE__*/ $98Iye$createElement($d7bdfb9eb0fdf311$var$RovingFocusProvider, {\n        scope: __scopeRovingFocusGroup,\n        orientation: orientation,\n        dir: direction,\n        loop: loop,\n        currentTabStopId: currentTabStopId,\n        onItemFocus: $98Iye$useCallback((tabStopId)=>setCurrentTabStopId(tabStopId)\n        , [\n            setCurrentTabStopId\n        ]),\n        onItemShiftTab: $98Iye$useCallback(()=>setIsTabbingBackOut(true)\n        , []),\n        onFocusableItemAdd: $98Iye$useCallback(()=>setFocusableItemsCount((prevCount)=>prevCount + 1\n            )\n        , []),\n        onFocusableItemRemove: $98Iye$useCallback(()=>setFocusableItemsCount((prevCount)=>prevCount - 1\n            )\n        , [])\n    }, /*#__PURE__*/ $98Iye$createElement($98Iye$Primitive.div, $98Iye$babelruntimehelpersesmextends({\n        tabIndex: isTabbingBackOut || focusableItemsCount === 0 ? -1 : 0,\n        \"data-orientation\": orientation\n    }, groupProps, {\n        ref: composedRefs,\n        style: {\n            outline: 'none',\n            ...props.style\n        },\n        onMouseDown: $98Iye$composeEventHandlers(props.onMouseDown, ()=>{\n            isClickFocusRef.current = true;\n        }),\n        onFocus: $98Iye$composeEventHandlers(props.onFocus, (event)=>{\n            // We normally wouldn't need this check, because we already check\n            // that the focus is on the current target and not bubbling to it.\n            // We do this because Safari doesn't focus buttons when clicked, and\n            // instead, the wrapper will get focused and not through a bubbling event.\n            const isKeyboardFocus = !isClickFocusRef.current;\n            if (event.target === event.currentTarget && isKeyboardFocus && !isTabbingBackOut) {\n                const entryFocusEvent = new CustomEvent($d7bdfb9eb0fdf311$var$ENTRY_FOCUS, $d7bdfb9eb0fdf311$var$EVENT_OPTIONS);\n                event.currentTarget.dispatchEvent(entryFocusEvent);\n                if (!entryFocusEvent.defaultPrevented) {\n                    const items = getItems().filter((item)=>item.focusable\n                    );\n                    const activeItem = items.find((item)=>item.active\n                    );\n                    const currentItem = items.find((item)=>item.id === currentTabStopId\n                    );\n                    const candidateItems = [\n                        activeItem,\n                        currentItem,\n                        ...items\n                    ].filter(Boolean);\n                    const candidateNodes = candidateItems.map((item)=>item.ref.current\n                    );\n                    $d7bdfb9eb0fdf311$var$focusFirst(candidateNodes);\n                }\n            }\n            isClickFocusRef.current = false;\n        }),\n        onBlur: $98Iye$composeEventHandlers(props.onBlur, ()=>setIsTabbingBackOut(false)\n        )\n    })));\n});\n/* -------------------------------------------------------------------------------------------------\n * RovingFocusGroupItem\n * -----------------------------------------------------------------------------------------------*/ const $d7bdfb9eb0fdf311$var$ITEM_NAME = 'RovingFocusGroupItem';\nconst $d7bdfb9eb0fdf311$export$ab9df7c53fe8454 = /*#__PURE__*/ $98Iye$forwardRef((props, forwardedRef)=>{\n    const { __scopeRovingFocusGroup: __scopeRovingFocusGroup , focusable: focusable = true , active: active = false , tabStopId: tabStopId , ...itemProps } = props;\n    const autoId = $98Iye$useId();\n    const id = tabStopId || autoId;\n    const context = $d7bdfb9eb0fdf311$var$useRovingFocusContext($d7bdfb9eb0fdf311$var$ITEM_NAME, __scopeRovingFocusGroup);\n    const isCurrentTabStop = context.currentTabStopId === id;\n    const getItems = $d7bdfb9eb0fdf311$var$useCollection(__scopeRovingFocusGroup);\n    const { onFocusableItemAdd: onFocusableItemAdd , onFocusableItemRemove: onFocusableItemRemove  } = context;\n    $98Iye$useEffect(()=>{\n        if (focusable) {\n            onFocusableItemAdd();\n            return ()=>onFocusableItemRemove()\n            ;\n        }\n    }, [\n        focusable,\n        onFocusableItemAdd,\n        onFocusableItemRemove\n    ]);\n    return /*#__PURE__*/ $98Iye$createElement($d7bdfb9eb0fdf311$var$Collection.ItemSlot, {\n        scope: __scopeRovingFocusGroup,\n        id: id,\n        focusable: focusable,\n        active: active\n    }, /*#__PURE__*/ $98Iye$createElement($98Iye$Primitive.span, $98Iye$babelruntimehelpersesmextends({\n        tabIndex: isCurrentTabStop ? 0 : -1,\n        \"data-orientation\": context.orientation\n    }, itemProps, {\n        ref: forwardedRef,\n        onMouseDown: $98Iye$composeEventHandlers(props.onMouseDown, (event)=>{\n            // We prevent focusing non-focusable items on `mousedown`.\n            // Even though the item has tabIndex={-1}, that only means take it out of the tab order.\n            if (!focusable) event.preventDefault(); // Safari doesn't focus a button when clicked so we run our logic on mousedown also\n            else context.onItemFocus(id);\n        }),\n        onFocus: $98Iye$composeEventHandlers(props.onFocus, ()=>context.onItemFocus(id)\n        ),\n        onKeyDown: $98Iye$composeEventHandlers(props.onKeyDown, (event)=>{\n            if (event.key === 'Tab' && event.shiftKey) {\n                context.onItemShiftTab();\n                return;\n            }\n            if (event.target !== event.currentTarget) return;\n            const focusIntent = $d7bdfb9eb0fdf311$var$getFocusIntent(event, context.orientation, context.dir);\n            if (focusIntent !== undefined) {\n                event.preventDefault();\n                const items = getItems().filter((item)=>item.focusable\n                );\n                let candidateNodes = items.map((item)=>item.ref.current\n                );\n                if (focusIntent === 'last') candidateNodes.reverse();\n                else if (focusIntent === 'prev' || focusIntent === 'next') {\n                    if (focusIntent === 'prev') candidateNodes.reverse();\n                    const currentIndex = candidateNodes.indexOf(event.currentTarget);\n                    candidateNodes = context.loop ? $d7bdfb9eb0fdf311$var$wrapArray(candidateNodes, currentIndex + 1) : candidateNodes.slice(currentIndex + 1);\n                }\n                /**\n         * Imperative focus during keydown is risky so we prevent React's batching updates\n         * to avoid potential bugs. See: https://github.com/facebook/react/issues/20332\n         */ setTimeout(()=>$d7bdfb9eb0fdf311$var$focusFirst(candidateNodes)\n                );\n            }\n        })\n    })));\n});\n/*#__PURE__*/ Object.assign($d7bdfb9eb0fdf311$export$ab9df7c53fe8454, {\n    displayName: $d7bdfb9eb0fdf311$var$ITEM_NAME\n});\n/* -----------------------------------------------------------------------------------------------*/ // prettier-ignore\nconst $d7bdfb9eb0fdf311$var$MAP_KEY_TO_FOCUS_INTENT = {\n    ArrowLeft: 'prev',\n    ArrowUp: 'prev',\n    ArrowRight: 'next',\n    ArrowDown: 'next',\n    PageUp: 'first',\n    Home: 'first',\n    PageDown: 'last',\n    End: 'last'\n};\nfunction $d7bdfb9eb0fdf311$var$getDirectionAwareKey(key, dir) {\n    if (dir !== 'rtl') return key;\n    return key === 'ArrowLeft' ? 'ArrowRight' : key === 'ArrowRight' ? 'ArrowLeft' : key;\n}\nfunction $d7bdfb9eb0fdf311$var$getFocusIntent(event, orientation, dir) {\n    const key = $d7bdfb9eb0fdf311$var$getDirectionAwareKey(event.key, dir);\n    if (orientation === 'vertical' && [\n        'ArrowLeft',\n        'ArrowRight'\n    ].includes(key)) return undefined;\n    if (orientation === 'horizontal' && [\n        'ArrowUp',\n        'ArrowDown'\n    ].includes(key)) return undefined;\n    return $d7bdfb9eb0fdf311$var$MAP_KEY_TO_FOCUS_INTENT[key];\n}\nfunction $d7bdfb9eb0fdf311$var$focusFirst(candidates) {\n    const PREVIOUSLY_FOCUSED_ELEMENT = document.activeElement;\n    for (const candidate of candidates){\n        // if focus is already where we want to go, we don't want to keep going through the candidates\n        if (candidate === PREVIOUSLY_FOCUSED_ELEMENT) return;\n        candidate.focus();\n        if (document.activeElement !== PREVIOUSLY_FOCUSED_ELEMENT) return;\n    }\n}\n/**\n * Wraps an array around itself at a given start index\n * Example: `wrapArray(['a', 'b', 'c', 'd'], 2) === ['c', 'd', 'a', 'b']`\n */ function $d7bdfb9eb0fdf311$var$wrapArray(array, startIndex) {\n    return array.map((_, index)=>array[(startIndex + index) % array.length]\n    );\n}\nconst $d7bdfb9eb0fdf311$export$be92b6f5f03c0fe9 = $d7bdfb9eb0fdf311$export$8699f7c8af148338;\nconst $d7bdfb9eb0fdf311$export$6d08773d2e66f8f2 = $d7bdfb9eb0fdf311$export$ab9df7c53fe8454;\n\n\n\n\nexport {$d7bdfb9eb0fdf311$export$c7109489551a4f4 as createRovingFocusGroupScope, $d7bdfb9eb0fdf311$export$8699f7c8af148338 as RovingFocusGroup, $d7bdfb9eb0fdf311$export$ab9df7c53fe8454 as RovingFocusGroupItem, $d7bdfb9eb0fdf311$export$be92b6f5f03c0fe9 as Root, $d7bdfb9eb0fdf311$export$6d08773d2e66f8f2 as Item};\n//# sourceMappingURL=index.mjs.map\n","import $1IHzk$babelruntimehelpersesmextends from \"@babel/runtime/helpers/esm/extends\";\nimport {forwardRef as $1IHzk$forwardRef, createElement as $1IHzk$createElement, useRef as $1IHzk$useRef, useEffect as $1IHzk$useEffect} from \"react\";\nimport {composeEventHandlers as $1IHzk$composeEventHandlers} from \"@radix-ui/primitive\";\nimport {createContextScope as $1IHzk$createContextScope} from \"@radix-ui/react-context\";\nimport {createRovingFocusGroupScope as $1IHzk$createRovingFocusGroupScope, Root as $1IHzk$Root, Item as $1IHzk$Item} from \"@radix-ui/react-roving-focus\";\nimport {Presence as $1IHzk$Presence} from \"@radix-ui/react-presence\";\nimport {Primitive as $1IHzk$Primitive} from \"@radix-ui/react-primitive\";\nimport {useDirection as $1IHzk$useDirection} from \"@radix-ui/react-direction\";\nimport {useControllableState as $1IHzk$useControllableState} from \"@radix-ui/react-use-controllable-state\";\nimport {useId as $1IHzk$useId} from \"@radix-ui/react-id\";\n\n\n\n\n\n\n\n\n\n\n\n\n/* -------------------------------------------------------------------------------------------------\n * Tabs\n * -----------------------------------------------------------------------------------------------*/ const $69cb30bb0017df05$var$TABS_NAME = 'Tabs';\nconst [$69cb30bb0017df05$var$createTabsContext, $69cb30bb0017df05$export$355f5bd209d7b13a] = $1IHzk$createContextScope($69cb30bb0017df05$var$TABS_NAME, [\n    $1IHzk$createRovingFocusGroupScope\n]);\nconst $69cb30bb0017df05$var$useRovingFocusGroupScope = $1IHzk$createRovingFocusGroupScope();\nconst [$69cb30bb0017df05$var$TabsProvider, $69cb30bb0017df05$var$useTabsContext] = $69cb30bb0017df05$var$createTabsContext($69cb30bb0017df05$var$TABS_NAME);\nconst $69cb30bb0017df05$export$b2539bed5023c21c = /*#__PURE__*/ $1IHzk$forwardRef((props, forwardedRef)=>{\n    const { __scopeTabs: __scopeTabs , value: valueProp , onValueChange: onValueChange , defaultValue: defaultValue , orientation: orientation = 'horizontal' , dir: dir , activationMode: activationMode = 'automatic' , ...tabsProps } = props;\n    const direction = $1IHzk$useDirection(dir);\n    const [value, setValue] = $1IHzk$useControllableState({\n        prop: valueProp,\n        onChange: onValueChange,\n        defaultProp: defaultValue\n    });\n    return /*#__PURE__*/ $1IHzk$createElement($69cb30bb0017df05$var$TabsProvider, {\n        scope: __scopeTabs,\n        baseId: $1IHzk$useId(),\n        value: value,\n        onValueChange: setValue,\n        orientation: orientation,\n        dir: direction,\n        activationMode: activationMode\n    }, /*#__PURE__*/ $1IHzk$createElement($1IHzk$Primitive.div, $1IHzk$babelruntimehelpersesmextends({\n        dir: direction,\n        \"data-orientation\": orientation\n    }, tabsProps, {\n        ref: forwardedRef\n    })));\n});\n/*#__PURE__*/ Object.assign($69cb30bb0017df05$export$b2539bed5023c21c, {\n    displayName: $69cb30bb0017df05$var$TABS_NAME\n});\n/* -------------------------------------------------------------------------------------------------\n * TabsList\n * -----------------------------------------------------------------------------------------------*/ const $69cb30bb0017df05$var$TAB_LIST_NAME = 'TabsList';\nconst $69cb30bb0017df05$export$9712d22edc0d78c1 = /*#__PURE__*/ $1IHzk$forwardRef((props, forwardedRef)=>{\n    const { __scopeTabs: __scopeTabs , loop: loop = true , ...listProps } = props;\n    const context = $69cb30bb0017df05$var$useTabsContext($69cb30bb0017df05$var$TAB_LIST_NAME, __scopeTabs);\n    const rovingFocusGroupScope = $69cb30bb0017df05$var$useRovingFocusGroupScope(__scopeTabs);\n    return /*#__PURE__*/ $1IHzk$createElement($1IHzk$Root, $1IHzk$babelruntimehelpersesmextends({\n        asChild: true\n    }, rovingFocusGroupScope, {\n        orientation: context.orientation,\n        dir: context.dir,\n        loop: loop\n    }), /*#__PURE__*/ $1IHzk$createElement($1IHzk$Primitive.div, $1IHzk$babelruntimehelpersesmextends({\n        role: \"tablist\",\n        \"aria-orientation\": context.orientation\n    }, listProps, {\n        ref: forwardedRef\n    })));\n});\n/*#__PURE__*/ Object.assign($69cb30bb0017df05$export$9712d22edc0d78c1, {\n    displayName: $69cb30bb0017df05$var$TAB_LIST_NAME\n});\n/* -------------------------------------------------------------------------------------------------\n * TabsTrigger\n * -----------------------------------------------------------------------------------------------*/ const $69cb30bb0017df05$var$TRIGGER_NAME = 'TabsTrigger';\nconst $69cb30bb0017df05$export$8114b9fdfdf9f3ba = /*#__PURE__*/ $1IHzk$forwardRef((props, forwardedRef)=>{\n    const { __scopeTabs: __scopeTabs , value: value , disabled: disabled = false , ...triggerProps } = props;\n    const context = $69cb30bb0017df05$var$useTabsContext($69cb30bb0017df05$var$TRIGGER_NAME, __scopeTabs);\n    const rovingFocusGroupScope = $69cb30bb0017df05$var$useRovingFocusGroupScope(__scopeTabs);\n    const triggerId = $69cb30bb0017df05$var$makeTriggerId(context.baseId, value);\n    const contentId = $69cb30bb0017df05$var$makeContentId(context.baseId, value);\n    const isSelected = value === context.value;\n    return /*#__PURE__*/ $1IHzk$createElement($1IHzk$Item, $1IHzk$babelruntimehelpersesmextends({\n        asChild: true\n    }, rovingFocusGroupScope, {\n        focusable: !disabled,\n        active: isSelected\n    }), /*#__PURE__*/ $1IHzk$createElement($1IHzk$Primitive.button, $1IHzk$babelruntimehelpersesmextends({\n        type: \"button\",\n        role: \"tab\",\n        \"aria-selected\": isSelected,\n        \"aria-controls\": contentId,\n        \"data-state\": isSelected ? 'active' : 'inactive',\n        \"data-disabled\": disabled ? '' : undefined,\n        disabled: disabled,\n        id: triggerId\n    }, triggerProps, {\n        ref: forwardedRef,\n        onMouseDown: $1IHzk$composeEventHandlers(props.onMouseDown, (event)=>{\n            // only call handler if it's the left button (mousedown gets triggered by all mouse buttons)\n            // but not when the control key is pressed (avoiding MacOS right click)\n            if (!disabled && event.button === 0 && event.ctrlKey === false) context.onValueChange(value);\n            else // prevent focus to avoid accidental activation\n            event.preventDefault();\n        }),\n        onKeyDown: $1IHzk$composeEventHandlers(props.onKeyDown, (event)=>{\n            if ([\n                ' ',\n                'Enter'\n            ].includes(event.key)) context.onValueChange(value);\n        }),\n        onFocus: $1IHzk$composeEventHandlers(props.onFocus, ()=>{\n            // handle \"automatic\" activation if necessary\n            // ie. activate tab following focus\n            const isAutomaticActivation = context.activationMode !== 'manual';\n            if (!isSelected && !disabled && isAutomaticActivation) context.onValueChange(value);\n        })\n    })));\n});\n/*#__PURE__*/ Object.assign($69cb30bb0017df05$export$8114b9fdfdf9f3ba, {\n    displayName: $69cb30bb0017df05$var$TRIGGER_NAME\n});\n/* -------------------------------------------------------------------------------------------------\n * TabsContent\n * -----------------------------------------------------------------------------------------------*/ const $69cb30bb0017df05$var$CONTENT_NAME = 'TabsContent';\nconst $69cb30bb0017df05$export$bd905d70e8fd2ebb = /*#__PURE__*/ $1IHzk$forwardRef((props, forwardedRef)=>{\n    const { __scopeTabs: __scopeTabs , value: value , forceMount: forceMount , children: children , ...contentProps } = props;\n    const context = $69cb30bb0017df05$var$useTabsContext($69cb30bb0017df05$var$CONTENT_NAME, __scopeTabs);\n    const triggerId = $69cb30bb0017df05$var$makeTriggerId(context.baseId, value);\n    const contentId = $69cb30bb0017df05$var$makeContentId(context.baseId, value);\n    const isSelected = value === context.value;\n    const isMountAnimationPreventedRef = $1IHzk$useRef(isSelected);\n    $1IHzk$useEffect(()=>{\n        const rAF = requestAnimationFrame(()=>isMountAnimationPreventedRef.current = false\n        );\n        return ()=>cancelAnimationFrame(rAF)\n        ;\n    }, []);\n    return /*#__PURE__*/ $1IHzk$createElement($1IHzk$Presence, {\n        present: forceMount || isSelected\n    }, ({ present: present  })=>/*#__PURE__*/ $1IHzk$createElement($1IHzk$Primitive.div, $1IHzk$babelruntimehelpersesmextends({\n            \"data-state\": isSelected ? 'active' : 'inactive',\n            \"data-orientation\": context.orientation,\n            role: \"tabpanel\",\n            \"aria-labelledby\": triggerId,\n            hidden: !present,\n            id: contentId,\n            tabIndex: 0\n        }, contentProps, {\n            ref: forwardedRef,\n            style: {\n                ...props.style,\n                animationDuration: isMountAnimationPreventedRef.current ? '0s' : undefined\n            }\n        }), present && children)\n    );\n});\n/*#__PURE__*/ Object.assign($69cb30bb0017df05$export$bd905d70e8fd2ebb, {\n    displayName: $69cb30bb0017df05$var$CONTENT_NAME\n});\n/* ---------------------------------------------------------------------------------------------- */ function $69cb30bb0017df05$var$makeTriggerId(baseId, value) {\n    return `${baseId}-trigger-${value}`;\n}\nfunction $69cb30bb0017df05$var$makeContentId(baseId, value) {\n    return `${baseId}-content-${value}`;\n}\nconst $69cb30bb0017df05$export$be92b6f5f03c0fe9 = $69cb30bb0017df05$export$b2539bed5023c21c;\nconst $69cb30bb0017df05$export$54c2e3dc7acea9f5 = $69cb30bb0017df05$export$9712d22edc0d78c1;\nconst $69cb30bb0017df05$export$41fb9f06171c75f4 = $69cb30bb0017df05$export$8114b9fdfdf9f3ba;\nconst $69cb30bb0017df05$export$7c6e2c02157bb7d2 = $69cb30bb0017df05$export$bd905d70e8fd2ebb;\n\n\n\n\nexport {$69cb30bb0017df05$export$355f5bd209d7b13a as createTabsScope, $69cb30bb0017df05$export$b2539bed5023c21c as Tabs, $69cb30bb0017df05$export$9712d22edc0d78c1 as TabsList, $69cb30bb0017df05$export$8114b9fdfdf9f3ba as TabsTrigger, $69cb30bb0017df05$export$bd905d70e8fd2ebb as TabsContent, $69cb30bb0017df05$export$be92b6f5f03c0fe9 as Root, $69cb30bb0017df05$export$54c2e3dc7acea9f5 as List, $69cb30bb0017df05$export$41fb9f06171c75f4 as Trigger, $69cb30bb0017df05$export$7c6e2c02157bb7d2 as Content};\n//# sourceMappingURL=index.mjs.map\n","\"use client\"\n\nimport * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","var t=function(){return t=Object.assign||function(t){for(var i,n=1,s=arguments.length;n<s;n++)for(var a in i=arguments[n])Object.prototype.hasOwnProperty.call(i,a)&&(t[a]=i[a]);return t},t.apply(this,arguments)},i=function(){function i(i,n,s){var a=this;this.endVal=n,this.options=s,this.version=\"2.8.0\",this.defaults={startVal:0,decimalPlaces:0,duration:2,useEasing:!0,useGrouping:!0,useIndianSeparators:!1,smartEasingThreshold:999,smartEasingAmount:333,separator:\",\",decimal:\".\",prefix:\"\",suffix:\"\",enableScrollSpy:!1,scrollSpyDelay:200,scrollSpyOnce:!1},this.finalEndVal=null,this.useEasing=!0,this.countDown=!1,this.error=\"\",this.startVal=0,this.paused=!0,this.once=!1,this.count=function(t){a.startTime||(a.startTime=t);var i=t-a.startTime;a.remaining=a.duration-i,a.useEasing?a.countDown?a.frameVal=a.startVal-a.easingFn(i,0,a.startVal-a.endVal,a.duration):a.frameVal=a.easingFn(i,a.startVal,a.endVal-a.startVal,a.duration):a.frameVal=a.startVal+(a.endVal-a.startVal)*(i/a.duration);var n=a.countDown?a.frameVal<a.endVal:a.frameVal>a.endVal;a.frameVal=n?a.endVal:a.frameVal,a.frameVal=Number(a.frameVal.toFixed(a.options.decimalPlaces)),a.printValue(a.frameVal),i<a.duration?a.rAF=requestAnimationFrame(a.count):null!==a.finalEndVal?a.update(a.finalEndVal):a.options.onCompleteCallback&&a.options.onCompleteCallback()},this.formatNumber=function(t){var i,n,s,e,o=t<0?\"-\":\"\";i=Math.abs(t).toFixed(a.options.decimalPlaces);var r=(i+=\"\").split(\".\");if(n=r[0],s=r.length>1?a.options.decimal+r[1]:\"\",a.options.useGrouping){e=\"\";for(var l=3,h=0,u=0,p=n.length;u<p;++u)a.options.useIndianSeparators&&4===u&&(l=2,h=1),0!==u&&h%l==0&&(e=a.options.separator+e),h++,e=n[p-u-1]+e;n=e}return a.options.numerals&&a.options.numerals.length&&(n=n.replace(/[0-9]/g,(function(t){return a.options.numerals[+t]})),s=s.replace(/[0-9]/g,(function(t){return a.options.numerals[+t]}))),o+a.options.prefix+n+s+a.options.suffix},this.easeOutExpo=function(t,i,n,s){return n*(1-Math.pow(2,-10*t/s))*1024/1023+i},this.options=t(t({},this.defaults),s),this.formattingFn=this.options.formattingFn?this.options.formattingFn:this.formatNumber,this.easingFn=this.options.easingFn?this.options.easingFn:this.easeOutExpo,this.startVal=this.validateValue(this.options.startVal),this.frameVal=this.startVal,this.endVal=this.validateValue(n),this.options.decimalPlaces=Math.max(this.options.decimalPlaces),this.resetDuration(),this.options.separator=String(this.options.separator),this.useEasing=this.options.useEasing,\"\"===this.options.separator&&(this.options.useGrouping=!1),this.el=\"string\"==typeof i?document.getElementById(i):i,this.el?this.printValue(this.startVal):this.error=\"[CountUp] target is null or undefined\",\"undefined\"!=typeof window&&this.options.enableScrollSpy&&(this.error?console.error(this.error,i):(window.onScrollFns=window.onScrollFns||[],window.onScrollFns.push((function(){return a.handleScroll(a)})),window.onscroll=function(){window.onScrollFns.forEach((function(t){return t()}))},this.handleScroll(this)))}return i.prototype.handleScroll=function(t){if(t&&window&&!t.once){var i=window.innerHeight+window.scrollY,n=t.el.getBoundingClientRect(),s=n.top+window.pageYOffset,a=n.top+n.height+window.pageYOffset;a<i&&a>window.scrollY&&t.paused?(t.paused=!1,setTimeout((function(){return t.start()}),t.options.scrollSpyDelay),t.options.scrollSpyOnce&&(t.once=!0)):(window.scrollY>a||s>i)&&!t.paused&&t.reset()}},i.prototype.determineDirectionAndSmartEasing=function(){var t=this.finalEndVal?this.finalEndVal:this.endVal;this.countDown=this.startVal>t;var i=t-this.startVal;if(Math.abs(i)>this.options.smartEasingThreshold&&this.options.useEasing){this.finalEndVal=t;var n=this.countDown?1:-1;this.endVal=t+n*this.options.smartEasingAmount,this.duration=this.duration/2}else this.endVal=t,this.finalEndVal=null;null!==this.finalEndVal?this.useEasing=!1:this.useEasing=this.options.useEasing},i.prototype.start=function(t){this.error||(this.options.onStartCallback&&this.options.onStartCallback(),t&&(this.options.onCompleteCallback=t),this.duration>0?(this.determineDirectionAndSmartEasing(),this.paused=!1,this.rAF=requestAnimationFrame(this.count)):this.printValue(this.endVal))},i.prototype.pauseResume=function(){this.paused?(this.startTime=null,this.duration=this.remaining,this.startVal=this.frameVal,this.determineDirectionAndSmartEasing(),this.rAF=requestAnimationFrame(this.count)):cancelAnimationFrame(this.rAF),this.paused=!this.paused},i.prototype.reset=function(){cancelAnimationFrame(this.rAF),this.paused=!0,this.resetDuration(),this.startVal=this.validateValue(this.options.startVal),this.frameVal=this.startVal,this.printValue(this.startVal)},i.prototype.update=function(t){cancelAnimationFrame(this.rAF),this.startTime=null,this.endVal=this.validateValue(t),this.endVal!==this.frameVal&&(this.startVal=this.frameVal,null==this.finalEndVal&&this.resetDuration(),this.finalEndVal=null,this.determineDirectionAndSmartEasing(),this.rAF=requestAnimationFrame(this.count))},i.prototype.printValue=function(t){var i;if(this.el){var n=this.formattingFn(t);if(null===(i=this.options.plugin)||void 0===i?void 0:i.render)this.options.plugin.render(this.el,n);else if(\"INPUT\"===this.el.tagName)this.el.value=n;else\"text\"===this.el.tagName||\"tspan\"===this.el.tagName?this.el.textContent=n:this.el.innerHTML=n}},i.prototype.ensureNumber=function(t){return\"number\"==typeof t&&!isNaN(t)},i.prototype.validateValue=function(t){var i=Number(t);return this.ensureNumber(i)?i:(this.error=\"[CountUp] invalid start or end value: \".concat(t),null)},i.prototype.resetDuration=function(){this.startTime=null,this.duration=1e3*Number(this.options.duration),this.remaining=this.duration},i}();export{i as CountUp};\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar React = require('react');\nvar countup_js = require('countup.js');\n\nfunction _iterableToArrayLimit(r, l) {\n  var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"];\n  if (null != t) {\n    var e,\n      n,\n      i,\n      u,\n      a = [],\n      f = !0,\n      o = !1;\n    try {\n      if (i = (t = t.call(r)).next, 0 === l) {\n        if (Object(t) !== t) return;\n        f = !1;\n      } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);\n    } catch (r) {\n      o = !0, n = r;\n    } finally {\n      try {\n        if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return;\n      } finally {\n        if (o) throw n;\n      }\n    }\n    return a;\n  }\n}\nfunction ownKeys(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread2(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {\n      _defineProperty(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != typeof t || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != typeof i) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == typeof i ? i : String(i);\n}\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\n/**\n * Silence SSR Warnings.\n * Borrowed from Formik v2.1.1, Licensed MIT.\n *\n * https://github.com/formium/formik/blob/9316a864478f8fcd4fa99a0735b1d37afdf507dc/LICENSE\n */\nvar useIsomorphicLayoutEffect = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined' ? React.useLayoutEffect : React.useEffect;\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/**\n * Create a stable reference to a callback which is updated after each render is committed.\n * Typed version borrowed from Formik v2.2.1. Licensed MIT.\n *\n * https://github.com/formium/formik/blob/9316a864478f8fcd4fa99a0735b1d37afdf507dc/LICENSE\n */\nfunction useEventCallback(fn) {\n  var ref = React.useRef(fn);\n\n  // we copy a ref to the callback scoped to the current state/props on each render\n  useIsomorphicLayoutEffect(function () {\n    ref.current = fn;\n  });\n  return React.useCallback(function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    return ref.current.apply(void 0, args);\n  }, []);\n}\n\nvar createCountUpInstance = function createCountUpInstance(el, props) {\n  var decimal = props.decimal,\n    decimals = props.decimals,\n    duration = props.duration,\n    easingFn = props.easingFn,\n    end = props.end,\n    formattingFn = props.formattingFn,\n    numerals = props.numerals,\n    prefix = props.prefix,\n    separator = props.separator,\n    start = props.start,\n    suffix = props.suffix,\n    useEasing = props.useEasing,\n    useGrouping = props.useGrouping,\n    useIndianSeparators = props.useIndianSeparators,\n    enableScrollSpy = props.enableScrollSpy,\n    scrollSpyDelay = props.scrollSpyDelay,\n    scrollSpyOnce = props.scrollSpyOnce,\n    plugin = props.plugin;\n  return new countup_js.CountUp(el, end, {\n    startVal: start,\n    duration: duration,\n    decimal: decimal,\n    decimalPlaces: decimals,\n    easingFn: easingFn,\n    formattingFn: formattingFn,\n    numerals: numerals,\n    separator: separator,\n    prefix: prefix,\n    suffix: suffix,\n    plugin: plugin,\n    useEasing: useEasing,\n    useIndianSeparators: useIndianSeparators,\n    useGrouping: useGrouping,\n    enableScrollSpy: enableScrollSpy,\n    scrollSpyDelay: scrollSpyDelay,\n    scrollSpyOnce: scrollSpyOnce\n  });\n};\n\nvar _excluded$1 = [\"ref\", \"startOnMount\", \"enableReinitialize\", \"delay\", \"onEnd\", \"onStart\", \"onPauseResume\", \"onReset\", \"onUpdate\"];\nvar DEFAULTS = {\n  decimal: '.',\n  separator: ',',\n  delay: null,\n  prefix: '',\n  suffix: '',\n  duration: 2,\n  start: 0,\n  decimals: 0,\n  startOnMount: true,\n  enableReinitialize: true,\n  useEasing: true,\n  useGrouping: true,\n  useIndianSeparators: false\n};\nvar useCountUp = function useCountUp(props) {\n  var filteredProps = Object.fromEntries(Object.entries(props).filter(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n      value = _ref2[1];\n    return value !== undefined;\n  }));\n  var _useMemo = React.useMemo(function () {\n      return _objectSpread2(_objectSpread2({}, DEFAULTS), filteredProps);\n    }, [props]),\n    ref = _useMemo.ref,\n    startOnMount = _useMemo.startOnMount,\n    enableReinitialize = _useMemo.enableReinitialize,\n    delay = _useMemo.delay,\n    onEnd = _useMemo.onEnd,\n    onStart = _useMemo.onStart,\n    onPauseResume = _useMemo.onPauseResume,\n    onReset = _useMemo.onReset,\n    onUpdate = _useMemo.onUpdate,\n    instanceProps = _objectWithoutProperties(_useMemo, _excluded$1);\n  var countUpRef = React.useRef();\n  var timerRef = React.useRef();\n  var isInitializedRef = React.useRef(false);\n  var createInstance = useEventCallback(function () {\n    return createCountUpInstance(typeof ref === 'string' ? ref : ref.current, instanceProps);\n  });\n  var getCountUp = useEventCallback(function (recreate) {\n    var countUp = countUpRef.current;\n    if (countUp && !recreate) {\n      return countUp;\n    }\n    var newCountUp = createInstance();\n    countUpRef.current = newCountUp;\n    return newCountUp;\n  });\n  var start = useEventCallback(function () {\n    var run = function run() {\n      return getCountUp(true).start(function () {\n        onEnd === null || onEnd === void 0 || onEnd({\n          pauseResume: pauseResume,\n          reset: reset,\n          start: restart,\n          update: update\n        });\n      });\n    };\n    if (delay && delay > 0) {\n      timerRef.current = setTimeout(run, delay * 1000);\n    } else {\n      run();\n    }\n    onStart === null || onStart === void 0 || onStart({\n      pauseResume: pauseResume,\n      reset: reset,\n      update: update\n    });\n  });\n  var pauseResume = useEventCallback(function () {\n    getCountUp().pauseResume();\n    onPauseResume === null || onPauseResume === void 0 || onPauseResume({\n      reset: reset,\n      start: restart,\n      update: update\n    });\n  });\n  var reset = useEventCallback(function () {\n    // Quick fix for https://github.com/glennreyes/react-countup/issues/736 - should be investigated\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    if (getCountUp().el) {\n      timerRef.current && clearTimeout(timerRef.current);\n      getCountUp().reset();\n      onReset === null || onReset === void 0 || onReset({\n        pauseResume: pauseResume,\n        start: restart,\n        update: update\n      });\n    }\n  });\n  var update = useEventCallback(function (newEnd) {\n    getCountUp().update(newEnd);\n    onUpdate === null || onUpdate === void 0 || onUpdate({\n      pauseResume: pauseResume,\n      reset: reset,\n      start: restart\n    });\n  });\n  var restart = useEventCallback(function () {\n    reset();\n    start();\n  });\n  var maybeInitialize = useEventCallback(function (shouldReset) {\n    if (startOnMount) {\n      if (shouldReset) {\n        reset();\n      }\n      start();\n    }\n  });\n  React.useEffect(function () {\n    if (!isInitializedRef.current) {\n      isInitializedRef.current = true;\n      maybeInitialize();\n    } else if (enableReinitialize) {\n      maybeInitialize(true);\n    }\n  }, [enableReinitialize, isInitializedRef, maybeInitialize, delay, props.start, props.suffix, props.prefix, props.duration, props.separator, props.decimals, props.decimal, props.formattingFn]);\n  React.useEffect(function () {\n    return function () {\n      reset();\n    };\n  }, [reset]);\n  return {\n    start: restart,\n    pauseResume: pauseResume,\n    reset: reset,\n    update: update,\n    getCountUp: getCountUp\n  };\n};\n\nvar _excluded = [\"className\", \"redraw\", \"containerProps\", \"children\", \"style\"];\nvar CountUp = function CountUp(props) {\n  var className = props.className,\n    redraw = props.redraw,\n    containerProps = props.containerProps,\n    children = props.children,\n    style = props.style,\n    useCountUpProps = _objectWithoutProperties(props, _excluded);\n  var containerRef = React.useRef(null);\n  var isInitializedRef = React.useRef(false);\n  var _useCountUp = useCountUp(_objectSpread2(_objectSpread2({}, useCountUpProps), {}, {\n      ref: containerRef,\n      startOnMount: typeof children !== 'function' || props.delay === 0,\n      // component manually restarts\n      enableReinitialize: false\n    })),\n    start = _useCountUp.start,\n    reset = _useCountUp.reset,\n    updateCountUp = _useCountUp.update,\n    pauseResume = _useCountUp.pauseResume,\n    getCountUp = _useCountUp.getCountUp;\n  var restart = useEventCallback(function () {\n    start();\n  });\n  var update = useEventCallback(function (end) {\n    if (!props.preserveValue) {\n      reset();\n    }\n    updateCountUp(end);\n  });\n  var initializeOnMount = useEventCallback(function () {\n    if (typeof props.children === 'function') {\n      // Warn when user didn't use containerRef at all\n      if (!(containerRef.current instanceof Element)) {\n        console.error(\"Couldn't find attached element to hook the CountUp instance into! Try to attach \\\"containerRef\\\" from the render prop to a an Element, eg. <span ref={containerRef} />.\");\n        return;\n      }\n    }\n\n    // unlike the hook, the CountUp component initializes on mount\n    getCountUp();\n  });\n  React.useEffect(function () {\n    initializeOnMount();\n  }, [initializeOnMount]);\n  React.useEffect(function () {\n    if (isInitializedRef.current) {\n      update(props.end);\n    }\n  }, [props.end, update]);\n  var redrawDependencies = redraw && props;\n\n  // if props.redraw, call this effect on every props change\n  React.useEffect(function () {\n    if (redraw && isInitializedRef.current) {\n      restart();\n    }\n  }, [restart, redraw, redrawDependencies]);\n\n  // if not props.redraw, call this effect only when certain props are changed\n  React.useEffect(function () {\n    if (!redraw && isInitializedRef.current) {\n      restart();\n    }\n  }, [restart, redraw, props.start, props.suffix, props.prefix, props.duration, props.separator, props.decimals, props.decimal, props.className, props.formattingFn]);\n  React.useEffect(function () {\n    isInitializedRef.current = true;\n  }, []);\n  if (typeof children === 'function') {\n    // TypeScript forces functional components to return JSX.Element | null.\n    return children({\n      countUpRef: containerRef,\n      start: start,\n      reset: reset,\n      update: updateCountUp,\n      pauseResume: pauseResume,\n      getCountUp: getCountUp\n    });\n  }\n  return /*#__PURE__*/React.createElement(\"span\", _extends({\n    className: className,\n    ref: containerRef,\n    style: style\n  }, containerProps), typeof props.start !== 'undefined' ? getCountUp().formattingFn(props.start) : '');\n};\n\nexports.default = CountUp;\nexports.useCountUp = useCountUp;\n","import { formatAmount } from '@/lib/utils'\nimport Image from 'next/image'\nimport Link from 'next/link'\nimport React from 'react'\nimport Copy from './Copy'\n\nconst BankCard = ({ account, userName, showBalance = true }: CreditCardProps) => {\n\n  console.log(account);\n  return (\n    <div className=\"flex flex-col\">\n      <Link href={`/transaction-history/?id=${account.appwriteItemId}`} className=\"bank-card\">\n        <div className=\"bank-card_content\">\n          <div>\n            <h1 className=\"text-16 font-semibold text-white\">\n              {account.name}\n            </h1>\n            <p className=\"font-ibm-plex-serif font-black text-white\">\n              {formatAmount(account.currentBalance)}\n            </p>\n          </div>\n\n          <article className=\"flex flex-col gap-2\">\n            <div className=\"flex justify-between\">\n              <h1 className=\"text-12 font-semibold text-white\">\n                {userName}\n              </h1>\n              <h2 className=\"text-12 font-semibold text-white\">\n              ●● / ●●\n              </h2>\n            </div>\n            <p className=\"text-14 font-semibold tracking-[1.1px] text-white\">\n              ●●●● ●●●● ●●●● <span className=\"text-16\">{account?.mask}</span>\n            </p>\n          </article>\n        </div>\n\n        <div className=\"bank-card_icon\">\n          <Image \n            src=\"/icons/Paypass.svg\"\n            width={20}\n            height={24}\n            alt=\"pay\"\n          />\n          <Image \n            src=\"/icons/mastercard.svg\"\n            width={45}\n            height={32}\n            alt=\"mastercard\"\n            className=\"ml-5\"\n          />\n        </div>\n\n        <Image \n          src=\"/icons/lines.png\"\n          width={316}\n          height={190}\n          alt=\"lines\"\n          className=\"absolute top-0 left-0\"\n        />\n      </Link>\n\n      {showBalance && <Copy title={account?.sharaebleId} />}\n    </div>\n  )\n}\n\nexport default BankCard","import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","import {\n  Table,\n  TableBody,\n  TableCaption,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\"\nimport { transactionCategoryStyles } from \"@/constants\"\nimport { cn, formatAmount, formatDateTime, getTransactionStatus, removeSpecialCharacters } from \"@/lib/utils\"\n\nconst CategoryBadge = ({ category }: CategoryBadgeProps) => {\n  const {\n    borderColor,\n    backgroundColor,\n    textColor,\n    chipBackgroundColor,\n   } = transactionCategoryStyles[category as keyof typeof transactionCategoryStyles] || transactionCategoryStyles.default\n   \n  return (\n    <div className={cn('category-badge', borderColor, chipBackgroundColor)}>\n      <div className={cn('size-2 rounded-full', backgroundColor)} />\n      <p className={cn('text-[12px] font-medium', textColor)}>{category}</p>\n    </div>\n  )\n} \n\nconst TransactionsTable = ({ transactions }: TransactionTableProps) => {\n  return (\n    <Table>\n      <TableHeader className=\"bg-[#f9fafb]\">\n        <TableRow>\n          <TableHead className=\"px-2\">Transaction</TableHead>\n          <TableHead className=\"px-2\">Amount</TableHead>\n          <TableHead className=\"px-2\">Status</TableHead>\n          <TableHead className=\"px-2\">Date</TableHead>\n          <TableHead className=\"px-2 max-md:hidden\">Channel</TableHead>\n          <TableHead className=\"px-2 max-md:hidden\">Category</TableHead>\n        </TableRow>\n      </TableHeader>\n      <TableBody>\n        {transactions.map((t: Transaction) => {\n          const status = getTransactionStatus(new Date(t.date))\n          const amount = formatAmount(t.amount)\n\n          const isDebit = t.type === 'debit';\n          const isCredit = t.type === 'credit';\n\n          return (\n            <TableRow key={t.id} className={`${isDebit || amount[0] === '-' ? 'bg-[#FFFBFA]' : 'bg-[#F6FEF9]'} !over:bg-none !border-b-DEFAULT`}>\n              <TableCell className=\"max-w-[250px] pl-2 pr-10\">\n                <div className=\"flex items-center gap-3\">\n                  <h1 className=\"text-14 truncate font-semibold text-[#344054]\">\n                    {removeSpecialCharacters(t.name)}\n                  </h1>\n                </div>\n              </TableCell>\n\n              <TableCell className={`pl-2 pr-10 font-semibold ${\n                isDebit || amount[0] === '-' ?\n                  'text-[#f04438]'\n                  : 'text-[#039855]'\n              }`}>\n                {isDebit ? `-${amount}` : isCredit ? amount : amount}\n              </TableCell>\n\n              <TableCell className=\"pl-2 pr-10\">\n                <CategoryBadge category={status} /> \n              </TableCell>\n\n              <TableCell className=\"min-w-32 pl-2 pr-10\">\n                {formatDateTime(new Date(t.date)).dateTime}\n              </TableCell>\n\n              <TableCell className=\"pl-2 pr-10 capitalize min-w-24\">\n               {t.paymentChannel}\n              </TableCell>\n\n              <TableCell className=\"pl-2 pr-10 max-md:hidden\">\n               <CategoryBadge category={t.category} /> \n              </TableCell>\n            </TableRow>\n          )\n        })}\n      </TableBody>\n    </Table>\n  )\n}\n\nexport default TransactionsTable","export const sidebarLinks = [\n  {\n    imgURL: \"/icons/home.svg\",\n    route: \"/\",\n    label: \"Home\",\n  },\n  {\n    imgURL: \"/icons/dollar-circle.svg\",\n    route: \"/my-banks\",\n    label: \"My Banks\",\n  },\n  {\n    imgURL: \"/icons/transaction.svg\",\n    route: \"/transaction-history\",\n    label: \"Transaction History\",\n  },\n  {\n    imgURL: \"/icons/money-send.svg\",\n    route: \"/payment-transfer\",\n    label: \"Transfer Funds\",\n  },\n];\n\n// good_user / good_password - Bank of America\nexport const TEST_USER_ID = \"6627ed3d00267aa6fa3e\";\n\n// custom_user -> Chase Bank\n// export const TEST_ACCESS_TOKEN =\n//   \"access-sandbox-da44dac8-7d31-4f66-ab36-2238d63a3017\";\n\n// custom_user -> Chase Bank\nexport const TEST_ACCESS_TOKEN =\n  \"access-sandbox-229476cf-25bc-46d2-9ed5-fba9df7a5d63\";\n\nexport const ITEMS = [\n  {\n    id: \"6624c02e00367128945e\", // appwrite item Id\n    accessToken: \"access-sandbox-83fd9200-0165-4ef8-afde-65744b9d1548\",\n    itemId: \"VPMQJKG5vASvpX8B6JK3HmXkZlAyplhW3r9xm\",\n    userId: \"6627ed3d00267aa6fa3e\",\n    accountId: \"X7LMJkE5vnskJBxwPeXaUWDBxAyZXwi9DNEWJ\",\n  },\n  {\n    id: \"6627f07b00348f242ea9\", // appwrite item Id\n    accessToken: \"access-sandbox-74d49e15-fc3b-4d10-a5e7-be4ddae05b30\",\n    itemId: \"Wv7P6vNXRXiMkoKWPzeZS9Zm5JGWdXulLRNBq\",\n    userId: \"6627ed3d00267aa6fa3e\",\n    accountId: \"x1GQb1lDrDHWX4BwkqQbI4qpQP1lL6tJ3VVo9\",\n  },\n];\n\nexport const topCategoryStyles = {\n  \"Food and Drink\": {\n    bg: \"bg-blue-25\",\n    circleBg: \"bg-blue-100\",\n    text: {\n      main: \"text-blue-900\",\n      count: \"text-blue-700\",\n    },\n    progress: {\n      bg: \"bg-blue-100\",\n      indicator: \"bg-blue-700\",\n    },\n    icon: \"/icons/monitor.svg\",\n  },\n  Travel: {\n    bg: \"bg-success-25\",\n    circleBg: \"bg-success-100\",\n    text: {\n      main: \"text-success-900\",\n      count: \"text-success-700\",\n    },\n    progress: {\n      bg: \"bg-success-100\",\n      indicator: \"bg-success-700\",\n    },\n    icon: \"/icons/coins.svg\",\n  },\n  default: {\n    bg: \"bg-pink-25\",\n    circleBg: \"bg-pink-100\",\n    text: {\n      main: \"text-pink-900\",\n      count: \"text-pink-700\",\n    },\n    progress: {\n      bg: \"bg-pink-100\",\n      indicator: \"bg-pink-700\",\n    },\n    icon: \"/icons/shopping-bag.svg\",\n  },\n};\n\nexport const transactionCategoryStyles = {\n  \"Food and Drink\": {\n    borderColor: \"border-pink-600\",\n    backgroundColor: \"bg-pink-500\",\n    textColor: \"text-pink-700\",\n    chipBackgroundColor: \"bg-inherit\",\n  },\n  Payment: {\n    borderColor: \"border-success-600\",\n    backgroundColor: \"bg-green-600\",\n    textColor: \"text-success-700\",\n    chipBackgroundColor: \"bg-inherit\",\n  },\n  \"Bank Fees\": {\n    borderColor: \"border-success-600\",\n    backgroundColor: \"bg-green-600\",\n    textColor: \"text-success-700\",\n    chipBackgroundColor: \"bg-inherit\",\n  },\n  Transfer: {\n    borderColor: \"border-red-700\",\n    backgroundColor: \"bg-red-700\",\n    textColor: \"text-red-700\",\n    chipBackgroundColor: \"bg-inherit\",\n  },\n  Processing: {\n    borderColor: \"border-[#F2F4F7]\",\n    backgroundColor: \"bg-gray-500\",\n    textColor: \"text-[#344054]\",\n    chipBackgroundColor: \"bg-[#F2F4F7]\",\n  },\n  Success: {\n    borderColor: \"border-[#12B76A]\",\n    backgroundColor: \"bg-[#12B76A]\",\n    textColor: \"text-[#027A48]\",\n    chipBackgroundColor: \"bg-[#ECFDF3]\",\n  },\n  Travel: {\n    borderColor: \"border-[#0047AB]\",\n    backgroundColor: \"bg-blue-500\",\n    textColor: \"text-blue-700\",\n    chipBackgroundColor: \"bg-[#ECFDF3]\",\n  },\n  default: {\n    borderColor: \"\",\n    backgroundColor: \"bg-blue-500\",\n    textColor: \"text-blue-700\",\n    chipBackgroundColor: \"bg-inherit\",\n  },\n};\n","export { default } from \"../client/link\";\nexport * from \"../client/link\";\n\n//# sourceMappingURL=link.js.map",null,"import $6vYhU$react from \"react\";\nimport {createContextScope as $6vYhU$createContextScope} from \"@radix-ui/react-context\";\nimport {useComposedRefs as $6vYhU$useComposedRefs} from \"@radix-ui/react-compose-refs\";\nimport {Slot as $6vYhU$Slot} from \"@radix-ui/react-slot\";\n\n\n\n\n\n// We have resorted to returning slots directly rather than exposing primitives that can then\n// be slotted like `<CollectionItem as={Slot}>…</CollectionItem>`.\n// This is because we encountered issues with generic types that cannot be statically analysed\n// due to creating them dynamically via createCollection.\nfunction $e02a7d9cb1dc128c$export$c74125a8e3af6bb2(name) {\n    /* -----------------------------------------------------------------------------------------------\n   * CollectionProvider\n   * ---------------------------------------------------------------------------------------------*/ const PROVIDER_NAME = name + 'CollectionProvider';\n    const [createCollectionContext, createCollectionScope] = $6vYhU$createContextScope(PROVIDER_NAME);\n    const [CollectionProviderImpl, useCollectionContext] = createCollectionContext(PROVIDER_NAME, {\n        collectionRef: {\n            current: null\n        },\n        itemMap: new Map()\n    });\n    const CollectionProvider = (props)=>{\n        const { scope: scope , children: children  } = props;\n        const ref = $6vYhU$react.useRef(null);\n        const itemMap = $6vYhU$react.useRef(new Map()).current;\n        return /*#__PURE__*/ $6vYhU$react.createElement(CollectionProviderImpl, {\n            scope: scope,\n            itemMap: itemMap,\n            collectionRef: ref\n        }, children);\n    };\n    /*#__PURE__*/ Object.assign(CollectionProvider, {\n        displayName: PROVIDER_NAME\n    });\n    /* -----------------------------------------------------------------------------------------------\n   * CollectionSlot\n   * ---------------------------------------------------------------------------------------------*/ const COLLECTION_SLOT_NAME = name + 'CollectionSlot';\n    const CollectionSlot = /*#__PURE__*/ $6vYhU$react.forwardRef((props, forwardedRef)=>{\n        const { scope: scope , children: children  } = props;\n        const context = useCollectionContext(COLLECTION_SLOT_NAME, scope);\n        const composedRefs = $6vYhU$useComposedRefs(forwardedRef, context.collectionRef);\n        return /*#__PURE__*/ $6vYhU$react.createElement($6vYhU$Slot, {\n            ref: composedRefs\n        }, children);\n    });\n    /*#__PURE__*/ Object.assign(CollectionSlot, {\n        displayName: COLLECTION_SLOT_NAME\n    });\n    /* -----------------------------------------------------------------------------------------------\n   * CollectionItem\n   * ---------------------------------------------------------------------------------------------*/ const ITEM_SLOT_NAME = name + 'CollectionItemSlot';\n    const ITEM_DATA_ATTR = 'data-radix-collection-item';\n    const CollectionItemSlot = /*#__PURE__*/ $6vYhU$react.forwardRef((props, forwardedRef)=>{\n        const { scope: scope , children: children , ...itemData } = props;\n        const ref = $6vYhU$react.useRef(null);\n        const composedRefs = $6vYhU$useComposedRefs(forwardedRef, ref);\n        const context = useCollectionContext(ITEM_SLOT_NAME, scope);\n        $6vYhU$react.useEffect(()=>{\n            context.itemMap.set(ref, {\n                ref: ref,\n                ...itemData\n            });\n            return ()=>void context.itemMap.delete(ref)\n            ;\n        });\n        return /*#__PURE__*/ $6vYhU$react.createElement($6vYhU$Slot, {\n            [ITEM_DATA_ATTR]: '',\n            ref: composedRefs\n        }, children);\n    });\n    /*#__PURE__*/ Object.assign(CollectionItemSlot, {\n        displayName: ITEM_SLOT_NAME\n    });\n    /* -----------------------------------------------------------------------------------------------\n   * useCollection\n   * ---------------------------------------------------------------------------------------------*/ function useCollection(scope) {\n        const context = useCollectionContext(name + 'CollectionConsumer', scope);\n        const getItems = $6vYhU$react.useCallback(()=>{\n            const collectionNode = context.collectionRef.current;\n            if (!collectionNode) return [];\n            const orderedNodes = Array.from(collectionNode.querySelectorAll(`[${ITEM_DATA_ATTR}]`));\n            const items = Array.from(context.itemMap.values());\n            const orderedItems = items.sort((a, b)=>orderedNodes.indexOf(a.ref.current) - orderedNodes.indexOf(b.ref.current)\n            );\n            return orderedItems;\n        }, [\n            context.collectionRef,\n            context.itemMap\n        ]);\n        return getItems;\n    }\n    return [\n        {\n            Provider: CollectionProvider,\n            Slot: CollectionSlot,\n            ItemSlot: CollectionItemSlot\n        },\n        useCollection,\n        createCollectionScope\n    ];\n}\n\n\n\n\nexport {$e02a7d9cb1dc128c$export$c74125a8e3af6bb2 as createCollection};\n//# sourceMappingURL=index.mjs.map\n","import {createContext as $7Gjcd$createContext, createElement as $7Gjcd$createElement, useContext as $7Gjcd$useContext} from \"react\";\n\n\nconst $f631663db3294ace$var$DirectionContext = /*#__PURE__*/ $7Gjcd$createContext(undefined);\n/* -------------------------------------------------------------------------------------------------\n * Direction\n * -----------------------------------------------------------------------------------------------*/ const $f631663db3294ace$export$c760c09fdd558351 = (props)=>{\n    const { dir: dir , children: children  } = props;\n    return /*#__PURE__*/ $7Gjcd$createElement($f631663db3294ace$var$DirectionContext.Provider, {\n        value: dir\n    }, children);\n};\n/* -----------------------------------------------------------------------------------------------*/ function $f631663db3294ace$export$b39126d51d94e6f3(localDir) {\n    const globalDir = $7Gjcd$useContext($f631663db3294ace$var$DirectionContext);\n    return localDir || globalDir || 'ltr';\n}\nconst $f631663db3294ace$export$2881499e37b75b9a = $f631663db3294ace$export$c760c09fdd558351;\n\n\n\n\nexport {$f631663db3294ace$export$b39126d51d94e6f3 as useDirection, $f631663db3294ace$export$2881499e37b75b9a as Provider, $f631663db3294ace$export$c760c09fdd558351 as DirectionProvider};\n//# sourceMappingURL=index.mjs.map\n"],"names":["module","exports","require","wrappedServerComponent","components_RecentTransactions","accounts","transactions","appwriteItemId","page","totalPages","Math","ceil","length","indexOfLastTransaction","currentTransactions","slice","react_jsx_runtime","jsxs","section","className","header","jsx","h2","Link","href","Tabs","defaultValue","TabsList","map","TabsTrigger","value","account","BankTabItem","id","TabsContent","BankInfo","type","TransactionsTable","div","Pagination","components_Category","category","bg","circleBg","text","main","count","progress","progressBg","indicator","icon","topCategoryStyles","name","default","cn","figure","Image","src","width","height","alt","h3","Progress","totalCount","indicatorClassName","components_RightSidebar","user","banks","categories","countTransactionCategories","aside","span","firstName","h1","lastName","p","email","BankCard","userName","showBalance","$id","index","Category","components_TotalBalanceBox","totalBanks","totalCurrentBalance","DoughnutChart","AnimatedCounter","amount","wrappedServerComponent$1","Proxy","searchParams","currentPage","Number","loggedIn","getLoggedInUser","getAccounts","userId","accountsData","data","getAccount","_jsxs","_jsx","HeaderBox","title","subtext","TotalBalanceBox","RecentTransactions","RightSidebar","apply","originalFunction","thisArg","args","sentryTraceHeader","baggageHeader","headers","requestAsyncStore","request_async_storage_external_js_","requestAsyncStorage","getStore","_nullishCoalesce","h","_optionalChain","x","_","_2","get","_3","undefined","_4","_5","_6","_7","e","index_server","wrapServerComponentWithSentry","componentRoute","componentType","serverComponentModule.default","generateMetadata","generateImageMetadata","generateViewport","tree","children","Promise","resolve","then","__webpack_require__","bind","t","pages","originalPathname","__next_app__","loadChunk","routeModule","next_dist_server_future_route_modules_app_page_module_compiled__WEBPACK_IMPORTED_MODULE_4__","AppPageRouteModule","definition","kind","next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_5__","APP_PAGE","pathname","bundlePath","filename","appPaths","userland","loaderTree","__WEBPACK_DEFAULT_EXPORT__","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","CountUp","decimals","decimal","prefix","end","router","useRouter","useSearchParams","isActive","colors","getAccountTypeColors","onClick","newUrl","formUrlQuery","params","toString","key","push","scroll","lightBg","subtype","subText","formatAmount","currentBalance","hasCopied","setHasCopied","useState","Button","data-state","variant","navigator","clipboard","writeText","setTimeout","svg","xmlns","viewBox","fill","stroke","stroke-width","stroke-linecap","stroke-linejoin","polyline","points","rect","y","rx","ry","path","d","names","round","v","lim","l","max","min","p2b","n2b","b2n","n2p","map$1","A","B","C","D","E","F","a","b","c","f","hex","eq","isShort","r","g","alpha","HUE_RE","hsl2rgbn","s","n","k","hsv2rgbn","hwb2rgbn","w","i","rgb","rgb2hsl","calln","Array","isArray","hue","Z","Y","X","W","V","U","T","S","R","Q","P","O","N","M","L","K","G","H","I","J","names$1","OiceXe","antiquewEte","aqua","aquamarRe","azuY","beige","bisque","black","blanKedOmond","Xe","XeviTet","bPwn","burlywood","caMtXe","KartYuse","KocTate","cSO","cSnflowerXe","cSnsilk","crimson","cyan","xXe","xcyan","xgTMnPd","xWay","xgYF","xgYy","xkhaki","xmagFta","xTivegYF","xSange","xScEd","xYd","xsOmon","xsHgYF","xUXe","xUWay","xUgYy","xQe","xviTet","dAppRk","dApskyXe","dimWay","dimgYy","dodgerXe","fiYbrick","flSOwEte","foYstWAn","fuKsia","gaRsbSo","ghostwEte","gTd","gTMnPd","Way","gYF","gYFLw","gYy","honeyMw","hotpRk","RdianYd","Rdigo","ivSy","khaki","lavFMr","lavFMrXsh","lawngYF","NmoncEffon","ZXe","ZcSO","Zcyan","ZgTMnPdLw","ZWay","ZgYF","ZgYy","ZpRk","ZsOmon","ZsHgYF","ZskyXe","ZUWay","ZUgYy","ZstAlXe","ZLw","lime","limegYF","lRF","magFta","maPon","VaquamarRe","VXe","VScEd","VpurpN","VsHgYF","VUXe","VsprRggYF","VQe","VviTetYd","midnightXe","mRtcYam","mistyPse","moccasR","navajowEte","navy","Tdlace","Tive","TivedBb","Sange","SangeYd","ScEd","pOegTMnPd","pOegYF","pOeQe","pOeviTetYd","papayawEp","pHKpuff","peru","pRk","plum","powMrXe","purpN","YbeccapurpN","Yd","Psybrown","PyOXe","saddNbPwn","sOmon","sandybPwn","sHgYF","sHshell","siFna","silver","skyXe","UXe","UWay","UgYy","snow","sprRggYF","stAlXe","tan","teO","tEstN","tomato","Qe","viTet","JHt","wEte","wEtesmoke","Lw","LwgYF","RGB_RE","to","pow","from","modHSL","ratio","tmp","clone","proto","Object","assign","fromObject","input","Color","constructor","hexParse","str","ret","len","nameParse","unpack","j","ok","nk","unpacked","keys","tkeys","replace","parseInt","transparent","toLowerCase","functionParse","charAt","rgbParse","m","exec","hueParse","p1","p2","_rgb","_valid","valid","obj","rgbString","hexString","hslString","mix","color","weight","w2","c1","c2","w1","interpolate","rgb1","rgb2","clearer","greyscale","val","opaquer","negate","lighten","darken","saturate","desaturate","rotate","deg","noop","uid","isNullOrUndef","prototype","call","isObject","isNumberFinite","isFinite","finiteOrDefault","valueOrDefault","toPercentage","dimension","endsWith","parseFloat","toDimension","callback","fn","each","loopable","reverse","_elementsEqual","a0","a1","ilen","v0","v1","datasetIndex","helpers_segment_clone","source","target","create","klen","isValidKey","indexOf","_merger","options","tval","sval","merge","current","sources","merger","mergeIf","_mergerIf","hasOwnProperty","keyResolvers","o","resolveObjectKey","resolver","_getKeyResolver","_splitKey","parts","split","part","_capitalize","toUpperCase","defined","isFunction","setsEqual","size","item","has","PI","TAU","PITAU","INFINITY","POSITIVE_INFINITY","RAD_PER_DEG","HALF_PI","QUARTER_PI","TWO_THIRDS_PI","log10","sign","almostEquals","epsilon","abs","niceNum","range","roundedRange","niceRange","floor","fraction","niceFraction","isNumber","isNaN","_setMinAndMaxByKey","array","property","toRadians","degrees","_decimalPlaces","getAngleFromPoint","centrePoint","anglePoint","distanceFromXCenter","distanceFromYCenter","angle","atan2","distance","sqrt","distanceBetweenPoints","pt1","pt2","_angleDiff","_normalizeAngle","_angleBetween","start","sameAngleIsFullCircle","angleToStart","angleToEnd","startToAngle","endToAngle","_limitValue","_isBetween","_lookup","table","cmp","mid","hi","lo","_lookupByKey","last","ti","_rlookupByKey","arrayEvents","unlistenArrayEvents","listener","stub","_chartjs","listeners","splice","forEach","_arrayUnique","items","set","Set","requestAnimFrame","window","requestAnimationFrame","throttled","argsToUse","ticking","_toLeftRightCenter","align","_alignStartEnd","_textX","left","right","rtl","_getStartAndCountOfVisiblePoints","meta","animationsDisabled","pointCount","_sorted","iScale","_parsed","axis","minDefined","maxDefined","getUserBounds","getPixelForValue","_scaleRangesChanged","xScale","yScale","_scaleRanges","newRanges","xmin","xmax","ymin","ymax","changed","atEdge","elasticIn","sin","elasticOut","effects","linear","easeInQuad","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint","easeInSine","cos","easeOutSine","easeInOutSine","easeInExpo","easeOutExpo","easeInOutExpo","easeInCirc","easeOutCirc","easeInOutCirc","easeInElastic","easeOutElastic","easeInOutElastic","easeInBack","easeOutBack","easeInOutBack","easeInBounce","easeOutBounce","easeInOutBounce","isPatternOrGradient","getHoverColor","numbers","intlCache","Map","formatNumber","num","locale","getNumberFormat","cacheKey","JSON","stringify","formatter","Intl","NumberFormat","format","formatters","values","numeric","tickValue","ticks","notation","chart","delta","maxTick","logDelta","numDecimal","minimumFractionDigits","maximumFractionDigits","logarithmic","includes","significand","Ticks","overrides","descriptors","getScope$1","node","root","scope","Defaults","_descriptors","_appliers","animation","backgroundColor","borderColor","datasets","devicePixelRatio","context","platform","getDevicePixelRatio","elements","events","font","family","style","lineHeight","hover","hoverBackgroundColor","ctx","hoverBorderColor","hoverColor","indexAxis","interaction","mode","intersect","includeInvisible","maintainAspectRatio","onHover","parsing","plugins","responsive","scale","scales","showLine","drawActiveElementsOnTop","describe","override","route","targetScope","targetName","scopeObject","targetScopeObject","privateName","defineProperties","writable","enumerable","local","appliers","defaults","_scriptable","startsWith","_indexable","_fallback","delay","duration","easing","loop","properties","active","resize","show","animations","visible","hide","autoPadding","padding","top","bottom","display","offset","beginAtZero","bounds","clip","grace","grid","lineWidth","drawOnChartArea","drawTicks","tickLength","tickWidth","_ctx","tickColor","border","dash","dashOffset","minRotation","maxRotation","mirror","textStrokeWidth","textStrokeColor","autoSkip","autoSkipPadding","labelOffset","minor","major","crossAlign","showLabelBackdrop","backdropColor","backdropPadding","_measureText","gc","longest","string","textWidth","measureText","_alignPixel","pixel","currentDevicePixelRatio","halfWidth","clearCanvas","canvas","getContext","save","resetTransform","clearRect","restore","drawPoint","drawPointLegend","xOffset","yOffset","cornerRadius","xOffsetW","yOffsetW","pointStyle","rotation","radius","rad","translate","drawImage","beginPath","ellipse","arc","closePath","moveTo","lineTo","SQRT1_2","borderWidth","_isPointInArea","point","area","margin","clipArea","unclipArea","_steppedLineTo","previous","flip","midpoint","_bezierCurveTo","bezierCurveTo","cp1x","cp2x","cp1y","cp2y","renderText","opts","line","lines","strokeWidth","strokeColor","translation","fillStyle","textAlign","textBaseline","backdrop","drawBackdrop","oldColor","fillRect","strokeStyle","strokeText","maxWidth","fillText","decorateText","strikethrough","underline","metrics","actualBoundingBoxLeft","actualBoundingBoxRight","actualBoundingBoxAscent","actualBoundingBoxDescent","yDecoration","decorationWidth","addRoundedRectPath","topLeft","bottomLeft","bottomRight","topRight","LINE_HEIGHT","FONT_STYLE","numberOrZero","_readValueToProps","props","objProps","read","prop","toTRBL","toTRBLCorners","toPadding","toFont","fallback","match","console","warn","toLineHeight","matches","inputs","info","cacheable","createContext","parentContext","_createResolver","scopes","prefixes","rootScopes","getTarget","finalRootScopes","_resolve","Symbol","toStringTag","_cacheable","_scopes","_rootScopes","_getTarget","deleteProperty","_keys","_cached","_resolveWithPrefixes","proxy","readKey","needsSubResolver","createSubResolver","getOwnPropertyDescriptor","Reflect","getPrototypeOf","getKeysFromAllScopes","ownKeys","storage","_storage","_attachContext","subProxy","descriptorDefaults","_proxy","_context","_subProxy","_stack","setContext","receiver","_resolveWithContext","isScriptable","_resolveScriptable","getValue","join","add","delete","_resolveArray","isIndexable","arr","filter","allKeys","configurable","scriptable","indexable","_allKeys","getScope","parent","parentScopes","allScopes","addScopesFromKey","subGetTarget","addScopes","parentFallback","resolveKeysFromAllScopes","_parseObjectDataRadialScale","_parsing","parsed","parse","EPSILON","getPoint","skip","getValueAxis","capControlPoint","pt","_isDomSupported","document","_getParentNode","domNode","parentNode","host","parseMaxStyle","styleValue","parentProperty","valueInPixels","getComputedStyle","element","ownerDocument","defaultView","positions","getPositionedStyle","styles","suffix","result","pos","useOffsetPos","shadowRoot","getRelativePosition","event","borderBox","boxSizing","paddings","borders","box","getCanvasPosition","touches","offsetX","offsetY","getBoundingClientRect","clientX","clientY","round1","retinaScale","forceRatio","forceStyle","pixelRatio","deviceHeight","deviceWidth","setTransform","supportsEventListenerOptions","passiveSupported","passive","addEventListener","removeEventListener","readUsedSize","getPropertyValue","_pointInLine","_steppedInterpolation","_bezierInterpolation","cp1","cp2","getRtlAdapter","rectX","setWidth","xPlus","leftForLtr","itemWidth","_itemWidth","overrideTextDirection","direction","original","getPropertyPriority","setProperty","prevTextDirection","restoreTextDirection","propertyFn","between","compare","normalize","normalizeSegment","_boundSegment","segment","prevValue","startBound","endBound","getSegment","inside","subStart","startIsBefore","endIsBefore","shouldStart","shouldStop","prev","_boundSegments","segments","sub","splitByStyles","segmentOptions","doSplitByStyles","chartContext","_chart","baseStyle","readStyle","_datasetIndex","spanGaps","prevStyle","addStyle","st","dir","styleChanged","cache","replacer","p0","p0DataIndex","p1DataIndex","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","Animator","_request","_charts","_running","_lastDate","_notify","anims","date","callbacks","numSteps","initial","currentStep","_refresh","_update","Date","now","remaining","running","draw","_active","_total","tick","pop","_getAnims","charts","complete","listen","cb","reduce","acc","cur","_duration","stop","cancel","remove","animator","interpolators","boolean","factor","c0","number","Animation","cfg","currentValue","_fn","_easing","_start","_loop","_target","_prop","_from","_to","_promises","update","elapsed","remain","wait","promises","res","rej","resolved","method","Animations","config","_properties","configure","animationOptions","animatedProps","getOwnPropertyNames","option","_animateOptions","newOptions","resolveTargetOptions","$shared","$animations","_createAnimations","awaitAll","anim","all","scaleClip","allowedOverflow","getSortedDatasetIndices","filterVisible","metasets","_getSortedDatasetMetas","applyStack","stack","dsIndex","otherValue","singleMode","isStacked","stacked","getLastIndexInStack","vScale","positive","getMatchingVisibleMetas","updateStacks","controller","_cachedMeta","stacks","_stacks","iAxis","vAxis","indexScale","valueScale","itemStacks","getOrCreateStack","stackKey","indexValue","subStack","_top","_bottom","visualValues","_visualValues","getFirstScaleId","shift","clearStacks","isDirectUpdateMode","cloneIfNotShared","cached","shared","createStack","canStack","hidden","_stacked","DatasetController","datasetElementType","dataElementType","_cachedDataOpts","getMeta","_type","_data","_objectData","_sharedOptions","_drawStart","_drawCount","enableOptionSharing","supportsDecimation","$context","_syncList","initialize","linkScales","addElements","isPluginEnabled","updateIndex","dataset","getDataset","chooseId","xid","xAxisID","yid","yAxisID","rid","rAxisID","iid","iAxisID","vid","vAxisID","getScaleForId","rScale","getDatasetMeta","scaleID","_getOtherScale","reset","_destroy","_dataCheck","convertObjectDataToArray","adata","isExtensible","listenArrayEvents","defineProperty","base","object","buildOrUpdateElements","resetNewElements","stackChanged","oldStacked","_resyncElements","scopeKeys","datasetScopeKeys","getOptionScopes","createResolver","sorted","parseArrayData","parseObjectData","parsePrimitiveData","isNotInOrderComparedToPrev","labels","getLabels","singleScale","xAxisKey","yAxisKey","getParsed","getDataElement","updateRangeFromParsed","parsedValue","NaN","getMinMax","otherScale","NEGATIVE_INFINITY","otherMin","otherMax","_skip","getAllParsedValues","getMaxOverflow","getLabelAndValue","label","getLabelForValue","_clip","defaultClip","disabled","chartArea","getStyle","resolveDatasetElementOptions","resolveDataElementOptions","dataIndex","raw","_resolveElementOptions","elementType","sharing","datasetElementScopeKeys","resolveNamedOptions","freeze","_resolveAnimations","transition","datasetAnimationScopeKeys","getSharedOptions","includeOptions","sharedOptions","_animationsDisabled","_getSharedOptions","firstOpts","previouslySharedOptions","updateSharedOptions","updateElement","_setStyle","removeHoverStyle","setHoverStyle","_removeDatasetHoverStyle","_setDatasetHoverStyle","arg1","arg2","numMeta","numData","_insertElements","_removeElements","move","updateElements","removed","_sync","_dataChanges","_onDataPush","arguments","_onDataPop","_onDataShift","_onDataSplice","newCount","_onDataUnshift","parseValue","entry","parseFloatBar","startValue","endValue","barStart","barEnd","_custom","parseArrayOrPrimitive","isFloatBar","custom","parseEdge","edge","orig","startEnd","chart_BarController","categoryPercentage","barPercentage","grouped","_index_","_value_","iAxisKey","vAxisKey","bars","getBasePixel","horizontal","isHorizontal","ruler","_getRuler","vpixels","head","_calculateBarValuePixels","ipixels","_calculateBarIndexPixels","enableBorderRadius","center","setBorderSkipped","borderSkipped","setInflateAmount","inflateAmount","_getStacks","skipNull","_getStackCount","_getStackIndex","pixels","barThickness","computeMinSampleSize","curr","getAllScaleValues","_cache","$bar","visibleMetas","concat","sort","_length","updateMinAndPrev","getPixelForTick","_startPixel","_endPixel","stackCount","baseValue","minBarLength","actualBase","floating","getDataVisibility","startPixel","getPixelForDecimal","endPixel","getValueForPixel","halfGrid","getLineWidthForValue","maxBarThickness","Infinity","computeFlexCategoryTraits","next","percent","chunk","computeFitCategoryTraits","thickness","stackIndex","rects","chart_BubbleController","iPixel","vPixel","DoughnutController","animateRotate","animateScale","cutout","circumference","spacing","aspectRatio","legend","generateLabels","fontColor","legendItem","toggleDataVisibility","innerRadius","outerRadius","getter","_getRotation","_getCircumference","_getRotationExtents","isDatasetVisible","arcs","getMaxBorderWidth","getMaxOffset","maxSize","chartWeight","_getRingWeight","ratioX","ratioY","getRatioAndOffset","endAngle","startAngle","startX","startY","endX","endY","calcMax","calcMin","maxX","maxY","minX","minY","maxHeight","radiusLength","_getVisibleDatasetWeightTotal","total","calculateTotal","_getRingWeightOffset","_circumference","calculateCircumference","animationOpts","centerX","centerY","metaData","borderAlign","hoverBorderWidth","hoverOffset","ringWeightOffset","chart_LineController","_dataset","_decimated","animated","maxGapLength","directUpdate","pointsCount","prevParsed","nullData","updateControlPoints","chart_PolarAreaController","angleLines","circular","pointLabels","_updateRadius","minSize","cutoutPercentage","getVisibleDatasetCount","xCenter","yCenter","datasetStartAngle","getIndexAngle","defaultAngle","countVisibleElements","_computeAngle","getDistanceFromCenterForValue","chart_PieController","chart_RadarController","_fullLoop","pointPosition","getPointPositionForValue","chart_ScatterController","registry","getElement","chart_abstract","DateAdapterBase","members","init","formats","diff","startOf","endOf","adapters","_date","evaluateInteractionItems","position","handler","getSortedVisibleDatasetMetas","binarySearch","metaset","lookupMethod","_reversePixels","el","getRange","getIntersectItems","useFinalPosition","isPointInArea","inRange","getNearestItems","getNearestCartesianItems","distanceMetric","getDistanceMetricForAxis","useX","useY","minDistance","getCenterPoint","getProps","getAxisItems","rangeMethod","intersectsItem","Interaction","modes","nearest","STATIC_POSITIONS","filterByPosition","filterDynamicPositionByAxis","sortByWeight","getCombinedMax","maxPadding","updateMaxPadding","boxPadding","fitBoxes","boxes","layout","refit","refitBoxes","getMargins","same","other","updateDims","getPadding","newWidth","outerWidth","newHeight","outerHeight","widthChanged","heightChanged","fullSize","setBoxDims","placeBoxes","userPadding","placed","stackWeight","layouts","addBox","_layers","z","removeBox","layoutItem","minPadding","availableWidth","availableHeight","buildLayoutBoxes","layoutBoxes","wrapBoxes","wrap","centerHorizontal","centerVertical","leftAndTop","rightAndBottom","vertical","verticalBoxes","horizontalBoxes","beforeLayout","vBoxMaxWidth","hBoxMaxHeight","setLayoutDims","buildStacks","handleMaxPadding","updatePos","change","BasePlatform","acquireContext","releaseContext","getMaximumSize","isAttached","updateConfig","BasicPlatform","EXPANDO_KEY","EVENT_TYPES","touchstart","touchmove","touchend","pointerenter","pointerdown","pointermove","pointerup","pointerleave","pointerout","isNullOrEmpty","eventListenerOptions","nodeListContains","nodeList","contains","createAttachObserver","observer","MutationObserver","trigger","entries","addedNodes","removedNodes","observe","childList","subtree","createDetachObserver","drpListeningCharts","oldDevicePixelRatio","onWindowResize","dpr","createResizeObserver","container","clientWidth","ResizeObserver","contentRect","releaseObserver","disconnect","createProxyAndListen","fromNativeEvent","native","DomPlatform","initCanvas","renderHeight","getAttribute","renderWidth","displayWidth","displayHeight","removeAttribute","setAttribute","proxies","$proxies","handlers","attach","detach","bbWidth","bbHeight","margins","containerSize","getContainerSize","containerStyle","containerBorder","containerPadding","clientHeight","isConnected","Element","defaultRoutes","tooltipPosition","hasValue","final","newTicks","majorStart","majorEnd","reverseAlign","offsetFromEdge","getTicksLimit","ticksLength","maxTicksLimit","sample","numItems","increment","getTickMarkLength","getTitleHeight","Scale","_margins","paddingTop","paddingBottom","paddingLeft","paddingRight","labelRotation","_range","_gridLineItems","_labelItems","_labelSizes","_maxLength","_longestTextCache","_userMax","_userMin","_suggestedMax","_suggestedMin","_ticksLength","_borderValue","_dataLimitsCached","suggestedMin","suggestedMax","metas","getTicks","xLabels","yLabels","getLabelItems","_computeLabelItems","beforeUpdate","tickOpts","sampleSize","beforeSetDimensions","setDimensions","afterSetDimensions","beforeDataLimits","determineDataLimits","afterDataLimits","_addGrace","minmax","keepZero","beforeBuildTicks","buildTicks","afterBuildTicks","samplingEnabled","_convertTicksToLabels","beforeCalculateLabelRotation","calculateLabelRotation","afterCalculateLabelRotation","determinedMaxTicks","determineMaxTicks","_tickSize","ticksLimit","majorIndices","enabled","getMajorIndices","numMajorIndices","first","skipMajors","calculateSpacing","evenMajorSpacing","getEvenSpacing","factors","_factorize","avgMajorSpacing","afterAutoSkip","beforeFit","fit","afterFit","afterUpdate","reversePixels","_alignToPixels","alignToPixels","_callHooks","notifyPlugins","beforeTickToLabelConversion","generateTickLabels","afterTickToLabelConversion","maxLabelDiagonal","numTicks","_isVisible","labelSizes","_getLabelSizes","maxLabelWidth","widest","maxLabelHeight","highest","radians","asin","titleOpts","gridOpts","titleHeight","tickPadding","angleRadians","labelHeight","labelWidth","_calculatePadding","_handleMargins","isRotated","labelsBelowTicks","offsetLeft","offsetRight","isFullSize","_computeLabelSizes","jlen","tickFont","fontString","nestedLabel","caches","widths","heights","widestLabelSize","highestLabelSize","_resolveTickFontOptions","gcLen","valueAt","idx","getDecimalForPixel","getBaseValue","optionTicks","rot","_computeGridLineItems","borderValue","lineValue","alignedLineValue","tx1","ty1","tx2","ty2","x1","y1","x2","y2","tl","borderOpts","axisWidth","axisHalfWidth","alignBorderValue","positionAxisID","limit","step","optsAtIndex","optsAtIndexBorder","lineColor","tickBorderDash","tickBorderDashOffset","getPixelForGridLine","offsetGridLines","validIndex","lineCount","textOffset","tickAndPadding","hTickAndPadding","_getXAxisLabelAlignment","_getYAxisLabelAlignment","halfCount","tickTextAlign","labelPadding","_computeLabelArea","drawBackground","findIndex","drawGrid","drawLine","setLineDash","lineDashOffset","drawBorder","lastLineWidth","drawLabels","renderTextOptions","drawTitle","titleX","titleY","titleArgs","tz","gz","bz","axisID","_maxDigits","fontSize","TypedRegistry","isForType","isPrototypeOf","register","parentScope","registerDefaults","itemDefaults","routeDefaults","routes","propertyParts","sourceName","sourceScope","unregister","Registry","controllers","_typedRegistries","_each","addControllers","addPlugins","addScales","getController","_get","getPlugin","getScale","removeControllers","removeElements","removePlugins","removeScales","typedRegistry","reg","_getRegistryForType","arg","_exec","itemReg","component","camelMethod","PluginService","_init","notify","hook","_createDescriptors","descriptor","plugin","cancelable","invalidate","_oldCache","_notifyStateChanges","allPlugins","localIds","createDescriptors","pluginOpts","pluginScopeKeys","previousDescriptors","some","getIndexAxis","datasetDefaults","datasetOptions","idMatchesAxis","determineAxis","scaleOptions","getAxisFromDataset","initOptions","mergeScaleConfig","chartDefaults","configScales","chartIndexAxis","scaleConf","error","retrieveAxisFromDatasets","boundDs","defaultId","defaultScaleOptions","defaultID","initData","keyCache","keysCached","cachedKeys","generate","addIfFound","Config","_config","initConfig","_scopeCache","_resolverCache","clearCache","clear","datasetType","additionalOptionScopes","_cachedScopes","mainScope","resetCache","keyLists","chartOptionScopes","subPrefixes","getResolver","needContext","hasFunction","subResolver","resolverCache","KNOWN_POSITIONS","positionIsHorizontal","compare2Level","l1","l2","onAnimationsComplete","onComplete","onAnimationProgress","onProgress","getCanvas","getElementById","instances","getChart","getSizeForArea","field","Chart","version","invalidatePlugins","userConfig","initialCanvas","existingChart","OffscreenCanvas","_options","_aspectRatio","_metasets","_lastEvent","_listeners","_responsiveListeners","_sortedMetasets","_plugins","_hiddenIndices","attached","_doResize","debounce","timeout","clearTimeout","resizeDelay","_initialize","bindEvents","_resizeBeforeDraw","_resize","newSize","newRatio","onResize","render","ensureScalesHaveIDs","axisOptions","buildOrUpdateScales","scaleOpts","updated","isRadial","dposition","dtype","scaleType","hasUpdated","_updateMetasets","_destroyDatasetMeta","_removeUnreferencedMetasets","buildOrUpdateControllers","newControllers","order","ControllerClass","_resetElements","animsDisabled","_updateScales","_checkEventBindings","_updateHiddenIndices","_minPadding","_updateLayout","_updateDatasets","_eventHandler","_updateHoverStyles","unbindEvents","_getUniformDataChanges","moveNumericKeys","intKey","datasetCount","makeSet","changeSet","noArea","_idx","_updateDataset","layers","_drawDatasets","_drawDataset","useClip","getDatasetArea","getElementsAtEventForMode","setDatasetVisibility","_updateVisibility","_stop","destroy","toBase64Image","toDataURL","bindUserEvents","bindResponsiveEvents","_add","detached","_remove","updateHoverStyle","getActiveElements","setActiveElements","activeElements","lastActive","pluginId","replay","hoverOptions","deactivated","activated","inChartArea","eventFilter","_handleEvent","lastEvent","_getActiveElements","isClick","rThetaToXY","theta","pathArc","pixelMargin","innerR","spacingOffset","noSpacingOuterRadius","avNogSpacingRadius","noSpacingInnerRadius","beta","angleOffset","outerStart","outerEnd","innerStart","innerEnd","parseBorderRadius$1","angleDelta","borderRadius","halfThickness","innerLimit","computeOuterLimit","outerArcLimit","outerStartAdjustedRadius","outerEndAdjustedRadius","outerStartAdjustedAngle","outerEndAdjustedAngle","innerStartAdjustedRadius","innerEndAdjustedRadius","innerStartAdjustedAngle","innerEndAdjustedAngle","outerMidAdjustedAngle","pCenter","p4","innerMidAdjustedAngle","p8","outerStartX","outerStartY","outerEndX","outerEndY","ArcElement","fullCircles","chartX","chartY","rAdjust","betweenAngles","withinRadius","halfAngle","halfRadius","radiusOffset","drawArc","inner","lineJoin","clipArc","angleMargin","setStyle","lineCap","pathVars","paramsStart","paramsEnd","segmentStart","segmentEnd","pathSegment","lineMethod","stepped","tension","cubicInterpolationMode","fastPathSegment","prevX","lastY","avgX","countX","pointIndex","drawX","truncX","_getSegmentMethod","useFastPath","usePath2D","Path2D","LineElement","capBezierPoints","_path","_points","_segments","_pointsUpdated","_updateBezierControlPoints","controlPoints","splineCurveMonotone","pointBefore","pointCurrent","valueAxis","pointsLen","deltaK","mK","pointAfter","slopeDelta","monotoneAdjust","alphaK","betaK","tauK","squaredMagnitude","monotoneCompute","splineCurve","firstPoint","middlePoint","afterPoint","d01","d12","s01","s12","fa","fb","inArea","inAreaPrev","inAreaNext","_computeSegments","findStartAndEnd","completeLoop","solidSegments","_interpolate","interpolated","segmentMethod","strokePathDirect","inRange$1","hitRadius","PointElement","hoverRadius","mouseX","mouseY","inXRange","inYRange","getBarBounds","bar","half","skipOrLimit","skipX","skipY","addNormalRectPath","inflateRect","refRect","BarElement","outer","boundingRects","parseBorderWidth","maxW","maxH","parseBorderRadius","maxR","enableBorder","addRectPath","hasRadius","_getBounds","_findSegmentEnd","_getEdge","interpolatedLineTo","interpolatedPoint","getBoxSize","labelOpts","boxHeight","boxWidth","usePointStyle","pointStyleWidth","itemHeight","itemsEqual","Legend","_added","legendHitBoxes","_hoveredItem","doughnutMode","legendItems","columnSizes","lineWidths","buildLabels","labelFont","_computeTitleHeight","_fitRows","_fitCols","hitboxes","totalHeight","row","_itemHeight","heightLimit","totalWidth","currentColWidth","currentColHeight","col","fontLineHeight","legendItemText","calculateLegendItemHeight","adjustHitBoxes","rtlHelper","hitbox","_draw","cursor","defaultColor","halfFontSize","drawLegendBox","lineDash","SQRT2","yBoxTop","xBoxLeft","textDirection","titleFont","titlePadding","topPaddingPlusHalfFontSize","_getLegendItemAt","hitBox","lh","handleEvent","onLeave","hoveredItem","sameItem","WeakMap","positioners","average","xSet","eventPosition","nearestElement","tp","pushOrConcat","toPush","splitNewlines","String","getTooltipSize","tooltip","body","footer","bodyFont","footerFont","titleLineCount","footerLineCount","bodyLineItemCount","combinedBodyLength","bodyItem","before","after","beforeBody","afterBody","titleSpacing","titleMarginBottom","displayColors","bodySpacing","footerMarginTop","footerSpacing","widthPadding","maxLineWidth","determineAlignment","yAlign","determineYAlign","xAlign","determineXAlign","chartWidth","doesNotFitWithAlign","caret","caretSize","caretPadding","getBackgroundPoint","alignment","paddingAndSize","alignX","alignY","getAlignedX","overrideCallbacks","defaultCallbacks","beforeTitle","tooltipItems","labelCount","afterTitle","beforeLabel","tooltipItem","formattedValue","labelColor","labelTextColor","bodyColor","labelPointStyle","afterLabel","beforeFooter","afterFooter","invokeCallbackWithFallback","Tooltip","opacity","_eventPosition","_size","_cachedAnimations","_tooltipItems","dataPoints","caretX","caretY","labelColors","labelPointStyles","labelTextColors","getTitle","getBeforeBody","getBody","bodyItems","scoped","getAfterBody","getFooter","_createItems","createTooltipItem","itemSort","positionAndSize","backgroundPoint","external","drawCaret","tooltipPoint","caretPosition","getCaretPosition","x3","y3","ptX","ptY","titleAlign","titleColor","_drawColorBox","colorX","rtlColorX","yOffSet","colorY","drawOptions","multiKeyBackground","outerX","innerX","strokeRect","drawBody","textColor","bodyAlign","bodyLineHeight","xLinePadding","fillLineOfText","bodyAlignForCalculation","drawFooter","footerAlign","footerColor","tooltipSize","quadraticCurveTo","_updateAnimationTarget","animX","animY","_willRender","hasTooltipContent","globalAlpha","positionChanged","_positionChanged","_ignoreReplayEvents","addIfString","addedLabels","unshift","_getLabelForValue","CategoryScale","_startValue","_valueRange","_addedLabels","added","findOrAddLabel","lastIndexOf","relativeLabelSize","minSpacing","LinearScaleBase","_endValue","handleTickRangeOptions","setMin","setMax","minSign","maxSign","getTickLimit","maxTicks","stepSize","computeTickLimit","generateTicks$1","generationOptions","dataRange","niceMin","niceMax","numSpaces","precision","maxDigits","includeBounds","unit","maxSpaces","rmin","rmax","countDefined","almostWhole","rounded","decimalPlaces","LinearScale","log10Floor","changeExponent","isMajor","tickVal","steps","rangeExp","rangeStep","LogarithmicScale","_zero","generateTicks","minExp","exp","startExp","lastTick","getTickBackdropHeight","determineLimits","pathRadiusLine","getPointPosition","RadialLinearScale","animate","centerPointLabels","drawingArea","_pointLabels","_pointLabelItems","_padding","fitWithPointLabels","limits","valueCount","pointLabelOpts","additionalAngle","getPointLabelContext","plFont","textSize","_longestText","arrayOfThings","thing","nestedThing","garbageCollect","updateLimits","hLimits","vLimits","setCenterPoint","buildPointLabelItems","itemOpts","extra","createPointLabelItem","outerDistance","pointLabelPosition","isNotOverlapped","leftMovement","rightMovement","topMovement","bottomMovement","scalingFactor","getValueForDistanceFromCenter","scaledDistance","pointLabel","distanceFromCenter","getBasePosition","getPointLabelPosition","drawPointLabels","drawPointLabelBox","backdropLeft","backdropTop","backdropWidth","backdropHeight","drawRadiusLine","gridLineOpts","INTERVALS","millisecond","common","second","minute","hour","day","week","month","quarter","year","UNITS","sorter","adapter","_adapter","parser","isoWeekday","_parseOpts","determineUnitForAutoTicks","minUnit","capacity","interval","MAX_SAFE_INTEGER","addTick","time","timestamps","ticksFromTimestamps","majorUnit","setMajorTicks","TimeScale","displayFormats","_unit","_majorUnit","_offsets","_normalized","normalized","_applyBounds","_getLabelBounds","getLabelTimestamps","timeOpts","_generate","_filterBetween","_getLabelCapacity","determineUnitForFormatting","determineMajorUnit","initOffsets","offsetAfterAutoskip","getDecimalForValue","weekday","hasWeekday","getDataTimestamps","tooltipFormat","datetime","fmt","_tickFormatFunction","minorFormat","majorFormat","offsets","_getLabelSize","ticksOpts","tickLabelWidth","cosRotation","sinRotation","tickFontSize","exampleTime","exampleLabel","chart_interpolate","prevSource","nextSource","prevTarget","nextTarget","TimeSeriesScale","_table","_minPos","_tableRange","_getTimestampsForTable","buildLookupTable","defaultDatasetIdKey","reforwardRef","ref","setDatasets","currentData","nextDatasets","datasetIdKey","addedDatasets","currentDataset","find","nextDataset","dist_Chart","react","forwardRef","redraw","fallbackContent","updateMode","canvasProps","canvasRef","useRef","chartRef","renderChart","cloneData","nextLabels","nextData","destroyChart","useEffect","setOptions","nextOptions","createElement","role","Doughnut","ChartJS","_element","afterInit","_args","afterDraw","afterEvent","ci","useBorderRadius","components_DoughnutChart","accountNames","balances","handleNavigation","pageNumber","$67824d98245208a0$var$PROGRESS_NAME","$67824d98245208a0$var$createProgressContext","$67824d98245208a0$export$388eb2d8f6d3261f","dist","$67824d98245208a0$var$ProgressProvider","$67824d98245208a0$var$useProgressContext","$67824d98245208a0$export$b25a304ec7d746bb","forwardedRef","__scopeProgress","valueProp","maxProp","getValueLabel","$67824d98245208a0$var$defaultGetValueLabel","progressProps","$67824d98245208a0$var$isValidMaxNumber","$67824d98245208a0$var$isValidValueNumber","valueLabel","$67824d98245208a0$var$isNumber","react_primitive_dist","WV","esm_extends","$67824d98245208a0$var$getProgressState","propTypes","propName","componentName","propValue","strVal","$67824d98245208a0$export$2b776f7e7ee60dbd","_context$value","indicatorProps","maxValue","React","transform","displayName","ProgressPrimitive","$d7bdfb9eb0fdf311$var$ENTRY_FOCUS","$d7bdfb9eb0fdf311$var$EVENT_OPTIONS","bubbles","$d7bdfb9eb0fdf311$var$GROUP_NAME","$d7bdfb9eb0fdf311$var$Collection","$d7bdfb9eb0fdf311$var$useCollection","$d7bdfb9eb0fdf311$var$createCollectionScope","react_collection_dist","$d7bdfb9eb0fdf311$var$createRovingFocusGroupContext","$d7bdfb9eb0fdf311$export$c7109489551a4f4","react_context_dist","$d7bdfb9eb0fdf311$var$RovingFocusProvider","$d7bdfb9eb0fdf311$var$useRovingFocusContext","$d7bdfb9eb0fdf311$export$8699f7c8af148338","Provider","__scopeRovingFocusGroup","Slot","$d7bdfb9eb0fdf311$var$RovingFocusGroupImpl","orientation","currentTabStopId","currentTabStopIdProp","defaultCurrentTabStopId","onCurrentTabStopIdChange","onEntryFocus","groupProps","composedRefs","react_compose_refs_dist","react_direction_dist","gm","setCurrentTabStopId","react_use_controllable_state_dist","defaultProp","onChange","isTabbingBackOut","setIsTabbingBackOut","handleEntryFocus","react_use_callback_ref_dist","getItems","isClickFocusRef","focusableItemsCount","setFocusableItemsCount","onItemFocus","useCallback","tabStopId","onItemShiftTab","onFocusableItemAdd","prevCount","onFocusableItemRemove","tabIndex","outline","onMouseDown","onFocus","isKeyboardFocus","currentTarget","entryFocusEvent","CustomEvent","dispatchEvent","defaultPrevented","focusable","$d7bdfb9eb0fdf311$var$focusFirst","candidateItems","Boolean","onBlur","$d7bdfb9eb0fdf311$export$ab9df7c53fe8454","itemProps","autoId","react_id_dist","isCurrentTabStop","ItemSlot","preventDefault","onKeyDown","shiftKey","focusIntent","$d7bdfb9eb0fdf311$var$getFocusIntent","$d7bdfb9eb0fdf311$var$MAP_KEY_TO_FOCUS_INTENT","candidateNodes","currentIndex","$d7bdfb9eb0fdf311$var$wrapArray","startIndex","ArrowLeft","ArrowUp","ArrowRight","ArrowDown","PageUp","Home","PageDown","End","candidates","PREVIOUSLY_FOCUSED_ELEMENT","activeElement","candidate","focus","$69cb30bb0017df05$var$TABS_NAME","$69cb30bb0017df05$var$createTabsContext","$69cb30bb0017df05$export$355f5bd209d7b13a","$69cb30bb0017df05$var$useRovingFocusGroupScope","$69cb30bb0017df05$var$TabsProvider","$69cb30bb0017df05$var$useTabsContext","$69cb30bb0017df05$export$b2539bed5023c21c","__scopeTabs","onValueChange","activationMode","tabsProps","setValue","baseId","$69cb30bb0017df05$export$9712d22edc0d78c1","listProps","rovingFocusGroupScope","asChild","$69cb30bb0017df05$export$8114b9fdfdf9f3ba","triggerProps","triggerId","$69cb30bb0017df05$var$makeTriggerId","contentId","$69cb30bb0017df05$var$makeContentId","isSelected","button","ctrlKey","isAutomaticActivation","$69cb30bb0017df05$export$bd905d70e8fd2ebb","forceMount","contentProps","isMountAnimationPreventedRef","rAF","cancelAnimationFrame","react_presence_dist","present","animationDuration","TabsPrimitive","endVal","startVal","useEasing","useGrouping","useIndianSeparators","smartEasingThreshold","smartEasingAmount","separator","enableScrollSpy","scrollSpyDelay","scrollSpyOnce","finalEndVal","countDown","paused","once","startTime","frameVal","easingFn","toFixed","printValue","onCompleteCallback","u","numerals","formattingFn","validateValue","resetDuration","onScrollFns","handleScroll","onscroll","innerHeight","scrollY","pageYOffset","determineDirectionAndSmartEasing","onStartCallback","pauseResume","tagName","textContent","innerHTML","ensureNumber","countup_js","getOwnPropertySymbols","_objectSpread2","_defineProperty","_toPrimitive","toPrimitive","getOwnPropertyDescriptors","_extends","_objectWithoutProperties","excluded","_objectWithoutPropertiesLoose","sourceKeys","sourceSymbolKeys","propertyIsEnumerable","_arrayLikeToArray","arr2","useIsomorphicLayoutEffect","useLayoutEffect","useEventCallback","_len","_key","createCountUpInstance","_excluded$1","DEFAULTS","startOnMount","enableReinitialize","useCountUp","filteredProps","fromEntries","_ref","_ref2","_arrayWithHoles","_iterableToArrayLimit","iterator","done","return","_unsupportedIterableToArray","minLen","test","_nonIterableRest","_useMemo","useMemo","onEnd","onStart","onPauseResume","onReset","onUpdate","instanceProps","countUpRef","timerRef","isInitializedRef","createInstance","getCountUp","recreate","countUp","newCountUp","run","restart","newEnd","maybeInitialize","shouldReset","_excluded","ZP","containerProps","useCountUpProps","containerRef","_useCountUp","updateCountUp","preserveValue","initializeOnMount","redrawDependencies","components_BankCard","log","article","mask","Copy","sharaebleId","Table","TableHeader","thead","TableBody","tbody","TableFooter","tfoot","TableRow","tr","TableHead","th","TableCell","td","TableCaption","caption","CategoryBadge","chipBackgroundColor","transactionCategoryStyles","components_TransactionsTable","status","getTransactionStatus","isDebit","removeSpecialCharacters","formatDateTime","dateTime","paymentChannel","Travel","Payment","Transfer","Processing","Success","$e02a7d9cb1dc128c$export$c74125a8e3af6bb2","PROVIDER_NAME","createCollectionContext","createCollectionScope","_radix_ui_react_context__WEBPACK_IMPORTED_MODULE_1__","CollectionProviderImpl","useCollectionContext","collectionRef","itemMap","COLLECTION_SLOT_NAME","CollectionSlot","react__WEBPACK_IMPORTED_MODULE_0__","_radix_ui_react_compose_refs__WEBPACK_IMPORTED_MODULE_2__","_radix_ui_react_slot__WEBPACK_IMPORTED_MODULE_3__","g7","ITEM_SLOT_NAME","ITEM_DATA_ATTR","itemData","collectionNode","orderedNodes","querySelectorAll","$f631663db3294ace$var$DirectionContext","$f631663db3294ace$export$b39126d51d94e6f3","localDir","globalDir","useContext"],"sourceRoot":""}